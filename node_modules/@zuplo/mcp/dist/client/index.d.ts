import type { CallToolResult, ClientCapabilities, GetPromptResult, InitializeResult, Prompt, Tool } from "../mcp/20250618/types.js";
import type { Transport } from "../transport/types.js";
import type { MCPClientOptions } from "./types.js";
export declare const DEFAULT_MCP_CLIENT_NAME = "MCP Client";
export declare const DEFAULT_MCP_CLIENT_VERSION = "0.0.0";
export declare class MCPClient {
    readonly name: string;
    readonly version: string;
    readonly capabilities: ClientCapabilities;
    private transport?;
    private isInitialized;
    private protocolVersion?;
    private logger;
    private requestId;
    private transportOptions;
    constructor(options?: MCPClientOptions);
    /**
     * Connect to an MCP server using the provided transport
     */
    connect(transport: Transport): Promise<void>;
    /**
     * Initialize the connection with the server
     */
    initialize(protocolVersion?: string): Promise<InitializeResult>;
    /**
     * Send a ping request to the server
     */
    ping(): Promise<void>;
    /**
     * List all available tools from the server
     */
    listTools(): Promise<Tool[]>;
    /**
     * Call a specific tool with provided arguments
     */
    callTool(name: string, args?: Record<string, unknown>): Promise<CallToolResult>;
    /**
     * List all available prompts from the server
     */
    listPrompts(): Promise<Prompt[]>;
    /**
     * Get a prompt with provided arguments
     */
    getPrompt(name: string, args?: Record<string, unknown>): Promise<GetPromptResult>;
    /**
     * Disconnect from the server
     */
    disconnect(): Promise<void>;
    private sendRequest;
}
