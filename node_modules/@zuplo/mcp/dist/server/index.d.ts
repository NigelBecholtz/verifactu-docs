import { type JSONRPCError, type JSONRPCNotification, type JSONRPCRequest, type JSONRPCResponse } from "../jsonrpc2/types.js";
import type { CallToolResult, Prompt, ServerCapabilities, Tool } from "../mcp/20250618/types.js";
import type { PromptConfig } from "../prompts/types.js";
import type { ToolConfig } from "../tools/types.js";
import type { Transport } from "../transport/types.js";
import type { InputParamValidator, MCPServerOptions } from "./types.js";
export declare const DEFAULT_MCP_SERVER_NAME = "MCP Server";
export declare const DEFAULT_MCP_SERVER_VERSION = "0.0.0";
export declare class MCPServer {
    private capabilities;
    private tools;
    private prompts;
    private name;
    private version;
    private instructions;
    private logger;
    constructor(options: MCPServerOptions);
    withTransport(transport: Transport): void;
    getTool(name: string): Tool | undefined;
    getTools(): Map<string, Tool>;
    /**
     * Get the server capabilities
     */
    getCapabilities(): ServerCapabilities;
    /**
     * Register a tool
     */
    addTool<V extends InputParamValidator<unknown>, R extends CallToolResult = CallToolResult>(config: ToolConfig<V, R>): void;
    /**
     * Remove a tool from the server
     */
    removeTool(name: string): boolean;
    /**
     * Get all registered tools
     */
    getToolDefinitions(): Tool[];
    /**
     * Register a prompt
     */
    addPrompt<V extends InputParamValidator<unknown>>(config: PromptConfig<V>): void;
    /**
     * Remove a prompt from the server
     */
    removePrompt(name: string): boolean;
    /**
     * Get a specific prompt by name
     */
    getPrompt(name: string): Prompt | undefined;
    /**
     * Get all registered prompts
     */
    getPromptDefinitions(): Prompt[];
    /**
     * Handle a JSON-RPC request
     */
    handleRequest(request: JSONRPCRequest): Promise<JSONRPCResponse | JSONRPCError>;
    /**
     * Handle a JSON-RPC notification
     */
    handleNotification(notification: JSONRPCNotification): Promise<void>;
    /**
     * Handle ping request - the server MUST respond with an empty request.
     */
    private handlePing;
    /**
     * Handle initialize request
     */
    private handleInitialize;
    private handleToolListRequest;
    /**
     * Handle tool request
     */
    private handleToolCallRequest;
    /**
     * Handle prompts/list request
     */
    private handlePromptListRequest;
    /**
     * Handle prompts/get request
     */
    private handlePromptGetRequest;
    /**
     * Update the available tools in capabilities
     */
    private updateAvailableTools;
}
