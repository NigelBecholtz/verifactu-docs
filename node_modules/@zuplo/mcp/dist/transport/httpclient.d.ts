import type { JSONRPCMessage } from "../jsonrpc2/types.js";
import type { MessageHandler, Transport, TransportOptions } from "./types.js";
export interface HTTPClientTransportOptions extends TransportOptions {
    url: string;
}
/**
 * HTTP Client Transport for MCP clients to communicate with MCP servers
 *
 * Makes HTTP POST requests to send JSON-RPC messages and handles responses.
 * Designed specifically for client-side usage.
 */
export declare class HTTPClientTransport implements Transport {
    private url;
    private timeout;
    private headers;
    private fetch;
    private logger;
    private sessionId?;
    private messageHandler?;
    private errorCallback?;
    private closeCallback?;
    private isConnected;
    constructor(options: HTTPClientTransportOptions);
    setHeaders(headers: Record<string, string>): void;
    connect(): Promise<void>;
    send(message: JSONRPCMessage): Promise<void>;
    onMessage(handler: MessageHandler): void;
    close(): Promise<void>;
    onClose(callback: () => void): void;
    onError(callback: (error: Error) => void): void;
    getSessionId(): string | undefined;
    setSessionId(sessionId: string | undefined): void;
    /**
     * Handle JSON response from server
     */
    private handleJSONResponse;
    /**
     * Handle SSE response from server
     */
    private handleSSEResponse;
}
