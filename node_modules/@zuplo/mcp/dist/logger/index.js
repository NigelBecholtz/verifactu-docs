/**
 * Default logger implementation that outputs to console
 * Can be used as a fallback or for development
 */
export class ConsoleLogger {
    debug(message, ...args) {
        console.debug(message, ...args);
    }
    info(message, ...args) {
        console.info(message, ...args);
    }
    warn(message, ...args) {
        console.warn(message, ...args);
    }
    error(message, ...args) {
        console.error(message, ...args);
    }
}
/**
 * No-op logger that discards all log messages
 * Useful for production environments where logging is not desired
 */
export class NoOpLogger {
    debug() {
        // No-op
    }
    info() {
        // No-op
    }
    warn() {
        // No-op
    }
    error() {
        // No-op
    }
}
/**
 * Creates a default logger instance.
 * Uses ConsoleLogger in development, NoOpLogger in production.
 */
export function createDefaultLogger() {
    const isDevelopment = process.env.NODE_ENV === "development";
    return isDevelopment ? new ConsoleLogger() : new NoOpLogger();
}
//# sourceMappingURL=index.js.map