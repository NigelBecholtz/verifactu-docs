import type { z } from "zod/v4";
import { type ErrorCode } from "./consts.js";
import type { CursorSchema } from "./schemas/cursor.js";
import type { JSONRPCErrorSchema } from "./schemas/error.js";
import type { ErrorIdSchema, IdSchema } from "./schemas/id.js";
import type { JSONRPCMessageSchema } from "./schemas/message.js";
import type { JSONRPCNotificationSchema, NotificationSchema } from "./schemas/notifications.js";
import type { BaseRequestParamsSchema, JSONRPCRequestSchema, ProgressTokenSchema, RequestMetaSchema, RequestSchema } from "./schemas/request.js";
import type { JSONRPCResponseSchema, ResultSchema } from "./schemas/response.js";
export type ProgressToken = z.infer<typeof ProgressTokenSchema>;
export type Cursor = z.infer<typeof CursorSchema>;
export type Request = z.infer<typeof RequestSchema>;
export type BaseRequestParams = z.infer<typeof BaseRequestParamsSchema>;
export type RequestMeta = z.infer<typeof RequestMetaSchema>;
export type Notification = z.infer<typeof NotificationSchema>;
export type Result = z.infer<typeof ResultSchema>;
export type JSONRPCId = z.infer<typeof IdSchema>;
export type JSONRPCErrorId = z.infer<typeof ErrorIdSchema>;
export type JSONRPCRequest = z.infer<typeof JSONRPCRequestSchema>;
export type JSONRPCNotification = z.infer<typeof JSONRPCNotificationSchema>;
export type JSONRPCResponse = z.infer<typeof JSONRPCResponseSchema>;
export type JSONRPCError = z.infer<typeof JSONRPCErrorSchema>;
export type JSONRPCMessage = z.infer<typeof JSONRPCMessageSchema>;
export declare function newJSONRPCRequest({ id, method, params, }: {
    id: JSONRPCId;
    method: string;
    params?: BaseRequestParams;
}): JSONRPCRequest;
export declare function newJSONRPCReponse({ id, result, }: {
    id: JSONRPCId;
    result: Result;
}): JSONRPCResponse;
export declare function newJSONRPCError({ id, code, message, data, }: {
    id: JSONRPCErrorId;
    code: ErrorCode;
    message: string;
    data?: unknown;
}): JSONRPCError;
