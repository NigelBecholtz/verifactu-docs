import { u as o } from "./hook-BkLXq8pm.js";
import { OpenIDAuthenticationProvider as r } from "./zudoku.auth-openid.js";
class a extends r {
  constructor(e) {
    super({
      ...e,
      type: "openid",
      issuer: `https://${e.domain}/`,
      clientId: e.clientId,
      audience: e.audience,
      scopes: e.scopes
    });
  }
  onAuthorizationUrl = async (e, { isSignUp: t }) => {
    e.searchParams.set("prompt", "login"), t && e.searchParams.set("screen_hint", "signup");
  };
  signOut = async () => {
    const e = await this.getAuthServer(), t = await this.getAccessToken();
    o.setState({
      isAuthenticated: !1,
      isPending: !1,
      profile: null,
      providerData: null
    });
    const i = new URL(window.location.origin);
    if (i.pathname = this.redirectToAfterSignOut, e.end_session_endpoint) {
      const n = new URL(e.end_session_endpoint);
      t && n.searchParams.set("id_token_hint", t), n.searchParams.set(
        "post_logout_redirect_uri",
        i.toString()
      );
    } else
      new URL(
        `${this.issuer.replace(/\/$/, "")}/oidc/logout`
      );
  };
}
const d = (s) => new a(s);
export {
  d as default
};
//# sourceMappingURL=zudoku.auth-auth0.js.map
