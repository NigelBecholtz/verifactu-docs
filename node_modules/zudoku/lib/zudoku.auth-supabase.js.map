{"version":3,"file":"zudoku.auth-supabase.js","sources":["../src/lib/authentication/providers/supabase.tsx"],"sourcesContent":["import {\n  createClient,\n  type Provider,\n  type Session,\n  type SupabaseClient,\n} from \"@supabase/supabase-js\";\nimport type { SupabaseAuthenticationConfig } from \"../../../config/config.js\";\nimport { CoreAuthenticationPlugin } from \"../AuthenticationPlugin.js\";\nimport type {\n  AuthenticationPlugin,\n  AuthenticationProviderInitializer,\n} from \"../authentication.js\";\nimport { AuthorizationError } from \"../errors.js\";\nimport { type UserProfile, useAuthState } from \"../state.js\";\n\nclass SupabaseAuthenticationProvider\n  extends CoreAuthenticationPlugin\n  implements AuthenticationPlugin\n{\n  private readonly client: SupabaseClient;\n  private readonly provider: Provider;\n  private readonly redirectToAfterSignUp: string;\n  private readonly redirectToAfterSignIn: string;\n  // biome-ignore lint/correctness/noUnusedPrivateClassMembers: Keep around\n  private readonly redirectToAfterSignOut: string;\n\n  constructor({\n    supabaseUrl,\n    supabaseKey,\n    provider,\n    redirectToAfterSignUp,\n    redirectToAfterSignIn,\n    redirectToAfterSignOut,\n    basePath,\n  }: SupabaseAuthenticationConfig) {\n    super();\n    this.provider = provider;\n    this.client = createClient(supabaseUrl, supabaseKey, {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n      },\n    });\n\n    const root = basePath ?? \"/\";\n\n    this.redirectToAfterSignUp = redirectToAfterSignUp ?? root;\n    this.redirectToAfterSignIn = redirectToAfterSignIn ?? root;\n    this.redirectToAfterSignOut = redirectToAfterSignOut ?? root;\n\n    this.client.auth.onAuthStateChange(async (event, session) => {\n      if (session && (event === \"SIGNED_IN\" || event === \"TOKEN_REFRESHED\")) {\n        await this.updateUserState(session);\n      } else if (event === \"SIGNED_OUT\") {\n        useAuthState.getState().setLoggedOut();\n      }\n    });\n  }\n\n  private async updateUserState(session: Session) {\n    const { user } = session;\n\n    const profile: UserProfile = {\n      sub: user.id,\n      email: user.email,\n      name: user.user_metadata.full_name || user.user_metadata.name,\n      emailVerified: user.email_confirmed_at != null,\n      pictureUrl: user.user_metadata.avatar_url,\n    };\n\n    useAuthState.getState().setLoggedIn({\n      profile,\n      providerData: { session },\n    });\n  }\n\n  async getAccessToken(): Promise<string> {\n    const { data, error } = await this.client.auth.getSession();\n\n    if (error || !data.session) {\n      throw new AuthorizationError(\"User is not authenticated\");\n    }\n\n    return data.session.access_token;\n  }\n\n  async signRequest(request: Request): Promise<Request> {\n    const accessToken = await this.getAccessToken();\n    request.headers.set(\"Authorization\", `Bearer ${accessToken}`);\n    return request;\n  }\n\n  signUp = async ({ redirectTo }: { redirectTo?: string }) => {\n    const finalRedirectTo = redirectTo ?? this.redirectToAfterSignUp;\n\n    // Open Supabase Auth UI in a new window\n    await this.client.auth.signInWithOAuth({\n      provider: this.provider,\n      options: {\n        redirectTo: window.location.origin + finalRedirectTo,\n      },\n    });\n  };\n\n  signIn = async ({ redirectTo }: { redirectTo?: string }) => {\n    const finalRedirectTo = redirectTo ?? this.redirectToAfterSignIn;\n\n    await this.client.auth.signInWithOAuth({\n      provider: this.provider,\n      options: {\n        redirectTo: window.location.origin + finalRedirectTo,\n        queryParams: {\n          access_type: \"offline\",\n          prompt: \"consent\",\n        },\n      },\n    });\n  };\n\n  signOut = async () => {\n    await new Promise<void>((resolve) => {\n      const { data } = this.client.auth.onAuthStateChange(async (event) => {\n        if (event !== \"SIGNED_OUT\") return;\n        data.subscription.unsubscribe();\n        resolve();\n      });\n      void this.client.auth.signOut();\n    });\n\n    useAuthState.setState({\n      isAuthenticated: false,\n      isPending: false,\n      profile: undefined,\n      providerData: undefined,\n    });\n  };\n\n  onPageLoad = async () => {\n    const { data, error } = await this.client.auth.getSession();\n\n    if (!error && data.session) {\n      await this.updateUserState(data.session);\n    }\n  };\n}\n\nconst supabaseAuth: AuthenticationProviderInitializer<\n  SupabaseAuthenticationConfig\n> = (options) => new SupabaseAuthenticationProvider(options);\n\nexport default supabaseAuth;\n"],"names":["SupabaseAuthenticationProvider","CoreAuthenticationPlugin","supabaseUrl","supabaseKey","provider","redirectToAfterSignUp","redirectToAfterSignIn","redirectToAfterSignOut","basePath","createClient","root","event","session","useAuthState","user","profile","data","error","AuthorizationError","request","accessToken","redirectTo","finalRedirectTo","resolve","supabaseAuth","options"],"mappings":"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"}