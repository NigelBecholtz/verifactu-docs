{"version":3,"file":"zudoku.auth-auth0.js","sources":["../src/lib/authentication/providers/auth0.tsx"],"sourcesContent":["import type { Auth0AuthenticationConfig } from \"../../../config/config.js\";\nimport type {\n  AuthenticationPlugin,\n  AuthenticationProviderInitializer,\n} from \"../authentication.js\";\nimport { useAuthState } from \"../state.js\";\nimport { OpenIDAuthenticationProvider } from \"./openid.js\";\n\nclass Auth0AuthenticationProvider\n  extends OpenIDAuthenticationProvider\n  implements AuthenticationPlugin\n{\n  constructor(config: Auth0AuthenticationConfig) {\n    super({\n      ...config,\n      type: \"openid\",\n      issuer: `https://${config.domain}/`,\n      clientId: config.clientId,\n      audience: config.audience,\n      scopes: config.scopes,\n    });\n  }\n\n  onAuthorizationUrl = async (\n    url: URL,\n    { isSignUp }: { isSignUp: boolean },\n  ) => {\n    url.searchParams.set(\"prompt\", \"login\");\n    if (isSignUp) {\n      url.searchParams.set(\"screen_hint\", \"signup\");\n    }\n  };\n\n  signOut = async (): Promise<void> => {\n    const as = await this.getAuthServer();\n    const idToken = await this.getAccessToken();\n\n    useAuthState.setState({\n      isAuthenticated: false,\n      isPending: false,\n      profile: null,\n      providerData: null,\n    });\n\n    const redirectUrl = new URL(window.location.origin);\n    redirectUrl.pathname = this.redirectToAfterSignOut;\n\n    // SEE: https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0\n    // For Auth0 tenants created on or after 14 November 2023, RP-Initiated\n    // Logout End Session Endpoint Discovery is enabled by default.\n    // Otherwise we fallback to the old non-compliant logout\n\n    // The endSessionEndpoint is set, the IdP supports some form of logout,\n    // so we use the IdP logout. Otherwise, just redirect the user to home\n    if (as.end_session_endpoint) {\n      const logoutUrl = new URL(as.end_session_endpoint);\n      if (idToken) {\n        logoutUrl.searchParams.set(\"id_token_hint\", idToken);\n      }\n      logoutUrl.searchParams.set(\n        \"post_logout_redirect_uri\",\n        redirectUrl.toString(),\n      );\n\n      // window.location.href = logoutUrl.toString();\n    } else {\n      const _logoutUrl = new URL(\n        `${this.issuer.replace(/\\/$/, \"\")}/oidc/logout`,\n      );\n      // window.location.href = logoutUrl.toString();\n    }\n  };\n}\n\nconst auth0Auth: AuthenticationProviderInitializer<\n  Auth0AuthenticationConfig\n> = (options) => new Auth0AuthenticationProvider(options);\n\nexport default auth0Auth;\n"],"names":["Auth0AuthenticationProvider","OpenIDAuthenticationProvider","config","url","isSignUp","as","idToken","useAuthState","redirectUrl","logoutUrl","auth0Auth","options"],"mappings":";;AAQA,MAAMA,UACIC,EAEV;AAAA,EACE,YAAYC,GAAmC;AAC7C,UAAM;AAAA,MACJ,GAAGA;AAAA,MACH,MAAM;AAAA,MACN,QAAQ,WAAWA,EAAO,MAAM;AAAA,MAChC,UAAUA,EAAO;AAAA,MACjB,UAAUA,EAAO;AAAA,MACjB,QAAQA,EAAO;AAAA,IAAA,CAChB;AAAA,EACH;AAAA,EAEA,qBAAqB,OACnBC,GACA,EAAE,UAAAC,QACC;AACH,IAAAD,EAAI,aAAa,IAAI,UAAU,OAAO,GAClCC,KACFD,EAAI,aAAa,IAAI,eAAe,QAAQ;AAAA,EAEhD;AAAA,EAEA,UAAU,YAA2B;AACnC,UAAME,IAAK,MAAM,KAAK,cAAA,GAChBC,IAAU,MAAM,KAAK,eAAA;AAE3B,IAAAC,EAAa,SAAS;AAAA,MACpB,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,SAAS;AAAA,MACT,cAAc;AAAA,IAAA,CACf;AAED,UAAMC,IAAc,IAAI,IAAI,OAAO,SAAS,MAAM;AAUlD,QATAA,EAAY,WAAW,KAAK,wBASxBH,EAAG,sBAAsB;AAC3B,YAAMI,IAAY,IAAI,IAAIJ,EAAG,oBAAoB;AACjD,MAAIC,KACFG,EAAU,aAAa,IAAI,iBAAiBH,CAAO,GAErDG,EAAU,aAAa;AAAA,QACrB;AAAA,QACAD,EAAY,SAAA;AAAA,MAAS;AAAA,IAIzB;AACqB,UAAI;AAAA,QACrB,GAAG,KAAK,OAAO,QAAQ,OAAO,EAAE,CAAC;AAAA,MAAA;AAAA,EAIvC;AACF;AAEA,MAAME,IAEF,CAACC,MAAY,IAAIX,EAA4BW,CAAO;"}