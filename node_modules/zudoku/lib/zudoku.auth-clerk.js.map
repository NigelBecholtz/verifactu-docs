{"version":3,"file":"zudoku.auth-clerk.js","sources":["../src/lib/authentication/providers/clerk.tsx"],"sourcesContent":["import type { Clerk } from \"@clerk/clerk-js\";\nimport { LogOutIcon } from \"lucide-react\";\nimport type { ZudokuPlugin } from \"zudoku/plugins\";\nimport type { ClerkAuthenticationConfig } from \"../../../config/config.js\";\nimport type {\n  AuthenticationPlugin,\n  AuthenticationProviderInitializer,\n} from \"../authentication.js\";\nimport { SignIn } from \"../components/SignIn.js\";\nimport { SignOut } from \"../components/SignOut.js\";\nimport { SignUp } from \"../components/SignUp.js\";\nimport { useAuthState } from \"../state.js\";\n\nconst clerkAuth: AuthenticationProviderInitializer<\n  ClerkAuthenticationConfig\n> = ({\n  clerkPubKey,\n  jwtTemplateName,\n  redirectToAfterSignOut = \"/\",\n  redirectToAfterSignUp,\n  redirectToAfterSignIn,\n}): AuthenticationPlugin & ZudokuPlugin => {\n  let clerkApi: Clerk | undefined;\n  const ensureLoaded = (async () => {\n    if (typeof window === \"undefined\") return;\n    const { Clerk } = await import(\"@clerk/clerk-js\");\n    clerkApi = new Clerk(clerkPubKey);\n\n    await clerkApi.load();\n\n    if (clerkApi.user) {\n      const verifiedEmail = clerkApi.user.emailAddresses.find(\n        (email) => email.verification.status === \"verified\",\n      );\n      useAuthState.getState().setLoggedIn({\n        profile: {\n          sub: clerkApi.user.id,\n          name: clerkApi.user.fullName ?? undefined,\n          email:\n            verifiedEmail?.emailAddress ??\n            clerkApi.user.emailAddresses[0]?.emailAddress,\n          emailVerified: verifiedEmail !== undefined,\n          pictureUrl: clerkApi.user.imageUrl,\n        },\n        providerData: {\n          user: {\n            publicMetadata: clerkApi.user.publicMetadata,\n            id: clerkApi.user.id,\n            emailAddresses: clerkApi.user.emailAddresses,\n            imageUrl: clerkApi.user.imageUrl,\n            fullName: clerkApi.user.fullName,\n          },\n        },\n      });\n    }\n\n    return clerkApi;\n  })();\n\n  async function getAccessToken() {\n    await ensureLoaded;\n    if (!clerkApi?.session) {\n      throw new Error(\"No session available\");\n    }\n    const response = await clerkApi.session.getToken({\n      template: jwtTemplateName,\n    });\n    if (!response) {\n      throw new Error(\"Could not get access token from Clerk\");\n    }\n    return response;\n  }\n\n  async function signRequest(request: Request): Promise<Request> {\n    const response = await getAccessToken();\n    request.headers.set(\"Authorization\", `Bearer ${response}`);\n    return request;\n  }\n\n  return {\n    getRoutes: () => {\n      return [\n        {\n          path: \"/signout\",\n          element: <SignOut />,\n        },\n        {\n          path: \"/signin\",\n          element: <SignIn />,\n        },\n        {\n          path: \"/signup\",\n          element: <SignUp />,\n        },\n      ];\n    },\n\n    getProfileMenuItems() {\n      return [\n        {\n          label: \"Logout\",\n          path: \"/signout\",\n          category: \"bottom\",\n          icon: LogOutIcon,\n        } as const,\n      ];\n    },\n    initialize: async () => {\n      const clerk = await ensureLoaded;\n\n      if (!clerk) {\n        return;\n      }\n\n      if (clerk.session) {\n        const verifiedEmail = clerk.session.user.emailAddresses.find(\n          (email) => email.verification.status === \"verified\",\n        );\n        useAuthState.getState().setLoggedIn({\n          profile: {\n            sub: clerk.session.user.id,\n            name: clerk.session.user.fullName ?? undefined,\n            email:\n              verifiedEmail?.emailAddress ??\n              clerk.session.user.emailAddresses[0]?.emailAddress,\n            emailVerified: verifiedEmail !== undefined,\n            pictureUrl: clerk.session.user.imageUrl,\n          },\n          providerData: {\n            user: clerk.session.user,\n          },\n        });\n      } else {\n        useAuthState.setState({\n          isAuthenticated: false,\n          isPending: false,\n          profile: undefined,\n        });\n      }\n    },\n    getAccessToken,\n    signRequest,\n    signOut: async () => {\n      await ensureLoaded;\n      await clerkApi?.signOut({\n        redirectUrl: window.location.origin + redirectToAfterSignOut,\n      });\n      useAuthState.getState().setLoggedOut();\n    },\n    signIn: async ({ redirectTo }: { redirectTo?: string } = {}) => {\n      await ensureLoaded;\n      await clerkApi?.redirectToSignIn({\n        signInForceRedirectUrl: redirectToAfterSignIn\n          ? window.location.origin + redirectToAfterSignIn\n          : redirectTo,\n        signUpForceRedirectUrl: redirectToAfterSignUp\n          ? window.location.origin + redirectToAfterSignUp\n          : redirectTo,\n      });\n    },\n    signUp: async ({ redirectTo }: { redirectTo?: string } = {}) => {\n      await ensureLoaded;\n      await clerkApi?.redirectToSignUp({\n        signInForceRedirectUrl: redirectToAfterSignIn\n          ? window.location.origin + redirectToAfterSignIn\n          : redirectTo,\n        signUpForceRedirectUrl: redirectToAfterSignUp\n          ? window.location.origin + redirectToAfterSignUp\n          : redirectTo,\n      });\n    },\n  };\n};\n\nexport default clerkAuth;\n"],"names":["clerkAuth","clerkPubKey","jwtTemplateName","redirectToAfterSignOut","redirectToAfterSignUp","redirectToAfterSignIn","clerkApi","ensureLoaded","Clerk","verifiedEmail","email","useAuthState","getAccessToken","response","signRequest","request","SignOut","SignIn","SignUp","LogOutIcon","clerk","redirectTo"],"mappings":"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"}