import { i as Io, S as Oo, L as _o, T as O, s as Ge, j as he, k as No, l as Ro, m as v, n as R, o as je, p as Ki, q as Xe, r as Fe, t as Ao } from "./index-BRQDtecD.js";
import { K as p, i as Ce, a as j, b as ne, c as re, d as H, G as Pe, p as J, e as L, f as ko, t as Wi, g as Fo, h as Co, j as ue, k as Me, l as vt, m as pe, n as te, o as Qt, q as zi, r as Tt, s as we, u as Oe, v as zt, w as xo, x as fn, y as Ji, z as Ue, A as Yi, B as Br, D as tt, E as xn, F as wt, H as Ht, I as Do, J as Lo, L as Xi, M as $o, N as Po, O as ct, P as Dt, Q as dn, R as jo, C as Mo, S as Uo, T as Vo, U as qo } from "./circular-06Yrxzsw.js";
import { a as Bo } from "./index-DhL3LhWV.js";
import { traverse as Le } from "./processors/traverse.js";
import { g as Go } from "./invariant-Bm-FVUQE.js";
function Qo(t, e) {
  for (var n = 0; n < e.length; n++) {
    const r = e[n];
    if (typeof r != "string" && !Array.isArray(r)) {
      for (const i in r)
        if (i !== "default" && !(i in t)) {
          const s = Object.getOwnPropertyDescriptor(r, i);
          s && Object.defineProperty(t, i, s.get ? s : {
            enumerable: !0,
            get: () => r[i]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }));
}
const Zi = Object.freeze({
  major: 16,
  minor: 11,
  patch: 0,
  preReleaseTag: null
});
function Ho(t) {
  return typeof t?.then == "function";
}
var k;
(function(t) {
  t.QUERY = "QUERY", t.MUTATION = "MUTATION", t.SUBSCRIPTION = "SUBSCRIPTION", t.FIELD = "FIELD", t.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION", t.FRAGMENT_SPREAD = "FRAGMENT_SPREAD", t.INLINE_FRAGMENT = "INLINE_FRAGMENT", t.VARIABLE_DEFINITION = "VARIABLE_DEFINITION", t.SCHEMA = "SCHEMA", t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.FIELD_DEFINITION = "FIELD_DEFINITION", t.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.ENUM_VALUE = "ENUM_VALUE", t.INPUT_OBJECT = "INPUT_OBJECT", t.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION";
})(k || (k = {}));
function Ko(t, e) {
  const n = new Wo(t, e), r = n.parseDocument();
  return Object.defineProperty(r, "tokenCount", {
    enumerable: !1,
    value: n.tokenCount
  }), r;
}
class Wo {
  constructor(e, n = {}) {
    const r = Io(e) ? e : new Oo(e);
    this._lexer = new _o(r), this._options = n, this._tokenCounter = 0;
  }
  get tokenCount() {
    return this._tokenCounter;
  }
  /**
   * Converts a name lex token into a name parse node.
   */
  parseName() {
    const e = this.expectToken(O.NAME);
    return this.node(e, {
      kind: p.NAME,
      value: e.value
    });
  }
  // Implements the parsing rules in the Document section.
  /**
   * Document : Definition+
   */
  parseDocument() {
    return this.node(this._lexer.token, {
      kind: p.DOCUMENT,
      definitions: this.many(
        O.SOF,
        this.parseDefinition,
        O.EOF
      )
    });
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   *
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  parseDefinition() {
    if (this.peek(O.BRACE_L))
      return this.parseOperationDefinition();
    const e = this.peekDescription(), n = e ? this._lexer.lookahead() : this._lexer.token;
    if (n.kind === O.NAME) {
      switch (n.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
      if (e)
        throw Ge(
          this._lexer.source,
          this._lexer.token.start,
          "Unexpected description, descriptions are supported only on type definitions."
        );
      switch (n.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    }
    throw this.unexpected(n);
  }
  // Implements the parsing rules in the Operations section.
  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  parseOperationDefinition() {
    const e = this._lexer.token;
    if (this.peek(O.BRACE_L))
      return this.node(e, {
        kind: p.OPERATION_DEFINITION,
        operation: he.QUERY,
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet()
      });
    const n = this.parseOperationType();
    let r;
    return this.peek(O.NAME) && (r = this.parseName()), this.node(e, {
      kind: p.OPERATION_DEFINITION,
      operation: n,
      name: r,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * OperationType : one of query mutation subscription
   */
  parseOperationType() {
    const e = this.expectToken(O.NAME);
    switch (e.value) {
      case "query":
        return he.QUERY;
      case "mutation":
        return he.MUTATION;
      case "subscription":
        return he.SUBSCRIPTION;
    }
    throw this.unexpected(e);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  parseVariableDefinitions() {
    return this.optionalMany(
      O.PAREN_L,
      this.parseVariableDefinition,
      O.PAREN_R
    );
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: p.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(O.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(O.EQUALS) ? this.parseConstValueLiteral() : void 0,
      directives: this.parseConstDirectives()
    });
  }
  /**
   * Variable : $ Name
   */
  parseVariable() {
    const e = this._lexer.token;
    return this.expectToken(O.DOLLAR), this.node(e, {
      kind: p.VARIABLE,
      name: this.parseName()
    });
  }
  /**
   * ```
   * SelectionSet : { Selection+ }
   * ```
   */
  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: p.SELECTION_SET,
      selections: this.many(
        O.BRACE_L,
        this.parseSelection,
        O.BRACE_R
      )
    });
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  parseSelection() {
    return this.peek(O.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  parseField() {
    const e = this._lexer.token, n = this.parseName();
    let r, i;
    return this.expectOptionalToken(O.COLON) ? (r = n, i = this.parseName()) : i = n, this.node(e, {
      kind: p.FIELD,
      alias: r,
      name: i,
      arguments: this.parseArguments(!1),
      directives: this.parseDirectives(!1),
      selectionSet: this.peek(O.BRACE_L) ? this.parseSelectionSet() : void 0
    });
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  parseArguments(e) {
    const n = e ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(O.PAREN_L, n, O.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  parseArgument(e = !1) {
    const n = this._lexer.token, r = this.parseName();
    return this.expectToken(O.COLON), this.node(n, {
      kind: p.ARGUMENT,
      name: r,
      value: this.parseValueLiteral(e)
    });
  }
  parseConstArgument() {
    return this.parseArgument(!0);
  }
  // Implements the parsing rules in the Fragments section.
  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  parseFragment() {
    const e = this._lexer.token;
    this.expectToken(O.SPREAD);
    const n = this.expectOptionalKeyword("on");
    return !n && this.peek(O.NAME) ? this.node(e, {
      kind: p.FRAGMENT_SPREAD,
      name: this.parseFragmentName(),
      directives: this.parseDirectives(!1)
    }) : this.node(e, {
      kind: p.INLINE_FRAGMENT,
      typeCondition: n ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  parseFragmentDefinition() {
    const e = this._lexer.token;
    return this.expectKeyword("fragment"), this._options.allowLegacyFragmentVariables === !0 ? this.node(e, {
      kind: p.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      variableDefinitions: this.parseVariableDefinitions(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    }) : this.node(e, {
      kind: p.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentName : Name but not `on`
   */
  parseFragmentName() {
    if (this._lexer.token.value === "on")
      throw this.unexpected();
    return this.parseName();
  }
  // Implements the parsing rules in the Values section.
  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseValueLiteral(e) {
    const n = this._lexer.token;
    switch (n.kind) {
      case O.BRACKET_L:
        return this.parseList(e);
      case O.BRACE_L:
        return this.parseObject(e);
      case O.INT:
        return this.advanceLexer(), this.node(n, {
          kind: p.INT,
          value: n.value
        });
      case O.FLOAT:
        return this.advanceLexer(), this.node(n, {
          kind: p.FLOAT,
          value: n.value
        });
      case O.STRING:
      case O.BLOCK_STRING:
        return this.parseStringLiteral();
      case O.NAME:
        switch (this.advanceLexer(), n.value) {
          case "true":
            return this.node(n, {
              kind: p.BOOLEAN,
              value: !0
            });
          case "false":
            return this.node(n, {
              kind: p.BOOLEAN,
              value: !1
            });
          case "null":
            return this.node(n, {
              kind: p.NULL
            });
          default:
            return this.node(n, {
              kind: p.ENUM,
              value: n.value
            });
        }
      case O.DOLLAR:
        if (e)
          if (this.expectToken(O.DOLLAR), this._lexer.token.kind === O.NAME) {
            const r = this._lexer.token.value;
            throw Ge(
              this._lexer.source,
              n.start,
              `Unexpected variable "$${r}" in constant value.`
            );
          } else
            throw this.unexpected(n);
        return this.parseVariable();
      default:
        throw this.unexpected();
    }
  }
  parseConstValueLiteral() {
    return this.parseValueLiteral(!0);
  }
  parseStringLiteral() {
    const e = this._lexer.token;
    return this.advanceLexer(), this.node(e, {
      kind: p.STRING,
      value: e.value,
      block: e.kind === O.BLOCK_STRING
    });
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  parseList(e) {
    const n = () => this.parseValueLiteral(e);
    return this.node(this._lexer.token, {
      kind: p.LIST,
      values: this.any(O.BRACKET_L, n, O.BRACKET_R)
    });
  }
  /**
   * ```
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   * ```
   */
  parseObject(e) {
    const n = () => this.parseObjectField(e);
    return this.node(this._lexer.token, {
      kind: p.OBJECT,
      fields: this.any(O.BRACE_L, n, O.BRACE_R)
    });
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  parseObjectField(e) {
    const n = this._lexer.token, r = this.parseName();
    return this.expectToken(O.COLON), this.node(n, {
      kind: p.OBJECT_FIELD,
      name: r,
      value: this.parseValueLiteral(e)
    });
  }
  // Implements the parsing rules in the Directives section.
  /**
   * Directives[Const] : Directive[?Const]+
   */
  parseDirectives(e) {
    const n = [];
    for (; this.peek(O.AT); )
      n.push(this.parseDirective(e));
    return n;
  }
  parseConstDirectives() {
    return this.parseDirectives(!0);
  }
  /**
   * ```
   * Directive[Const] : @ Name Arguments[?Const]?
   * ```
   */
  parseDirective(e) {
    const n = this._lexer.token;
    return this.expectToken(O.AT), this.node(n, {
      kind: p.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(e)
    });
  }
  // Implements the parsing rules in the Types section.
  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  parseTypeReference() {
    const e = this._lexer.token;
    let n;
    if (this.expectOptionalToken(O.BRACKET_L)) {
      const r = this.parseTypeReference();
      this.expectToken(O.BRACKET_R), n = this.node(e, {
        kind: p.LIST_TYPE,
        type: r
      });
    } else
      n = this.parseNamedType();
    return this.expectOptionalToken(O.BANG) ? this.node(e, {
      kind: p.NON_NULL_TYPE,
      type: n
    }) : n;
  }
  /**
   * NamedType : Name
   */
  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: p.NAMED_TYPE,
      name: this.parseName()
    });
  }
  // Implements the parsing rules in the Type Definition section.
  peekDescription() {
    return this.peek(O.STRING) || this.peek(O.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  parseDescription() {
    if (this.peekDescription())
      return this.parseStringLiteral();
  }
  /**
   * ```
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   * ```
   */
  parseSchemaDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("schema");
    const r = this.parseConstDirectives(), i = this.many(
      O.BRACE_L,
      this.parseOperationTypeDefinition,
      O.BRACE_R
    );
    return this.node(e, {
      kind: p.SCHEMA_DEFINITION,
      description: n,
      directives: r,
      operationTypes: i
    });
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  parseOperationTypeDefinition() {
    const e = this._lexer.token, n = this.parseOperationType();
    this.expectToken(O.COLON);
    const r = this.parseNamedType();
    return this.node(e, {
      kind: p.OPERATION_TYPE_DEFINITION,
      operation: n,
      type: r
    });
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  parseScalarTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("scalar");
    const r = this.parseName(), i = this.parseConstDirectives();
    return this.node(e, {
      kind: p.SCALAR_TYPE_DEFINITION,
      description: n,
      name: r,
      directives: i
    });
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  parseObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("type");
    const r = this.parseName(), i = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: p.OBJECT_TYPE_DEFINITION,
      description: n,
      name: r,
      interfaces: i,
      directives: s,
      fields: o
    });
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  parseImplementsInterfaces() {
    return this.expectOptionalKeyword("implements") ? this.delimitedMany(O.AMP, this.parseNamedType) : [];
  }
  /**
   * ```
   * FieldsDefinition : { FieldDefinition+ }
   * ```
   */
  parseFieldsDefinition() {
    return this.optionalMany(
      O.BRACE_L,
      this.parseFieldDefinition,
      O.BRACE_R
    );
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  parseFieldDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), r = this.parseName(), i = this.parseArgumentDefs();
    this.expectToken(O.COLON);
    const s = this.parseTypeReference(), o = this.parseConstDirectives();
    return this.node(e, {
      kind: p.FIELD_DEFINITION,
      description: n,
      name: r,
      arguments: i,
      type: s,
      directives: o
    });
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  parseArgumentDefs() {
    return this.optionalMany(
      O.PAREN_L,
      this.parseInputValueDef,
      O.PAREN_R
    );
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  parseInputValueDef() {
    const e = this._lexer.token, n = this.parseDescription(), r = this.parseName();
    this.expectToken(O.COLON);
    const i = this.parseTypeReference();
    let s;
    this.expectOptionalToken(O.EQUALS) && (s = this.parseConstValueLiteral());
    const o = this.parseConstDirectives();
    return this.node(e, {
      kind: p.INPUT_VALUE_DEFINITION,
      description: n,
      name: r,
      type: i,
      defaultValue: s,
      directives: o
    });
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  parseInterfaceTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("interface");
    const r = this.parseName(), i = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: p.INTERFACE_TYPE_DEFINITION,
      description: n,
      name: r,
      interfaces: i,
      directives: s,
      fields: o
    });
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  parseUnionTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("union");
    const r = this.parseName(), i = this.parseConstDirectives(), s = this.parseUnionMemberTypes();
    return this.node(e, {
      kind: p.UNION_TYPE_DEFINITION,
      description: n,
      name: r,
      directives: i,
      types: s
    });
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  parseUnionMemberTypes() {
    return this.expectOptionalToken(O.EQUALS) ? this.delimitedMany(O.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  parseEnumTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("enum");
    const r = this.parseName(), i = this.parseConstDirectives(), s = this.parseEnumValuesDefinition();
    return this.node(e, {
      kind: p.ENUM_TYPE_DEFINITION,
      description: n,
      name: r,
      directives: i,
      values: s
    });
  }
  /**
   * ```
   * EnumValuesDefinition : { EnumValueDefinition+ }
   * ```
   */
  parseEnumValuesDefinition() {
    return this.optionalMany(
      O.BRACE_L,
      this.parseEnumValueDefinition,
      O.BRACE_R
    );
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   */
  parseEnumValueDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), r = this.parseEnumValueName(), i = this.parseConstDirectives();
    return this.node(e, {
      kind: p.ENUM_VALUE_DEFINITION,
      description: n,
      name: r,
      directives: i
    });
  }
  /**
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseEnumValueName() {
    if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null")
      throw Ge(
        this._lexer.source,
        this._lexer.token.start,
        `${tn(
          this._lexer.token
        )} is reserved and cannot be used for an enum value.`
      );
    return this.parseName();
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  parseInputObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("input");
    const r = this.parseName(), i = this.parseConstDirectives(), s = this.parseInputFieldsDefinition();
    return this.node(e, {
      kind: p.INPUT_OBJECT_TYPE_DEFINITION,
      description: n,
      name: r,
      directives: i,
      fields: s
    });
  }
  /**
   * ```
   * InputFieldsDefinition : { InputValueDefinition+ }
   * ```
   */
  parseInputFieldsDefinition() {
    return this.optionalMany(
      O.BRACE_L,
      this.parseInputValueDef,
      O.BRACE_R
    );
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  parseTypeSystemExtension() {
    const e = this._lexer.lookahead();
    if (e.kind === O.NAME)
      switch (e.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    throw this.unexpected(e);
  }
  /**
   * ```
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   * ```
   */
  parseSchemaExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("schema");
    const n = this.parseConstDirectives(), r = this.optionalMany(
      O.BRACE_L,
      this.parseOperationTypeDefinition,
      O.BRACE_R
    );
    if (n.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.SCHEMA_EXTENSION,
      directives: n,
      operationTypes: r
    });
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  parseScalarTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("scalar");
    const n = this.parseName(), r = this.parseConstDirectives();
    if (r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.SCALAR_TYPE_EXTENSION,
      name: n,
      directives: r
    });
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  parseObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("type");
    const n = this.parseName(), r = this.parseImplementsInterfaces(), i = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (r.length === 0 && i.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.OBJECT_TYPE_EXTENSION,
      name: n,
      interfaces: r,
      directives: i,
      fields: s
    });
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  parseInterfaceTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("interface");
    const n = this.parseName(), r = this.parseImplementsInterfaces(), i = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (r.length === 0 && i.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.INTERFACE_TYPE_EXTENSION,
      name: n,
      interfaces: r,
      directives: i,
      fields: s
    });
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  parseUnionTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("union");
    const n = this.parseName(), r = this.parseConstDirectives(), i = this.parseUnionMemberTypes();
    if (r.length === 0 && i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.UNION_TYPE_EXTENSION,
      name: n,
      directives: r,
      types: i
    });
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  parseEnumTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("enum");
    const n = this.parseName(), r = this.parseConstDirectives(), i = this.parseEnumValuesDefinition();
    if (r.length === 0 && i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.ENUM_TYPE_EXTENSION,
      name: n,
      directives: r,
      values: i
    });
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  parseInputObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("input");
    const n = this.parseName(), r = this.parseConstDirectives(), i = this.parseInputFieldsDefinition();
    if (r.length === 0 && i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: p.INPUT_OBJECT_TYPE_EXTENSION,
      name: n,
      directives: r,
      fields: i
    });
  }
  /**
   * ```
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   * ```
   */
  parseDirectiveDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("directive"), this.expectToken(O.AT);
    const r = this.parseName(), i = this.parseArgumentDefs(), s = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    const o = this.parseDirectiveLocations();
    return this.node(e, {
      kind: p.DIRECTIVE_DEFINITION,
      description: n,
      name: r,
      arguments: i,
      repeatable: s,
      locations: o
    });
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  parseDirectiveLocations() {
    return this.delimitedMany(O.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  parseDirectiveLocation() {
    const e = this._lexer.token, n = this.parseName();
    if (Object.prototype.hasOwnProperty.call(k, n.value))
      return n;
    throw this.unexpected(e);
  }
  // Core parsing utility functions
  /**
   * Returns a node that, if configured to do so, sets a "loc" field as a
   * location object, used to identify the place in the source that created a
   * given parsed object.
   */
  node(e, n) {
    return this._options.noLocation !== !0 && (n.loc = new No(
      e,
      this._lexer.lastToken,
      this._lexer.source
    )), n;
  }
  /**
   * Determines if the next token is of a given kind
   */
  peek(e) {
    return this._lexer.token.kind === e;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectToken(e) {
    const n = this._lexer.token;
    if (n.kind === e)
      return this.advanceLexer(), n;
    throw Ge(
      this._lexer.source,
      n.start,
      `Expected ${es(e)}, found ${tn(n)}.`
    );
  }
  /**
   * If the next token is of the given kind, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalToken(e) {
    return this._lexer.token.kind === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectKeyword(e) {
    const n = this._lexer.token;
    if (n.kind === O.NAME && n.value === e)
      this.advanceLexer();
    else
      throw Ge(
        this._lexer.source,
        n.start,
        `Expected "${e}", found ${tn(n)}.`
      );
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalKeyword(e) {
    const n = this._lexer.token;
    return n.kind === O.NAME && n.value === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  unexpected(e) {
    const n = e ?? this._lexer.token;
    return Ge(
      this._lexer.source,
      n.start,
      `Unexpected ${tn(n)}.`
    );
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  any(e, n, r) {
    this.expectToken(e);
    const i = [];
    for (; !this.expectOptionalToken(r); )
      i.push(n.call(this));
    return i;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  optionalMany(e, n, r) {
    if (this.expectOptionalToken(e)) {
      const i = [];
      do
        i.push(n.call(this));
      while (!this.expectOptionalToken(r));
      return i;
    }
    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  many(e, n, r) {
    this.expectToken(e);
    const i = [];
    do
      i.push(n.call(this));
    while (!this.expectOptionalToken(r));
    return i;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  delimitedMany(e, n) {
    this.expectOptionalToken(e);
    const r = [];
    do
      r.push(n.call(this));
    while (this.expectOptionalToken(e));
    return r;
  }
  advanceLexer() {
    const { maxTokens: e } = this._options, n = this._lexer.advance();
    if (n.kind !== O.EOF && (++this._tokenCounter, e !== void 0 && this._tokenCounter > e))
      throw Ge(
        this._lexer.source,
        n.start,
        `Document contains more that ${e} tokens. Parsing aborted.`
      );
  }
}
function tn(t) {
  const e = t.value;
  return es(t.kind) + (e != null ? ` "${e}"` : "");
}
function es(t) {
  return Ro(t) ? `"${t}"` : t;
}
function ur(t, e) {
  return t === e ? !0 : j(t) && j(e) || ne(t) && ne(e) ? ur(t.ofType, e.ofType) : !1;
}
function yt(t, e, n) {
  return e === n ? !0 : j(n) ? j(e) ? yt(t, e.ofType, n.ofType) : !1 : j(e) ? yt(t, e.ofType, n) : ne(n) ? ne(e) ? yt(t, e.ofType, n.ofType) : !1 : ne(e) ? !1 : Ce(n) && (re(e) || H(e)) && t.isSubType(n, e);
}
function Gr(t, e, n) {
  return e === n ? !0 : Ce(e) ? Ce(n) ? t.getPossibleTypes(e).some((r) => t.isSubType(n, r)) : t.isSubType(e, n) : Ce(n) ? t.isSubType(n, e) : !1;
}
const Kn = 2147483647, Wn = -2147483648, Dn = new Pe({
  name: "Int",
  description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
  serialize(t) {
    const e = Jt(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isInteger(n))
      throw new v(
        `Int cannot represent non-integer value: ${R(e)}`
      );
    if (n > Kn || n < Wn)
      throw new v(
        "Int cannot represent non 32-bit signed integer value: " + R(e)
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isInteger(t))
      throw new v(
        `Int cannot represent non-integer value: ${R(t)}`
      );
    if (t > Kn || t < Wn)
      throw new v(
        `Int cannot represent non 32-bit signed integer value: ${t}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== p.INT)
      throw new v(
        `Int cannot represent non-integer value: ${J(t)}`,
        {
          nodes: t
        }
      );
    const e = parseInt(t.value, 10);
    if (e > Kn || e < Wn)
      throw new v(
        `Int cannot represent non 32-bit signed integer value: ${t.value}`,
        {
          nodes: t
        }
      );
    return e;
  }
}), Er = new Pe({
  name: "Float",
  description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
  serialize(t) {
    const e = Jt(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isFinite(n))
      throw new v(
        `Float cannot represent non numeric value: ${R(e)}`
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isFinite(t))
      throw new v(
        `Float cannot represent non numeric value: ${R(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== p.FLOAT && t.kind !== p.INT)
      throw new v(
        `Float cannot represent non numeric value: ${J(t)}`,
        t
      );
    return parseFloat(t.value);
  }
}), V = new Pe({
  name: "String",
  description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
  serialize(t) {
    const e = Jt(t);
    if (typeof e == "string")
      return e;
    if (typeof e == "boolean")
      return e ? "true" : "false";
    if (typeof e == "number" && Number.isFinite(e))
      return e.toString();
    throw new v(
      `String cannot represent value: ${R(t)}`
    );
  },
  parseValue(t) {
    if (typeof t != "string")
      throw new v(
        `String cannot represent a non string value: ${R(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== p.STRING)
      throw new v(
        `String cannot represent a non string value: ${J(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), X = new Pe({
  name: "Boolean",
  description: "The `Boolean` scalar type represents `true` or `false`.",
  serialize(t) {
    const e = Jt(t);
    if (typeof e == "boolean")
      return e;
    if (Number.isFinite(e))
      return e !== 0;
    throw new v(
      `Boolean cannot represent a non boolean value: ${R(e)}`
    );
  },
  parseValue(t) {
    if (typeof t != "boolean")
      throw new v(
        `Boolean cannot represent a non boolean value: ${R(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== p.BOOLEAN)
      throw new v(
        `Boolean cannot represent a non boolean value: ${J(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), Ln = new Pe({
  name: "ID",
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize(t) {
    const e = Jt(t);
    if (typeof e == "string")
      return e;
    if (Number.isInteger(e))
      return String(e);
    throw new v(
      `ID cannot represent value: ${R(t)}`
    );
  },
  parseValue(t) {
    if (typeof t == "string")
      return t;
    if (typeof t == "number" && Number.isInteger(t))
      return t.toString();
    throw new v(`ID cannot represent value: ${R(t)}`);
  },
  parseLiteral(t) {
    if (t.kind !== p.STRING && t.kind !== p.INT)
      throw new v(
        "ID cannot represent a non-string and non-integer value: " + J(t),
        {
          nodes: t
        }
      );
    return t.value;
  }
}), zo = Object.freeze([
  V,
  Dn,
  Er,
  X,
  Ln
]);
function Jt(t) {
  if (je(t)) {
    if (typeof t.valueOf == "function") {
      const e = t.valueOf();
      if (!je(e))
        return e;
    }
    if (typeof t.toJSON == "function")
      return t.toJSON();
  }
  return t;
}
function ts(t) {
  return Ki(t, De);
}
class De {
  constructor(e) {
    var n, r;
    this.name = ko(e.name), this.description = e.description, this.locations = e.locations, this.isRepeatable = (n = e.isRepeatable) !== null && n !== void 0 ? n : !1, this.extensions = Wi(e.extensions), this.astNode = e.astNode, Array.isArray(e.locations) || Xe(!1, `@${e.name} locations must be an Array.`);
    const i = (r = e.args) !== null && r !== void 0 ? r : {};
    je(i) && !Array.isArray(i) || Xe(
      !1,
      `@${e.name} args must be an object with argument names as keys.`
    ), this.args = Fo(i);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLDirective";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: Co(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  }
  toString() {
    return "@" + this.name;
  }
  toJSON() {
    return this.toString();
  }
}
const wr = new De({
  name: "include",
  description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
  locations: [
    k.FIELD,
    k.FRAGMENT_SPREAD,
    k.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new L(X),
      description: "Included when true."
    }
  }
}), Sr = new De({
  name: "skip",
  description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
  locations: [
    k.FIELD,
    k.FRAGMENT_SPREAD,
    k.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new L(X),
      description: "Skipped when true."
    }
  }
}), Jo = "No longer supported", ns = new De({
  name: "deprecated",
  description: "Marks an element of a GraphQL schema as no longer supported.",
  locations: [
    k.FIELD_DEFINITION,
    k.ARGUMENT_DEFINITION,
    k.INPUT_FIELD_DEFINITION,
    k.ENUM_VALUE
  ],
  args: {
    reason: {
      type: V,
      description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
      defaultValue: Jo
    }
  }
}), Yo = new De({
  name: "specifiedBy",
  description: "Exposes a URL that specifies the behavior of this scalar.",
  locations: [k.SCALAR],
  args: {
    url: {
      type: new L(V),
      description: "The URL that specifies the behavior of this scalar."
    }
  }
}), Xo = new De({
  name: "oneOf",
  description: "Indicates exactly one field must be supplied and this field must not be `null`.",
  locations: [k.INPUT_OBJECT],
  args: {}
}), Yt = Object.freeze([
  wr,
  Sr,
  ns,
  Yo,
  Xo
]);
function rs(t) {
  return typeof t == "object" && typeof t?.[Symbol.iterator] == "function";
}
function Lt(t, e) {
  if (j(e)) {
    const n = Lt(t, e.ofType);
    return n?.kind === p.NULL ? null : n;
  }
  if (t === null)
    return {
      kind: p.NULL
    };
  if (t === void 0)
    return null;
  if (ne(e)) {
    const n = e.ofType;
    if (rs(t)) {
      const r = [];
      for (const i of t) {
        const s = Lt(i, n);
        s != null && r.push(s);
      }
      return {
        kind: p.LIST,
        values: r
      };
    }
    return Lt(t, n);
  }
  if (ue(e)) {
    if (!je(t))
      return null;
    const n = [];
    for (const r of Object.values(e.getFields())) {
      const i = Lt(t[r.name], r.type);
      i && n.push({
        kind: p.OBJECT_FIELD,
        name: {
          kind: p.NAME,
          value: r.name
        },
        value: i
      });
    }
    return {
      kind: p.OBJECT,
      fields: n
    };
  }
  if (Me(e)) {
    const n = e.serialize(t);
    if (n == null)
      return null;
    if (typeof n == "boolean")
      return {
        kind: p.BOOLEAN,
        value: n
      };
    if (typeof n == "number" && Number.isFinite(n)) {
      const r = String(n);
      return Qr.test(r) ? {
        kind: p.INT,
        value: r
      } : {
        kind: p.FLOAT,
        value: r
      };
    }
    if (typeof n == "string")
      return vt(e) ? {
        kind: p.ENUM,
        value: n
      } : e === Ln && Qr.test(n) ? {
        kind: p.INT,
        value: n
      } : {
        kind: p.STRING,
        value: n
      };
    throw new TypeError(`Cannot convert value to AST: ${R(n)}.`);
  }
  Fe(!1, "Unexpected input type: " + R(e));
}
const Qr = /^-?(?:0|[1-9][0-9]*)$/, Ir = new pe({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: () => ({
    description: {
      type: V,
      resolve: (t) => t.description
    },
    types: {
      description: "A list of all types supported by this server.",
      type: new L(new te(new L(Se))),
      resolve(t) {
        return Object.values(t.getTypeMap());
      }
    },
    queryType: {
      description: "The type that query operations will be rooted at.",
      type: new L(Se),
      resolve: (t) => t.getQueryType()
    },
    mutationType: {
      description: "If this server supports mutation, the type that mutation operations will be rooted at.",
      type: Se,
      resolve: (t) => t.getMutationType()
    },
    subscriptionType: {
      description: "If this server support subscription, the type that subscription operations will be rooted at.",
      type: Se,
      resolve: (t) => t.getSubscriptionType()
    },
    directives: {
      description: "A list of all directives supported by this server.",
      type: new L(
        new te(new L(is))
      ),
      resolve: (t) => t.getDirectives()
    }
  })
}), is = new pe({
  name: "__Directive",
  description: `A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,
  fields: () => ({
    name: {
      type: new L(V),
      resolve: (t) => t.name
    },
    description: {
      type: V,
      resolve: (t) => t.description
    },
    isRepeatable: {
      type: new L(X),
      resolve: (t) => t.isRepeatable
    },
    locations: {
      type: new L(
        new te(new L(ss))
      ),
      resolve: (t) => t.locations
    },
    args: {
      type: new L(
        new te(new L($n))
      ),
      args: {
        includeDeprecated: {
          type: X,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    }
  })
}), ss = new Qt({
  name: "__DirectiveLocation",
  description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
  values: {
    QUERY: {
      value: k.QUERY,
      description: "Location adjacent to a query operation."
    },
    MUTATION: {
      value: k.MUTATION,
      description: "Location adjacent to a mutation operation."
    },
    SUBSCRIPTION: {
      value: k.SUBSCRIPTION,
      description: "Location adjacent to a subscription operation."
    },
    FIELD: {
      value: k.FIELD,
      description: "Location adjacent to a field."
    },
    FRAGMENT_DEFINITION: {
      value: k.FRAGMENT_DEFINITION,
      description: "Location adjacent to a fragment definition."
    },
    FRAGMENT_SPREAD: {
      value: k.FRAGMENT_SPREAD,
      description: "Location adjacent to a fragment spread."
    },
    INLINE_FRAGMENT: {
      value: k.INLINE_FRAGMENT,
      description: "Location adjacent to an inline fragment."
    },
    VARIABLE_DEFINITION: {
      value: k.VARIABLE_DEFINITION,
      description: "Location adjacent to a variable definition."
    },
    SCHEMA: {
      value: k.SCHEMA,
      description: "Location adjacent to a schema definition."
    },
    SCALAR: {
      value: k.SCALAR,
      description: "Location adjacent to a scalar definition."
    },
    OBJECT: {
      value: k.OBJECT,
      description: "Location adjacent to an object type definition."
    },
    FIELD_DEFINITION: {
      value: k.FIELD_DEFINITION,
      description: "Location adjacent to a field definition."
    },
    ARGUMENT_DEFINITION: {
      value: k.ARGUMENT_DEFINITION,
      description: "Location adjacent to an argument definition."
    },
    INTERFACE: {
      value: k.INTERFACE,
      description: "Location adjacent to an interface definition."
    },
    UNION: {
      value: k.UNION,
      description: "Location adjacent to a union definition."
    },
    ENUM: {
      value: k.ENUM,
      description: "Location adjacent to an enum definition."
    },
    ENUM_VALUE: {
      value: k.ENUM_VALUE,
      description: "Location adjacent to an enum value definition."
    },
    INPUT_OBJECT: {
      value: k.INPUT_OBJECT,
      description: "Location adjacent to an input object type definition."
    },
    INPUT_FIELD_DEFINITION: {
      value: k.INPUT_FIELD_DEFINITION,
      description: "Location adjacent to an input object field definition."
    }
  }
}), Se = new pe({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: () => ({
    kind: {
      type: new L(ls),
      resolve(t) {
        if (zi(t))
          return z.SCALAR;
        if (H(t))
          return z.OBJECT;
        if (re(t))
          return z.INTERFACE;
        if (Tt(t))
          return z.UNION;
        if (vt(t))
          return z.ENUM;
        if (ue(t))
          return z.INPUT_OBJECT;
        if (ne(t))
          return z.LIST;
        if (j(t))
          return z.NON_NULL;
        Fe(!1, `Unexpected type: "${R(t)}".`);
      }
    },
    name: {
      type: V,
      resolve: (t) => "name" in t ? t.name : void 0
    },
    description: {
      type: V,
      resolve: (t) => (
        /* c8 ignore next */
        "description" in t ? t.description : void 0
      )
    },
    specifiedByURL: {
      type: V,
      resolve: (t) => "specifiedByURL" in t ? t.specifiedByURL : void 0
    },
    fields: {
      type: new te(new L(os)),
      args: {
        includeDeprecated: {
          type: X,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (H(t) || re(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((r) => r.deprecationReason == null);
        }
      }
    },
    interfaces: {
      type: new te(new L(Se)),
      resolve(t) {
        if (H(t) || re(t))
          return t.getInterfaces();
      }
    },
    possibleTypes: {
      type: new te(new L(Se)),
      resolve(t, e, n, { schema: r }) {
        if (Ce(t))
          return r.getPossibleTypes(t);
      }
    },
    enumValues: {
      type: new te(new L(as)),
      args: {
        includeDeprecated: {
          type: X,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (vt(t)) {
          const n = t.getValues();
          return e ? n : n.filter((r) => r.deprecationReason == null);
        }
      }
    },
    inputFields: {
      type: new te(new L($n)),
      args: {
        includeDeprecated: {
          type: X,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (ue(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((r) => r.deprecationReason == null);
        }
      }
    },
    ofType: {
      type: Se,
      resolve: (t) => "ofType" in t ? t.ofType : void 0
    },
    isOneOf: {
      type: X,
      resolve: (t) => {
        if (ue(t))
          return t.isOneOf;
      }
    }
  })
}), os = new pe({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: () => ({
    name: {
      type: new L(V),
      resolve: (t) => t.name
    },
    description: {
      type: V,
      resolve: (t) => t.description
    },
    args: {
      type: new L(
        new te(new L($n))
      ),
      args: {
        includeDeprecated: {
          type: X,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    },
    type: {
      type: new L(Se),
      resolve: (t) => t.type
    },
    isDeprecated: {
      type: new L(X),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: V,
      resolve: (t) => t.deprecationReason
    }
  })
}), $n = new pe({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: () => ({
    name: {
      type: new L(V),
      resolve: (t) => t.name
    },
    description: {
      type: V,
      resolve: (t) => t.description
    },
    type: {
      type: new L(Se),
      resolve: (t) => t.type
    },
    defaultValue: {
      type: V,
      description: "A GraphQL-formatted string representing the default value for this input value.",
      resolve(t) {
        const { type: e, defaultValue: n } = t, r = Lt(n, e);
        return r ? J(r) : null;
      }
    },
    isDeprecated: {
      type: new L(X),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: V,
      resolve: (t) => t.deprecationReason
    }
  })
}), as = new pe({
  name: "__EnumValue",
  description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
  fields: () => ({
    name: {
      type: new L(V),
      resolve: (t) => t.name
    },
    description: {
      type: V,
      resolve: (t) => t.description
    },
    isDeprecated: {
      type: new L(X),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: V,
      resolve: (t) => t.deprecationReason
    }
  })
});
var z;
(function(t) {
  t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.INPUT_OBJECT = "INPUT_OBJECT", t.LIST = "LIST", t.NON_NULL = "NON_NULL";
})(z || (z = {}));
const ls = new Qt({
  name: "__TypeKind",
  description: "An enum describing what kind of type a given `__Type` is.",
  values: {
    SCALAR: {
      value: z.SCALAR,
      description: "Indicates this type is a scalar."
    },
    OBJECT: {
      value: z.OBJECT,
      description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
    },
    INTERFACE: {
      value: z.INTERFACE,
      description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
    },
    UNION: {
      value: z.UNION,
      description: "Indicates this type is a union. `possibleTypes` is a valid field."
    },
    ENUM: {
      value: z.ENUM,
      description: "Indicates this type is an enum. `enumValues` is a valid field."
    },
    INPUT_OBJECT: {
      value: z.INPUT_OBJECT,
      description: "Indicates this type is an input object. `inputFields` is a valid field."
    },
    LIST: {
      value: z.LIST,
      description: "Indicates this type is a list. `ofType` is a valid field."
    },
    NON_NULL: {
      value: z.NON_NULL,
      description: "Indicates this type is a non-null. `ofType` is a valid field."
    }
  }
}), yn = {
  name: "__schema",
  type: new L(Ir),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: (t, e, n, { schema: r }) => r,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, bn = {
  name: "__type",
  type: Se,
  description: "Request the type information of a single type.",
  args: [
    {
      name: "name",
      description: void 0,
      type: new L(V),
      defaultValue: void 0,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    }
  ],
  resolve: (t, { name: e }, n, { schema: r }) => r.getType(e),
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, vn = {
  name: "__typename",
  type: new L(V),
  description: "The name of the current Object type at runtime.",
  args: [],
  resolve: (t, e, n, { parentType: r }) => r.name,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, us = Object.freeze([
  Ir,
  is,
  ss,
  Se,
  os,
  $n,
  as,
  ls
]);
function cs(t) {
  return us.some(({ name: e }) => t.name === e);
}
function fs(t) {
  return Ki(t, Or);
}
function Zo(t) {
  if (!fs(t))
    throw new Error(`Expected ${R(t)} to be a GraphQL schema.`);
  return t;
}
class Or {
  // Used as a cache for validateSchema().
  constructor(e) {
    var n, r;
    this.__validationErrors = e.assumeValid === !0 ? [] : void 0, je(e) || Xe(!1, "Must provide configuration object."), !e.types || Array.isArray(e.types) || Xe(
      !1,
      `"types" must be Array if provided but got: ${R(e.types)}.`
    ), !e.directives || Array.isArray(e.directives) || Xe(
      !1,
      `"directives" must be Array if provided but got: ${R(e.directives)}.`
    ), this.description = e.description, this.extensions = Wi(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._queryType = e.query, this._mutationType = e.mutation, this._subscriptionType = e.subscription, this._directives = (r = e.directives) !== null && r !== void 0 ? r : Yt;
    const i = new Set(e.types);
    if (e.types != null)
      for (const s of e.types)
        i.delete(s), Ee(s, i);
    this._queryType != null && Ee(this._queryType, i), this._mutationType != null && Ee(this._mutationType, i), this._subscriptionType != null && Ee(this._subscriptionType, i);
    for (const s of this._directives)
      if (ts(s))
        for (const o of s.args)
          Ee(o.type, i);
    Ee(Ir, i), this._typeMap = /* @__PURE__ */ Object.create(null), this._subTypeMap = /* @__PURE__ */ Object.create(null), this._implementationsMap = /* @__PURE__ */ Object.create(null);
    for (const s of i) {
      if (s == null)
        continue;
      const o = s.name;
      if (o || Xe(
        !1,
        "One of the provided types for building the Schema is missing a name."
      ), this._typeMap[o] !== void 0)
        throw new Error(
          `Schema must contain uniquely named types but contains multiple types named "${o}".`
        );
      if (this._typeMap[o] = s, re(s)) {
        for (const a of s.getInterfaces())
          if (re(a)) {
            let l = this._implementationsMap[a.name];
            l === void 0 && (l = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), l.interfaces.push(s);
          }
      } else if (H(s)) {
        for (const a of s.getInterfaces())
          if (re(a)) {
            let l = this._implementationsMap[a.name];
            l === void 0 && (l = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), l.objects.push(s);
          }
      }
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLSchema";
  }
  getQueryType() {
    return this._queryType;
  }
  getMutationType() {
    return this._mutationType;
  }
  getSubscriptionType() {
    return this._subscriptionType;
  }
  getRootType(e) {
    switch (e) {
      case he.QUERY:
        return this.getQueryType();
      case he.MUTATION:
        return this.getMutationType();
      case he.SUBSCRIPTION:
        return this.getSubscriptionType();
    }
  }
  getTypeMap() {
    return this._typeMap;
  }
  getType(e) {
    return this.getTypeMap()[e];
  }
  getPossibleTypes(e) {
    return Tt(e) ? e.getTypes() : this.getImplementations(e).objects;
  }
  getImplementations(e) {
    const n = this._implementationsMap[e.name];
    return n ?? {
      objects: [],
      interfaces: []
    };
  }
  isSubType(e, n) {
    let r = this._subTypeMap[e.name];
    if (r === void 0) {
      if (r = /* @__PURE__ */ Object.create(null), Tt(e))
        for (const i of e.getTypes())
          r[i.name] = !0;
      else {
        const i = this.getImplementations(e);
        for (const s of i.objects)
          r[s.name] = !0;
        for (const s of i.interfaces)
          r[s.name] = !0;
      }
      this._subTypeMap[e.name] = r;
    }
    return r[n.name] !== void 0;
  }
  getDirectives() {
    return this._directives;
  }
  getDirective(e) {
    return this.getDirectives().find((n) => n.name === e);
  }
  toConfig() {
    return {
      description: this.description,
      query: this.getQueryType(),
      mutation: this.getMutationType(),
      subscription: this.getSubscriptionType(),
      types: Object.values(this.getTypeMap()),
      directives: this.getDirectives(),
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      assumeValid: this.__validationErrors !== void 0
    };
  }
}
function Ee(t, e) {
  const n = we(t);
  if (!e.has(n)) {
    if (e.add(n), Tt(n))
      for (const r of n.getTypes())
        Ee(r, e);
    else if (H(n) || re(n)) {
      for (const r of n.getInterfaces())
        Ee(r, e);
      for (const r of Object.values(n.getFields())) {
        Ee(r.type, e);
        for (const i of r.args)
          Ee(i.type, e);
      }
    } else if (ue(n))
      for (const r of Object.values(n.getFields()))
        Ee(r.type, e);
  }
  return e;
}
function ea(t) {
  if (Zo(t), t.__validationErrors)
    return t.__validationErrors;
  const e = new ta(t);
  na(e), ra(e), ia(e);
  const n = e.getErrors();
  return t.__validationErrors = n, n;
}
function ds(t) {
  const e = ea(t);
  if (e.length !== 0)
    throw new Error(e.map((n) => n.message).join(`

`));
}
class ta {
  constructor(e) {
    this._errors = [], this.schema = e;
  }
  reportError(e, n) {
    const r = Array.isArray(n) ? n.filter(Boolean) : n;
    this._errors.push(
      new v(e, {
        nodes: r
      })
    );
  }
  getErrors() {
    return this._errors;
  }
}
function na(t) {
  const e = t.schema, n = e.getQueryType();
  if (!n)
    t.reportError("Query root type must be provided.", e.astNode);
  else if (!H(n)) {
    var r;
    t.reportError(
      `Query root type must be Object type, it cannot be ${R(
        n
      )}.`,
      (r = zn(
        e,
        he.QUERY
      )) !== null && r !== void 0 ? r : n.astNode
    );
  }
  const i = e.getMutationType();
  if (i && !H(i)) {
    var s;
    t.reportError(
      `Mutation root type must be Object type if provided, it cannot be ${R(i)}.`,
      (s = zn(
        e,
        he.MUTATION
      )) !== null && s !== void 0 ? s : i.astNode
    );
  }
  const o = e.getSubscriptionType();
  if (o && !H(o)) {
    var a;
    t.reportError(
      `Subscription root type must be Object type if provided, it cannot be ${R(o)}.`,
      (a = zn(
        e,
        he.SUBSCRIPTION
      )) !== null && a !== void 0 ? a : o.astNode
    );
  }
}
function zn(t, e) {
  var n;
  return (n = [t.astNode, ...t.extensionASTNodes].flatMap(
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    (r) => {
      var i;
      return (
        /* c8 ignore next */
        (i = r?.operationTypes) !== null && i !== void 0 ? i : []
      );
    }
  ).find((r) => r.operation === e)) === null || n === void 0 ? void 0 : n.type;
}
function ra(t) {
  for (const n of t.schema.getDirectives()) {
    if (!ts(n)) {
      t.reportError(
        `Expected directive but got: ${R(n)}.`,
        n?.astNode
      );
      continue;
    }
    nt(t, n), n.locations.length === 0 && t.reportError(
      `Directive @${n.name} must include 1 or more locations.`,
      n.astNode
    );
    for (const r of n.args)
      if (nt(t, r), Oe(r.type) || t.reportError(
        `The type of @${n.name}(${r.name}:) must be Input Type but got: ${R(r.type)}.`,
        r.astNode
      ), zt(r) && r.deprecationReason != null) {
        var e;
        t.reportError(
          `Required argument @${n.name}(${r.name}:) cannot be deprecated.`,
          [
            _r(r.astNode),
            (e = r.astNode) === null || e === void 0 ? void 0 : e.type
          ]
        );
      }
  }
}
function nt(t, e) {
  e.name.startsWith("__") && t.reportError(
    `Name "${e.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
    e.astNode
  );
}
function ia(t) {
  const e = fa(t), n = t.schema.getTypeMap();
  for (const r of Object.values(n)) {
    if (!xo(r)) {
      t.reportError(
        `Expected GraphQL named type but got: ${R(r)}.`,
        r.astNode
      );
      continue;
    }
    cs(r) || nt(t, r), H(r) || re(r) ? (Hr(t, r), Kr(t, r)) : Tt(r) ? aa(t, r) : vt(r) ? la(t, r) : ue(r) && (ua(t, r), e(r));
  }
}
function Hr(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(`Type ${e.name} must define one or more fields.`, [
    e.astNode,
    ...e.extensionASTNodes
  ]);
  for (const o of n) {
    if (nt(t, o), !fn(o.type)) {
      var r;
      t.reportError(
        `The type of ${e.name}.${o.name} must be Output Type but got: ${R(o.type)}.`,
        (r = o.astNode) === null || r === void 0 ? void 0 : r.type
      );
    }
    for (const a of o.args) {
      const l = a.name;
      if (nt(t, a), !Oe(a.type)) {
        var i;
        t.reportError(
          `The type of ${e.name}.${o.name}(${l}:) must be Input Type but got: ${R(a.type)}.`,
          (i = a.astNode) === null || i === void 0 ? void 0 : i.type
        );
      }
      if (zt(a) && a.deprecationReason != null) {
        var s;
        t.reportError(
          `Required argument ${e.name}.${o.name}(${l}:) cannot be deprecated.`,
          [
            _r(a.astNode),
            (s = a.astNode) === null || s === void 0 ? void 0 : s.type
          ]
        );
      }
    }
  }
}
function Kr(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r of e.getInterfaces()) {
    if (!re(r)) {
      t.reportError(
        `Type ${R(e)} must only implement Interface types, it cannot implement ${R(r)}.`,
        Ut(e, r)
      );
      continue;
    }
    if (e === r) {
      t.reportError(
        `Type ${e.name} cannot implement itself because it would create a circular reference.`,
        Ut(e, r)
      );
      continue;
    }
    if (n[r.name]) {
      t.reportError(
        `Type ${e.name} can only implement ${r.name} once.`,
        Ut(e, r)
      );
      continue;
    }
    n[r.name] = !0, oa(t, e, r), sa(t, e, r);
  }
}
function sa(t, e, n) {
  const r = e.getFields();
  for (const l of Object.values(n.getFields())) {
    const u = l.name, c = r[u];
    if (!c) {
      t.reportError(
        `Interface field ${n.name}.${u} expected but ${e.name} does not provide it.`,
        [l.astNode, e.astNode, ...e.extensionASTNodes]
      );
      continue;
    }
    if (!yt(t.schema, c.type, l.type)) {
      var i, s;
      t.reportError(
        `Interface field ${n.name}.${u} expects type ${R(l.type)} but ${e.name}.${u} is type ${R(c.type)}.`,
        [
          (i = l.astNode) === null || i === void 0 ? void 0 : i.type,
          (s = c.astNode) === null || s === void 0 ? void 0 : s.type
        ]
      );
    }
    for (const f of l.args) {
      const d = f.name, h = c.args.find((g) => g.name === d);
      if (!h) {
        t.reportError(
          `Interface field argument ${n.name}.${u}(${d}:) expected but ${e.name}.${u} does not provide it.`,
          [f.astNode, c.astNode]
        );
        continue;
      }
      if (!ur(f.type, h.type)) {
        var o, a;
        t.reportError(
          `Interface field argument ${n.name}.${u}(${d}:) expects type ${R(f.type)} but ${e.name}.${u}(${d}:) is type ${R(h.type)}.`,
          [
            (o = f.astNode) === null || o === void 0 ? void 0 : o.type,
            (a = h.astNode) === null || a === void 0 ? void 0 : a.type
          ]
        );
      }
    }
    for (const f of c.args) {
      const d = f.name;
      !l.args.find((g) => g.name === d) && zt(f) && t.reportError(
        `Object field ${e.name}.${u} includes required argument ${d} that is missing from the Interface field ${n.name}.${u}.`,
        [f.astNode, l.astNode]
      );
    }
  }
}
function oa(t, e, n) {
  const r = e.getInterfaces();
  for (const i of n.getInterfaces())
    r.includes(i) || t.reportError(
      i === e ? `Type ${e.name} cannot implement ${n.name} because it would create a circular reference.` : `Type ${e.name} must implement ${i.name} because it is implemented by ${n.name}.`,
      [
        ...Ut(n, i),
        ...Ut(e, n)
      ]
    );
}
function aa(t, e) {
  const n = e.getTypes();
  n.length === 0 && t.reportError(
    `Union type ${e.name} must define one or more member types.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  const r = /* @__PURE__ */ Object.create(null);
  for (const i of n) {
    if (r[i.name]) {
      t.reportError(
        `Union type ${e.name} can only include type ${i.name} once.`,
        Wr(e, i.name)
      );
      continue;
    }
    r[i.name] = !0, H(i) || t.reportError(
      `Union type ${e.name} can only include Object types, it cannot include ${R(i)}.`,
      Wr(e, String(i))
    );
  }
}
function la(t, e) {
  const n = e.getValues();
  n.length === 0 && t.reportError(
    `Enum type ${e.name} must define one or more values.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const r of n)
    nt(t, r);
}
function ua(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(
    `Input Object type ${e.name} must define one or more fields.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const s of n) {
    if (nt(t, s), !Oe(s.type)) {
      var r;
      t.reportError(
        `The type of ${e.name}.${s.name} must be Input Type but got: ${R(s.type)}.`,
        (r = s.astNode) === null || r === void 0 ? void 0 : r.type
      );
    }
    if (Ji(s) && s.deprecationReason != null) {
      var i;
      t.reportError(
        `Required input field ${e.name}.${s.name} cannot be deprecated.`,
        [
          _r(s.astNode),
          (i = s.astNode) === null || i === void 0 ? void 0 : i.type
        ]
      );
    }
    e.isOneOf && ca(e, s, t);
  }
}
function ca(t, e, n) {
  if (j(e.type)) {
    var r;
    n.reportError(
      `OneOf input field ${t.name}.${e.name} must be nullable.`,
      (r = e.astNode) === null || r === void 0 ? void 0 : r.type
    );
  }
  e.defaultValue !== void 0 && n.reportError(
    `OneOf input field ${t.name}.${e.name} cannot have a default value.`,
    e.astNode
  );
}
function fa(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], r = /* @__PURE__ */ Object.create(null);
  return i;
  function i(s) {
    if (e[s.name])
      return;
    e[s.name] = !0, r[s.name] = n.length;
    const o = Object.values(s.getFields());
    for (const a of o)
      if (j(a.type) && ue(a.type.ofType)) {
        const l = a.type.ofType, u = r[l.name];
        if (n.push(a), u === void 0)
          i(l);
        else {
          const c = n.slice(u), f = c.map((d) => d.name).join(".");
          t.reportError(
            `Cannot reference Input Object "${l.name}" within itself through a series of non-null fields: "${f}".`,
            c.map((d) => d.astNode)
          );
        }
        n.pop();
      }
    r[s.name] = void 0;
  }
}
function Ut(t, e) {
  const { astNode: n, extensionASTNodes: r } = t;
  return (n != null ? [n, ...r] : r).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.interfaces) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e.name);
}
function Wr(t, e) {
  const { astNode: n, extensionASTNodes: r } = t;
  return (n != null ? [n, ...r] : r).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.types) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e);
}
function _r(t) {
  var e;
  return t == null || (e = t.directives) === null || e === void 0 ? void 0 : e.find(
    (n) => n.name.value === ns.name
  );
}
function fe(t, e) {
  switch (e.kind) {
    case p.LIST_TYPE: {
      const n = fe(t, e.type);
      return n && new te(n);
    }
    case p.NON_NULL_TYPE: {
      const n = fe(t, e.type);
      return n && new L(n);
    }
    case p.NAMED_TYPE:
      return t.getType(e.name.value);
  }
}
class ps {
  constructor(e, n, r) {
    this._schema = e, this._typeStack = [], this._parentTypeStack = [], this._inputTypeStack = [], this._fieldDefStack = [], this._defaultValueStack = [], this._directive = null, this._argument = null, this._enumValue = null, this._getFieldDef = r ?? da, n && (Oe(n) && this._inputTypeStack.push(n), Ue(n) && this._parentTypeStack.push(n), fn(n) && this._typeStack.push(n));
  }
  get [Symbol.toStringTag]() {
    return "TypeInfo";
  }
  getType() {
    if (this._typeStack.length > 0)
      return this._typeStack[this._typeStack.length - 1];
  }
  getParentType() {
    if (this._parentTypeStack.length > 0)
      return this._parentTypeStack[this._parentTypeStack.length - 1];
  }
  getInputType() {
    if (this._inputTypeStack.length > 0)
      return this._inputTypeStack[this._inputTypeStack.length - 1];
  }
  getParentInputType() {
    if (this._inputTypeStack.length > 1)
      return this._inputTypeStack[this._inputTypeStack.length - 2];
  }
  getFieldDef() {
    if (this._fieldDefStack.length > 0)
      return this._fieldDefStack[this._fieldDefStack.length - 1];
  }
  getDefaultValue() {
    if (this._defaultValueStack.length > 0)
      return this._defaultValueStack[this._defaultValueStack.length - 1];
  }
  getDirective() {
    return this._directive;
  }
  getArgument() {
    return this._argument;
  }
  getEnumValue() {
    return this._enumValue;
  }
  enter(e) {
    const n = this._schema;
    switch (e.kind) {
      case p.SELECTION_SET: {
        const i = we(this.getType());
        this._parentTypeStack.push(
          Ue(i) ? i : void 0
        );
        break;
      }
      case p.FIELD: {
        const i = this.getParentType();
        let s, o;
        i && (s = this._getFieldDef(n, i, e), s && (o = s.type)), this._fieldDefStack.push(s), this._typeStack.push(fn(o) ? o : void 0);
        break;
      }
      case p.DIRECTIVE:
        this._directive = n.getDirective(e.name.value);
        break;
      case p.OPERATION_DEFINITION: {
        const i = n.getRootType(e.operation);
        this._typeStack.push(H(i) ? i : void 0);
        break;
      }
      case p.INLINE_FRAGMENT:
      case p.FRAGMENT_DEFINITION: {
        const i = e.typeCondition, s = i ? fe(n, i) : we(this.getType());
        this._typeStack.push(fn(s) ? s : void 0);
        break;
      }
      case p.VARIABLE_DEFINITION: {
        const i = fe(n, e.type);
        this._inputTypeStack.push(
          Oe(i) ? i : void 0
        );
        break;
      }
      case p.ARGUMENT: {
        var r;
        let i, s;
        const o = (r = this.getDirective()) !== null && r !== void 0 ? r : this.getFieldDef();
        o && (i = o.args.find(
          (a) => a.name === e.name.value
        ), i && (s = i.type)), this._argument = i, this._defaultValueStack.push(i ? i.defaultValue : void 0), this._inputTypeStack.push(Oe(s) ? s : void 0);
        break;
      }
      case p.LIST: {
        const i = Yi(this.getInputType()), s = ne(i) ? i.ofType : i;
        this._defaultValueStack.push(void 0), this._inputTypeStack.push(Oe(s) ? s : void 0);
        break;
      }
      case p.OBJECT_FIELD: {
        const i = we(this.getInputType());
        let s, o;
        ue(i) && (o = i.getFields()[e.name.value], o && (s = o.type)), this._defaultValueStack.push(
          o ? o.defaultValue : void 0
        ), this._inputTypeStack.push(
          Oe(s) ? s : void 0
        );
        break;
      }
      case p.ENUM: {
        const i = we(this.getInputType());
        let s;
        vt(i) && (s = i.getValue(e.value)), this._enumValue = s;
        break;
      }
    }
  }
  leave(e) {
    switch (e.kind) {
      case p.SELECTION_SET:
        this._parentTypeStack.pop();
        break;
      case p.FIELD:
        this._fieldDefStack.pop(), this._typeStack.pop();
        break;
      case p.DIRECTIVE:
        this._directive = null;
        break;
      case p.OPERATION_DEFINITION:
      case p.INLINE_FRAGMENT:
      case p.FRAGMENT_DEFINITION:
        this._typeStack.pop();
        break;
      case p.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();
        break;
      case p.ARGUMENT:
        this._argument = null, this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case p.LIST:
      case p.OBJECT_FIELD:
        this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case p.ENUM:
        this._enumValue = null;
        break;
    }
  }
}
function da(t, e, n) {
  const r = n.name.value;
  if (r === yn.name && t.getQueryType() === e)
    return yn;
  if (r === bn.name && t.getQueryType() === e)
    return bn;
  if (r === vn.name && Ue(e))
    return vn;
  if (H(e) || re(e))
    return e.getFields()[r];
}
function hs(t, e) {
  return {
    enter(...n) {
      const r = n[0];
      t.enter(r);
      const i = Br(e, r.kind).enter;
      if (i) {
        const s = i.apply(e, n);
        return s !== void 0 && (t.leave(r), Ao(s) && t.enter(s)), s;
      }
    },
    leave(...n) {
      const r = n[0], i = Br(e, r.kind).leave;
      let s;
      return i && (s = i.apply(e, n)), t.leave(r), s;
    }
  };
}
function pa(t) {
  return t.kind === p.OPERATION_DEFINITION || t.kind === p.FRAGMENT_DEFINITION;
}
function ha(t) {
  return t.kind === p.SCHEMA_DEFINITION || Nr(t) || t.kind === p.DIRECTIVE_DEFINITION;
}
function Nr(t) {
  return t.kind === p.SCALAR_TYPE_DEFINITION || t.kind === p.OBJECT_TYPE_DEFINITION || t.kind === p.INTERFACE_TYPE_DEFINITION || t.kind === p.UNION_TYPE_DEFINITION || t.kind === p.ENUM_TYPE_DEFINITION || t.kind === p.INPUT_OBJECT_TYPE_DEFINITION;
}
function ga(t) {
  return t.kind === p.SCHEMA_EXTENSION || gs(t);
}
function gs(t) {
  return t.kind === p.SCALAR_TYPE_EXTENSION || t.kind === p.OBJECT_TYPE_EXTENSION || t.kind === p.INTERFACE_TYPE_EXTENSION || t.kind === p.UNION_TYPE_EXTENSION || t.kind === p.ENUM_TYPE_EXTENSION || t.kind === p.INPUT_OBJECT_TYPE_EXTENSION;
}
function ma(t) {
  return {
    Document(e) {
      for (const n of e.definitions)
        if (!pa(n)) {
          const r = n.kind === p.SCHEMA_DEFINITION || n.kind === p.SCHEMA_EXTENSION ? "schema" : '"' + n.name.value + '"';
          t.reportError(
            new v(`The ${r} definition is not executable.`, {
              nodes: n
            })
          );
        }
      return !1;
    }
  };
}
function ya(t) {
  return {
    Field(e) {
      const n = t.getParentType();
      if (n && !t.getFieldDef()) {
        const i = t.getSchema(), s = e.name.value;
        let o = tt(
          "to use an inline fragment on",
          ba(i, n, s)
        );
        o === "" && (o = tt(va(n, s))), t.reportError(
          new v(
            `Cannot query field "${s}" on type "${n.name}".` + o,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function ba(t, e, n) {
  if (!Ce(e))
    return [];
  const r = /* @__PURE__ */ new Set(), i = /* @__PURE__ */ Object.create(null);
  for (const o of t.getPossibleTypes(e))
    if (o.getFields()[n]) {
      r.add(o), i[o.name] = 1;
      for (const a of o.getInterfaces()) {
        var s;
        a.getFields()[n] && (r.add(a), i[a.name] = ((s = i[a.name]) !== null && s !== void 0 ? s : 0) + 1);
      }
    }
  return [...r].sort((o, a) => {
    const l = i[a.name] - i[o.name];
    return l !== 0 ? l : re(o) && t.isSubType(o, a) ? -1 : re(a) && t.isSubType(a, o) ? 1 : xn(o.name, a.name);
  }).map((o) => o.name);
}
function va(t, e) {
  if (H(t) || re(t)) {
    const n = Object.keys(t.getFields());
    return wt(e, n);
  }
  return [];
}
function Ta(t) {
  return {
    InlineFragment(e) {
      const n = e.typeCondition;
      if (n) {
        const r = fe(t.getSchema(), n);
        if (r && !Ue(r)) {
          const i = J(n);
          t.reportError(
            new v(
              `Fragment cannot condition on non composite type "${i}".`,
              {
                nodes: n
              }
            )
          );
        }
      }
    },
    FragmentDefinition(e) {
      const n = fe(t.getSchema(), e.typeCondition);
      if (n && !Ue(n)) {
        const r = J(e.typeCondition);
        t.reportError(
          new v(
            `Fragment "${e.name.value}" cannot condition on non composite type "${r}".`,
            {
              nodes: e.typeCondition
            }
          )
        );
      }
    }
  };
}
function Ea(t) {
  return {
    // eslint-disable-next-line new-cap
    ...wa(t),
    Argument(e) {
      const n = t.getArgument(), r = t.getFieldDef(), i = t.getParentType();
      if (!n && r && i) {
        const s = e.name.value, o = r.args.map((l) => l.name), a = wt(s, o);
        t.reportError(
          new v(
            `Unknown argument "${s}" on field "${i.name}.${r.name}".` + tt(a),
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function wa(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), r = n ? n.getDirectives() : Yt;
  for (const o of r)
    e[o.name] = o.args.map((a) => a.name);
  const i = t.getDocument().definitions;
  for (const o of i)
    if (o.kind === p.DIRECTIVE_DEFINITION) {
      var s;
      const a = (s = o.arguments) !== null && s !== void 0 ? s : [];
      e[o.name.value] = a.map((l) => l.name.value);
    }
  return {
    Directive(o) {
      const a = o.name.value, l = e[a];
      if (o.arguments && l)
        for (const u of o.arguments) {
          const c = u.name.value;
          if (!l.includes(c)) {
            const f = wt(c, l);
            t.reportError(
              new v(
                `Unknown argument "${c}" on directive "@${a}".` + tt(f),
                {
                  nodes: u
                }
              )
            );
          }
        }
      return !1;
    }
  };
}
function Sa(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), r = n ? n.getDirectives() : Yt;
  for (const s of r)
    e[s.name] = s.locations;
  const i = t.getDocument().definitions;
  for (const s of i)
    s.kind === p.DIRECTIVE_DEFINITION && (e[s.name.value] = s.locations.map((o) => o.value));
  return {
    Directive(s, o, a, l, u) {
      const c = s.name.value, f = e[c];
      if (!f) {
        t.reportError(
          new v(`Unknown directive "@${c}".`, {
            nodes: s
          })
        );
        return;
      }
      const d = Ia(u);
      d && !f.includes(d) && t.reportError(
        new v(
          `Directive "@${c}" may not be used on ${d}.`,
          {
            nodes: s
          }
        )
      );
    }
  };
}
function Ia(t) {
  const e = t[t.length - 1];
  switch ("kind" in e || Fe(!1), e.kind) {
    case p.OPERATION_DEFINITION:
      return Oa(e.operation);
    case p.FIELD:
      return k.FIELD;
    case p.FRAGMENT_SPREAD:
      return k.FRAGMENT_SPREAD;
    case p.INLINE_FRAGMENT:
      return k.INLINE_FRAGMENT;
    case p.FRAGMENT_DEFINITION:
      return k.FRAGMENT_DEFINITION;
    case p.VARIABLE_DEFINITION:
      return k.VARIABLE_DEFINITION;
    case p.SCHEMA_DEFINITION:
    case p.SCHEMA_EXTENSION:
      return k.SCHEMA;
    case p.SCALAR_TYPE_DEFINITION:
    case p.SCALAR_TYPE_EXTENSION:
      return k.SCALAR;
    case p.OBJECT_TYPE_DEFINITION:
    case p.OBJECT_TYPE_EXTENSION:
      return k.OBJECT;
    case p.FIELD_DEFINITION:
      return k.FIELD_DEFINITION;
    case p.INTERFACE_TYPE_DEFINITION:
    case p.INTERFACE_TYPE_EXTENSION:
      return k.INTERFACE;
    case p.UNION_TYPE_DEFINITION:
    case p.UNION_TYPE_EXTENSION:
      return k.UNION;
    case p.ENUM_TYPE_DEFINITION:
    case p.ENUM_TYPE_EXTENSION:
      return k.ENUM;
    case p.ENUM_VALUE_DEFINITION:
      return k.ENUM_VALUE;
    case p.INPUT_OBJECT_TYPE_DEFINITION:
    case p.INPUT_OBJECT_TYPE_EXTENSION:
      return k.INPUT_OBJECT;
    case p.INPUT_VALUE_DEFINITION: {
      const n = t[t.length - 3];
      return "kind" in n || Fe(!1), n.kind === p.INPUT_OBJECT_TYPE_DEFINITION ? k.INPUT_FIELD_DEFINITION : k.ARGUMENT_DEFINITION;
    }
    // Not reachable, all possible types have been considered.
    /* c8 ignore next */
    default:
      Fe(!1, "Unexpected kind: " + R(e.kind));
  }
}
function Oa(t) {
  switch (t) {
    case he.QUERY:
      return k.QUERY;
    case he.MUTATION:
      return k.MUTATION;
    case he.SUBSCRIPTION:
      return k.SUBSCRIPTION;
  }
}
function _a(t) {
  return {
    FragmentSpread(e) {
      const n = e.name.value;
      t.getFragment(n) || t.reportError(
        new v(`Unknown fragment "${n}".`, {
          nodes: e.name
        })
      );
    }
  };
}
function Na(t) {
  const e = t.getSchema(), n = e ? e.getTypeMap() : /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);
  for (const s of t.getDocument().definitions)
    Nr(s) && (r[s.name.value] = !0);
  const i = [
    ...Object.keys(n),
    ...Object.keys(r)
  ];
  return {
    NamedType(s, o, a, l, u) {
      const c = s.name.value;
      if (!n[c] && !r[c]) {
        var f;
        const d = (f = u[2]) !== null && f !== void 0 ? f : a, h = d != null && Ra(d);
        if (h && zr.includes(c))
          return;
        const g = wt(
          c,
          h ? zr.concat(i) : i
        );
        t.reportError(
          new v(
            `Unknown type "${c}".` + tt(g),
            {
              nodes: s
            }
          )
        );
      }
    }
  };
}
const zr = [...zo, ...us].map(
  (t) => t.name
);
function Ra(t) {
  return "kind" in t && (ha(t) || ga(t));
}
function Aa(t) {
  let e = 0;
  return {
    Document(n) {
      e = n.definitions.filter(
        (r) => r.kind === p.OPERATION_DEFINITION
      ).length;
    },
    OperationDefinition(n) {
      !n.name && e > 1 && t.reportError(
        new v(
          "This anonymous operation must be the only defined operation.",
          {
            nodes: n
          }
        )
      );
    }
  };
}
const ka = 3;
function Fa(t) {
  function e(n, r = /* @__PURE__ */ Object.create(null), i = 0) {
    if (n.kind === p.FRAGMENT_SPREAD) {
      const s = n.name.value;
      if (r[s] === !0)
        return !1;
      const o = t.getFragment(s);
      if (!o)
        return !1;
      try {
        return r[s] = !0, e(o, r, i);
      } finally {
        r[s] = void 0;
      }
    }
    if (n.kind === p.FIELD && // check all introspection lists
    (n.name.value === "fields" || n.name.value === "interfaces" || n.name.value === "possibleTypes" || n.name.value === "inputFields") && (i++, i >= ka))
      return !0;
    if ("selectionSet" in n && n.selectionSet) {
      for (const s of n.selectionSet.selections)
        if (e(s, r, i))
          return !0;
    }
    return !1;
  }
  return {
    Field(n) {
      if ((n.name.value === "__schema" || n.name.value === "__type") && e(n))
        return t.reportError(
          new v("Maximum introspection depth exceeded", {
            nodes: [n]
          })
        ), !1;
    }
  };
}
function Ca(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], r = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(s) {
      return i(s), !1;
    }
  };
  function i(s) {
    if (e[s.name.value])
      return;
    const o = s.name.value;
    e[o] = !0;
    const a = t.getFragmentSpreads(s.selectionSet);
    if (a.length !== 0) {
      r[o] = n.length;
      for (const l of a) {
        const u = l.name.value, c = r[u];
        if (n.push(l), c === void 0) {
          const f = t.getFragment(u);
          f && i(f);
        } else {
          const f = n.slice(c), d = f.slice(0, -1).map((h) => '"' + h.name.value + '"').join(", ");
          t.reportError(
            new v(
              `Cannot spread fragment "${u}" within itself` + (d !== "" ? ` via ${d}.` : "."),
              {
                nodes: f
              }
            )
          );
        }
        n.pop();
      }
      r[o] = void 0;
    }
  }
}
function xa(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const r = t.getRecursiveVariableUsages(n);
        for (const { node: i } of r) {
          const s = i.name.value;
          e[s] !== !0 && t.reportError(
            new v(
              n.name ? `Variable "$${s}" is not defined by operation "${n.name.value}".` : `Variable "$${s}" is not defined.`,
              {
                nodes: [i, n]
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = !0;
    }
  };
}
function Da(t) {
  const e = [], n = [];
  return {
    OperationDefinition(r) {
      return e.push(r), !1;
    },
    FragmentDefinition(r) {
      return n.push(r), !1;
    },
    Document: {
      leave() {
        const r = /* @__PURE__ */ Object.create(null);
        for (const i of e)
          for (const s of t.getRecursivelyReferencedFragments(
            i
          ))
            r[s.name.value] = !0;
        for (const i of n) {
          const s = i.name.value;
          r[s] !== !0 && t.reportError(
            new v(`Fragment "${s}" is never used.`, {
              nodes: i
            })
          );
        }
      }
    }
  };
}
function La(t) {
  let e = [];
  return {
    OperationDefinition: {
      enter() {
        e = [];
      },
      leave(n) {
        const r = /* @__PURE__ */ Object.create(null), i = t.getRecursiveVariableUsages(n);
        for (const { node: s } of i)
          r[s.name.value] = !0;
        for (const s of e) {
          const o = s.variable.name.value;
          r[o] !== !0 && t.reportError(
            new v(
              n.name ? `Variable "$${o}" is never used in operation "${n.name.value}".` : `Variable "$${o}" is never used.`,
              {
                nodes: s
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e.push(n);
    }
  };
}
function Rr(t) {
  switch (t.kind) {
    case p.OBJECT:
      return { ...t, fields: $a(t.fields) };
    case p.LIST:
      return { ...t, values: t.values.map(Rr) };
    case p.INT:
    case p.FLOAT:
    case p.STRING:
    case p.BOOLEAN:
    case p.NULL:
    case p.ENUM:
    case p.VARIABLE:
      return t;
  }
}
function $a(t) {
  return t.map((e) => ({
    ...e,
    value: Rr(e.value)
  })).sort(
    (e, n) => xn(e.name.value, n.name.value)
  );
}
function ms(t) {
  return Array.isArray(t) ? t.map(
    ([e, n]) => `subfields "${e}" conflict because ` + ms(n)
  ).join(" and ") : t;
}
function Pa(t) {
  const e = new vs(), n = new Ba(), r = /* @__PURE__ */ new Map();
  return {
    SelectionSet(i) {
      const s = ja(
        t,
        r,
        e,
        n,
        t.getParentType(),
        i
      );
      for (const [[o, a], l, u] of s) {
        const c = ms(a);
        t.reportError(
          new v(
            `Fields "${o}" conflict because ${c}. Use different aliases on the fields to fetch both if this was intentional.`,
            {
              nodes: l.concat(u)
            }
          )
        );
      }
    }
  };
}
function ja(t, e, n, r, i, s) {
  const o = [], [a, l] = wn(
    t,
    e,
    i,
    s
  );
  if (Ua(
    t,
    o,
    e,
    n,
    r,
    a
  ), l.length !== 0)
    for (let u = 0; u < l.length; u++) {
      Tn(
        t,
        o,
        e,
        n,
        r,
        !1,
        a,
        l[u]
      );
      for (let c = u + 1; c < l.length; c++)
        En(
          t,
          o,
          e,
          n,
          r,
          !1,
          l[u],
          l[c]
        );
    }
  return o;
}
function Tn(t, e, n, r, i, s, o, a) {
  if (r.has(
    o,
    a,
    s
  ))
    return;
  r.add(
    o,
    a,
    s
  );
  const l = t.getFragment(a);
  if (!l)
    return;
  const [u, c] = fr(
    t,
    n,
    l
  );
  if (o !== u) {
    Ar(
      t,
      e,
      n,
      r,
      i,
      s,
      o,
      u
    );
    for (const f of c)
      Tn(
        t,
        e,
        n,
        r,
        i,
        s,
        o,
        f
      );
  }
}
function En(t, e, n, r, i, s, o, a) {
  if (o === a || i.has(
    o,
    a,
    s
  ))
    return;
  i.add(o, a, s);
  const l = t.getFragment(o), u = t.getFragment(a);
  if (!l || !u)
    return;
  const [c, f] = fr(
    t,
    n,
    l
  ), [d, h] = fr(
    t,
    n,
    u
  );
  Ar(
    t,
    e,
    n,
    r,
    i,
    s,
    c,
    d
  );
  for (const g of h)
    En(
      t,
      e,
      n,
      r,
      i,
      s,
      o,
      g
    );
  for (const g of f)
    En(
      t,
      e,
      n,
      r,
      i,
      s,
      g,
      a
    );
}
function Ma(t, e, n, r, i, s, o, a, l) {
  const u = [], [c, f] = wn(
    t,
    e,
    s,
    o
  ), [d, h] = wn(
    t,
    e,
    a,
    l
  );
  Ar(
    t,
    u,
    e,
    n,
    r,
    i,
    c,
    d
  );
  for (const g of h)
    Tn(
      t,
      u,
      e,
      n,
      r,
      i,
      c,
      g
    );
  for (const g of f)
    Tn(
      t,
      u,
      e,
      n,
      r,
      i,
      d,
      g
    );
  for (const g of f)
    for (const T of h)
      En(
        t,
        u,
        e,
        n,
        r,
        i,
        g,
        T
      );
  return u;
}
function Ua(t, e, n, r, i, s) {
  for (const [o, a] of Object.entries(s))
    if (a.length > 1)
      for (let l = 0; l < a.length; l++)
        for (let u = l + 1; u < a.length; u++) {
          const c = ys(
            t,
            n,
            r,
            i,
            !1,
            // within one collection is never mutually exclusive
            o,
            a[l],
            a[u]
          );
          c && e.push(c);
        }
}
function Ar(t, e, n, r, i, s, o, a) {
  for (const [l, u] of Object.entries(o)) {
    const c = a[l];
    if (c)
      for (const f of u)
        for (const d of c) {
          const h = ys(
            t,
            n,
            r,
            i,
            s,
            l,
            f,
            d
          );
          h && e.push(h);
        }
  }
}
function ys(t, e, n, r, i, s, o, a) {
  const [l, u, c] = o, [f, d, h] = a, g = i || l !== f && H(l) && H(f);
  if (!g) {
    const E = u.name.value, _ = d.name.value;
    if (E !== _)
      return [
        [s, `"${E}" and "${_}" are different fields`],
        [u],
        [d]
      ];
    if (!Va(u, d))
      return [
        [s, "they have differing arguments"],
        [u],
        [d]
      ];
  }
  const T = c?.type, F = h?.type;
  if (T && F && cr(T, F))
    return [
      [
        s,
        `they return conflicting types "${R(T)}" and "${R(
          F
        )}"`
      ],
      [u],
      [d]
    ];
  const w = u.selectionSet, D = d.selectionSet;
  if (w && D) {
    const E = Ma(
      t,
      e,
      n,
      r,
      g,
      we(T),
      w,
      we(F),
      D
    );
    return qa(E, s, u, d);
  }
}
function Va(t, e) {
  const n = t.arguments, r = e.arguments;
  if (n === void 0 || n.length === 0)
    return r === void 0 || r.length === 0;
  if (r === void 0 || r.length === 0 || n.length !== r.length)
    return !1;
  const i = new Map(r.map(({ name: s, value: o }) => [s.value, o]));
  return n.every((s) => {
    const o = s.value, a = i.get(s.name.value);
    return a === void 0 ? !1 : Jr(o) === Jr(a);
  });
}
function Jr(t) {
  return J(Rr(t));
}
function cr(t, e) {
  return ne(t) ? ne(e) ? cr(t.ofType, e.ofType) : !0 : ne(e) ? !0 : j(t) ? j(e) ? cr(t.ofType, e.ofType) : !0 : j(e) ? !0 : Me(t) || Me(e) ? t !== e : !1;
}
function wn(t, e, n, r) {
  const i = e.get(r);
  if (i)
    return i;
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  bs(
    t,
    n,
    r,
    s,
    o
  );
  const a = [s, Object.keys(o)];
  return e.set(r, a), a;
}
function fr(t, e, n) {
  const r = e.get(n.selectionSet);
  if (r)
    return r;
  const i = fe(t.getSchema(), n.typeCondition);
  return wn(
    t,
    e,
    i,
    n.selectionSet
  );
}
function bs(t, e, n, r, i) {
  for (const s of n.selections)
    switch (s.kind) {
      case p.FIELD: {
        const o = s.name.value;
        let a;
        (H(e) || re(e)) && (a = e.getFields()[o]);
        const l = s.alias ? s.alias.value : o;
        r[l] || (r[l] = []), r[l].push([e, s, a]);
        break;
      }
      case p.FRAGMENT_SPREAD:
        i[s.name.value] = !0;
        break;
      case p.INLINE_FRAGMENT: {
        const o = s.typeCondition, a = o ? fe(t.getSchema(), o) : e;
        bs(
          t,
          a,
          s.selectionSet,
          r,
          i
        );
        break;
      }
    }
}
function qa(t, e, n, r) {
  if (t.length > 0)
    return [
      [e, t.map(([i]) => i)],
      [n, ...t.map(([, i]) => i).flat()],
      [r, ...t.map(([, , i]) => i).flat()]
    ];
}
class vs {
  constructor() {
    this._data = /* @__PURE__ */ new Map();
  }
  has(e, n, r) {
    var i;
    const s = (i = this._data.get(e)) === null || i === void 0 ? void 0 : i.get(n);
    return s === void 0 ? !1 : r ? !0 : r === s;
  }
  add(e, n, r) {
    const i = this._data.get(e);
    i === void 0 ? this._data.set(e, /* @__PURE__ */ new Map([[n, r]])) : i.set(n, r);
  }
}
class Ba {
  constructor() {
    this._orderedPairSet = new vs();
  }
  has(e, n, r) {
    return e < n ? this._orderedPairSet.has(e, n, r) : this._orderedPairSet.has(n, e, r);
  }
  add(e, n, r) {
    e < n ? this._orderedPairSet.add(e, n, r) : this._orderedPairSet.add(n, e, r);
  }
}
function Ga(t) {
  return {
    InlineFragment(e) {
      const n = t.getType(), r = t.getParentType();
      if (Ue(n) && Ue(r) && !Gr(t.getSchema(), n, r)) {
        const i = R(r), s = R(n);
        t.reportError(
          new v(
            `Fragment cannot be spread here as objects of type "${i}" can never be of type "${s}".`,
            {
              nodes: e
            }
          )
        );
      }
    },
    FragmentSpread(e) {
      const n = e.name.value, r = Qa(t, n), i = t.getParentType();
      if (r && i && !Gr(t.getSchema(), r, i)) {
        const s = R(i), o = R(r);
        t.reportError(
          new v(
            `Fragment "${n}" cannot be spread here as objects of type "${s}" can never be of type "${o}".`,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function Qa(t, e) {
  const n = t.getFragment(e);
  if (n) {
    const r = fe(t.getSchema(), n.typeCondition);
    if (Ue(r))
      return r;
  }
}
function Ha(t) {
  return {
    // eslint-disable-next-line new-cap
    ...Ka(t),
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(e) {
        var n;
        const r = t.getFieldDef();
        if (!r)
          return !1;
        const i = new Set(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          /* c8 ignore next */
          (n = e.arguments) === null || n === void 0 ? void 0 : n.map((s) => s.name.value)
        );
        for (const s of r.args)
          if (!i.has(s.name) && zt(s)) {
            const o = R(s.type);
            t.reportError(
              new v(
                `Field "${r.name}" argument "${s.name}" of type "${o}" is required, but it was not provided.`,
                {
                  nodes: e
                }
              )
            );
          }
      }
    }
  };
}
function Ka(t) {
  var e;
  const n = /* @__PURE__ */ Object.create(null), r = t.getSchema(), i = (e = r?.getDirectives()) !== null && e !== void 0 ? e : Yt;
  for (const a of i)
    n[a.name] = Ht(
      a.args.filter(zt),
      (l) => l.name
    );
  const s = t.getDocument().definitions;
  for (const a of s)
    if (a.kind === p.DIRECTIVE_DEFINITION) {
      var o;
      const l = (o = a.arguments) !== null && o !== void 0 ? o : [];
      n[a.name.value] = Ht(
        l.filter(Wa),
        (u) => u.name.value
      );
    }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(a) {
        const l = a.name.value, u = n[l];
        if (u) {
          var c;
          const f = (c = a.arguments) !== null && c !== void 0 ? c : [], d = new Set(f.map((h) => h.name.value));
          for (const [h, g] of Object.entries(u))
            if (!d.has(h)) {
              const T = Do(g.type) ? R(g.type) : J(g.type);
              t.reportError(
                new v(
                  `Directive "@${l}" argument "${h}" of type "${T}" is required, but it was not provided.`,
                  {
                    nodes: a
                  }
                )
              );
            }
        }
      }
    }
  };
}
function Wa(t) {
  return t.type.kind === p.NON_NULL_TYPE && t.defaultValue == null;
}
function za(t) {
  return {
    Field(e) {
      const n = t.getType(), r = e.selectionSet;
      if (n)
        if (Me(we(n))) {
          if (r) {
            const i = e.name.value, s = R(n);
            t.reportError(
              new v(
                `Field "${i}" must not have a selection since type "${s}" has no subfields.`,
                {
                  nodes: r
                }
              )
            );
          }
        } else if (r) {
          if (r.selections.length === 0) {
            const i = e.name.value, s = R(n);
            t.reportError(
              new v(
                `Field "${i}" of type "${s}" must have at least one field selected.`,
                {
                  nodes: e
                }
              )
            );
          }
        } else {
          const i = e.name.value, s = R(n);
          t.reportError(
            new v(
              `Field "${i}" of type "${s}" must have a selection of subfields. Did you mean "${i} { ... }"?`,
              {
                nodes: e
              }
            )
          );
        }
    }
  };
}
function Ja(t) {
  return t.map(
    (e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e
  ).join("");
}
function Yr(t, e, n) {
  return {
    prev: t,
    key: e,
    typename: n
  };
}
function Re(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function Ya(t, e, n = Xa) {
  return $t(t, e, n, void 0);
}
function Xa(t, e, n) {
  let r = "Invalid value " + R(e);
  throw t.length > 0 && (r += ` at "value${Ja(t)}"`), n.message = r + ": " + n.message, n;
}
function $t(t, e, n, r) {
  if (j(e)) {
    if (t != null)
      return $t(t, e.ofType, n, r);
    n(
      Re(r),
      t,
      new v(
        `Expected non-nullable type "${R(e)}" not to be null.`
      )
    );
    return;
  }
  if (t == null)
    return null;
  if (ne(e)) {
    const i = e.ofType;
    return rs(t) ? Array.from(t, (s, o) => {
      const a = Yr(r, o, void 0);
      return $t(s, i, n, a);
    }) : [$t(t, i, n, r)];
  }
  if (ue(e)) {
    if (!je(t) || Array.isArray(t)) {
      n(
        Re(r),
        t,
        new v(`Expected type "${e.name}" to be an object.`)
      );
      return;
    }
    const i = {}, s = e.getFields();
    for (const o of Object.values(s)) {
      const a = t[o.name];
      if (a === void 0) {
        if (o.defaultValue !== void 0)
          i[o.name] = o.defaultValue;
        else if (j(o.type)) {
          const l = R(o.type);
          n(
            Re(r),
            t,
            new v(
              `Field "${o.name}" of required type "${l}" was not provided.`
            )
          );
        }
        continue;
      }
      i[o.name] = $t(
        a,
        o.type,
        n,
        Yr(r, o.name, e.name)
      );
    }
    for (const o of Object.keys(t))
      if (!s[o]) {
        const a = wt(
          o,
          Object.keys(e.getFields())
        );
        n(
          Re(r),
          t,
          new v(
            `Field "${o}" is not defined by type "${e.name}".` + tt(a)
          )
        );
      }
    if (e.isOneOf) {
      const o = Object.keys(i);
      o.length !== 1 && n(
        Re(r),
        t,
        new v(
          `Exactly one key must be specified for OneOf type "${e.name}".`
        )
      );
      const a = o[0], l = i[a];
      l === null && n(
        Re(r).concat(a),
        l,
        new v(`Field "${a}" must be non-null.`)
      );
    }
    return i;
  }
  if (Me(e)) {
    let i;
    try {
      i = e.parseValue(t);
    } catch (s) {
      s instanceof v ? n(Re(r), t, s) : n(
        Re(r),
        t,
        new v(`Expected type "${e.name}". ` + s.message, {
          originalError: s
        })
      );
      return;
    }
    return i === void 0 && n(
      Re(r),
      t,
      new v(`Expected type "${e.name}".`)
    ), i;
  }
  Fe(!1, "Unexpected input type: " + R(e));
}
function Ze(t, e, n) {
  if (t) {
    if (t.kind === p.VARIABLE) {
      const r = t.name.value;
      if (n == null || n[r] === void 0)
        return;
      const i = n[r];
      return i === null && j(e) ? void 0 : i;
    }
    if (j(e))
      return t.kind === p.NULL ? void 0 : Ze(t, e.ofType, n);
    if (t.kind === p.NULL)
      return null;
    if (ne(e)) {
      const r = e.ofType;
      if (t.kind === p.LIST) {
        const s = [];
        for (const o of t.values)
          if (Xr(o, n)) {
            if (j(r))
              return;
            s.push(null);
          } else {
            const a = Ze(o, r, n);
            if (a === void 0)
              return;
            s.push(a);
          }
        return s;
      }
      const i = Ze(t, r, n);
      return i === void 0 ? void 0 : [i];
    }
    if (ue(e)) {
      if (t.kind !== p.OBJECT)
        return;
      const r = /* @__PURE__ */ Object.create(null), i = Ht(t.fields, (s) => s.name.value);
      for (const s of Object.values(e.getFields())) {
        const o = i[s.name];
        if (!o || Xr(o.value, n)) {
          if (s.defaultValue !== void 0)
            r[s.name] = s.defaultValue;
          else if (j(s.type))
            return;
          continue;
        }
        const a = Ze(o.value, s.type, n);
        if (a === void 0)
          return;
        r[s.name] = a;
      }
      if (e.isOneOf) {
        const s = Object.keys(r);
        if (s.length !== 1 || r[s[0]] === null)
          return;
      }
      return r;
    }
    if (Me(e)) {
      let r;
      try {
        r = e.parseLiteral(t, n);
      } catch {
        return;
      }
      return r === void 0 ? void 0 : r;
    }
    Fe(!1, "Unexpected input type: " + R(e));
  }
}
function Xr(t, e) {
  return t.kind === p.VARIABLE && (e == null || e[t.name.value] === void 0);
}
function Za(t, e, n) {
  var r;
  const i = {}, s = (r = e.arguments) !== null && r !== void 0 ? r : [], o = Ht(s, (a) => a.name.value);
  for (const a of t.args) {
    const l = a.name, u = a.type, c = o[l];
    if (!c) {
      if (a.defaultValue !== void 0)
        i[l] = a.defaultValue;
      else if (j(u))
        throw new v(
          `Argument "${l}" of required type "${R(u)}" was not provided.`,
          {
            nodes: e
          }
        );
      continue;
    }
    const f = c.value;
    let d = f.kind === p.NULL;
    if (f.kind === p.VARIABLE) {
      const g = f.name.value;
      if (n == null || !el(n, g)) {
        if (a.defaultValue !== void 0)
          i[l] = a.defaultValue;
        else if (j(u))
          throw new v(
            `Argument "${l}" of required type "${R(u)}" was provided the variable "$${g}" which was not provided a runtime value.`,
            {
              nodes: f
            }
          );
        continue;
      }
      d = n[g] == null;
    }
    if (d && j(u))
      throw new v(
        `Argument "${l}" of non-null type "${R(u)}" must not be null.`,
        {
          nodes: f
        }
      );
    const h = Ze(f, u, n);
    if (h === void 0)
      throw new v(
        `Argument "${l}" has invalid value ${J(f)}.`,
        {
          nodes: f
        }
      );
    i[l] = h;
  }
  return i;
}
function Et(t, e, n) {
  var r;
  const i = (r = e.directives) === null || r === void 0 ? void 0 : r.find(
    (s) => s.name.value === t.name
  );
  if (i)
    return Za(t, i, n);
}
function el(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function tl(t, e, n, r, i) {
  const s = /* @__PURE__ */ new Map();
  return dr(
    t,
    e,
    n,
    r,
    i,
    s,
    /* @__PURE__ */ new Set()
  ), s;
}
function dr(t, e, n, r, i, s, o) {
  for (const a of i.selections)
    switch (a.kind) {
      case p.FIELD: {
        if (!Jn(n, a))
          continue;
        const l = nl(a), u = s.get(l);
        u !== void 0 ? u.push(a) : s.set(l, [a]);
        break;
      }
      case p.INLINE_FRAGMENT: {
        if (!Jn(n, a) || !Zr(t, a, r))
          continue;
        dr(
          t,
          e,
          n,
          r,
          a.selectionSet,
          s,
          o
        );
        break;
      }
      case p.FRAGMENT_SPREAD: {
        const l = a.name.value;
        if (o.has(l) || !Jn(n, a))
          continue;
        o.add(l);
        const u = e[l];
        if (!u || !Zr(t, u, r))
          continue;
        dr(
          t,
          e,
          n,
          r,
          u.selectionSet,
          s,
          o
        );
        break;
      }
    }
}
function Jn(t, e) {
  const n = Et(Sr, e, t);
  if (n?.if === !0)
    return !1;
  const r = Et(
    wr,
    e,
    t
  );
  return r?.if !== !1;
}
function Zr(t, e, n) {
  const r = e.typeCondition;
  if (!r)
    return !0;
  const i = fe(t, r);
  return i === n ? !0 : Ce(i) ? t.isSubType(i, n) : !1;
}
function nl(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function rl(t) {
  return {
    OperationDefinition(e) {
      if (e.operation === "subscription") {
        const n = t.getSchema(), r = n.getSubscriptionType();
        if (r) {
          const i = e.name ? e.name.value : null, s = /* @__PURE__ */ Object.create(null), o = t.getDocument(), a = /* @__PURE__ */ Object.create(null);
          for (const u of o.definitions)
            u.kind === p.FRAGMENT_DEFINITION && (a[u.name.value] = u);
          const l = tl(
            n,
            a,
            s,
            r,
            e.selectionSet
          );
          if (l.size > 1) {
            const f = [...l.values()].slice(1).flat();
            t.reportError(
              new v(
                i != null ? `Subscription "${i}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                {
                  nodes: f
                }
              )
            );
          }
          for (const u of l.values())
            u[0].name.value.startsWith("__") && t.reportError(
              new v(
                i != null ? `Subscription "${i}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                {
                  nodes: u
                }
              )
            );
        }
      }
    }
  };
}
function Ts(t, e) {
  const n = /* @__PURE__ */ new Map();
  for (const r of t) {
    const i = e(r), s = n.get(i);
    s === void 0 ? n.set(i, [r]) : s.push(r);
  }
  return n;
}
function il(t) {
  return {
    Field: e,
    Directive: e
  };
  function e(n) {
    var r;
    const i = (r = n.arguments) !== null && r !== void 0 ? r : [], s = Ts(i, (o) => o.name.value);
    for (const [o, a] of s)
      a.length > 1 && t.reportError(
        new v(
          `There can be only one argument named "${o}".`,
          {
            nodes: a.map((l) => l.name)
          }
        )
      );
  }
}
function sl(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), r = n ? n.getDirectives() : Yt;
  for (const a of r)
    e[a.name] = !a.isRepeatable;
  const i = t.getDocument().definitions;
  for (const a of i)
    a.kind === p.DIRECTIVE_DEFINITION && (e[a.name.value] = !a.repeatable);
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter(a) {
      if (!("directives" in a) || !a.directives)
        return;
      let l;
      if (a.kind === p.SCHEMA_DEFINITION || a.kind === p.SCHEMA_EXTENSION)
        l = s;
      else if (Nr(a) || gs(a)) {
        const u = a.name.value;
        l = o[u], l === void 0 && (o[u] = l = /* @__PURE__ */ Object.create(null));
      } else
        l = /* @__PURE__ */ Object.create(null);
      for (const u of a.directives) {
        const c = u.name.value;
        e[c] && (l[c] ? t.reportError(
          new v(
            `The directive "@${c}" can only be used once at this location.`,
            {
              nodes: [l[c], u]
            }
          )
        ) : l[c] = u);
      }
    }
  };
}
function ol(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(n) {
      const r = n.name.value;
      return e[r] ? t.reportError(
        new v(
          `There can be only one fragment named "${r}".`,
          {
            nodes: [e[r], n.name]
          }
        )
      ) : e[r] = n.name, !1;
    }
  };
}
function al(t) {
  const e = [];
  let n = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter() {
        e.push(n), n = /* @__PURE__ */ Object.create(null);
      },
      leave() {
        const r = e.pop();
        r || Fe(!1), n = r;
      }
    },
    ObjectField(r) {
      const i = r.name.value;
      n[i] ? t.reportError(
        new v(
          `There can be only one input field named "${i}".`,
          {
            nodes: [n[i], r.name]
          }
        )
      ) : n[i] = r.name;
    }
  };
}
function ll(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition(n) {
      const r = n.name;
      return r && (e[r.value] ? t.reportError(
        new v(
          `There can be only one operation named "${r.value}".`,
          {
            nodes: [
              e[r.value],
              r
            ]
          }
        )
      ) : e[r.value] = r), !1;
    },
    FragmentDefinition: () => !1
  };
}
function ul(t) {
  return {
    OperationDefinition(e) {
      var n;
      const r = (n = e.variableDefinitions) !== null && n !== void 0 ? n : [], i = Ts(
        r,
        (s) => s.variable.name.value
      );
      for (const [s, o] of i)
        o.length > 1 && t.reportError(
          new v(
            `There can be only one variable named "$${s}".`,
            {
              nodes: o.map((a) => a.variable.name)
            }
          )
        );
    }
  };
}
function cl(t) {
  let e = {};
  return {
    OperationDefinition: {
      enter() {
        e = {};
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    },
    ListValue(n) {
      const r = Yi(t.getParentInputType());
      if (!ne(r))
        return Qe(t, n), !1;
    },
    ObjectValue(n) {
      const r = we(t.getInputType());
      if (!ue(r))
        return Qe(t, n), !1;
      const i = Ht(n.fields, (s) => s.name.value);
      for (const s of Object.values(r.getFields()))
        if (!i[s.name] && Ji(s)) {
          const a = R(s.type);
          t.reportError(
            new v(
              `Field "${r.name}.${s.name}" of required type "${a}" was not provided.`,
              {
                nodes: n
              }
            )
          );
        }
      r.isOneOf && fl(
        t,
        n,
        r,
        i,
        e
      );
    },
    ObjectField(n) {
      const r = we(t.getParentInputType());
      if (!t.getInputType() && ue(r)) {
        const s = wt(
          n.name.value,
          Object.keys(r.getFields())
        );
        t.reportError(
          new v(
            `Field "${n.name.value}" is not defined by type "${r.name}".` + tt(s),
            {
              nodes: n
            }
          )
        );
      }
    },
    NullValue(n) {
      const r = t.getInputType();
      j(r) && t.reportError(
        new v(
          `Expected value of type "${R(r)}", found ${J(n)}.`,
          {
            nodes: n
          }
        )
      );
    },
    EnumValue: (n) => Qe(t, n),
    IntValue: (n) => Qe(t, n),
    FloatValue: (n) => Qe(t, n),
    StringValue: (n) => Qe(t, n),
    BooleanValue: (n) => Qe(t, n)
  };
}
function Qe(t, e) {
  const n = t.getInputType();
  if (!n)
    return;
  const r = we(n);
  if (!Me(r)) {
    const i = R(n);
    t.reportError(
      new v(
        `Expected value of type "${i}", found ${J(e)}.`,
        {
          nodes: e
        }
      )
    );
    return;
  }
  try {
    if (r.parseLiteral(
      e,
      void 0
      /* variables */
    ) === void 0) {
      const s = R(n);
      t.reportError(
        new v(
          `Expected value of type "${s}", found ${J(e)}.`,
          {
            nodes: e
          }
        )
      );
    }
  } catch (i) {
    const s = R(n);
    i instanceof v ? t.reportError(i) : t.reportError(
      new v(
        `Expected value of type "${s}", found ${J(e)}; ` + i.message,
        {
          nodes: e,
          originalError: i
        }
      )
    );
  }
}
function fl(t, e, n, r, i) {
  var s;
  const o = Object.keys(r);
  if (o.length !== 1) {
    t.reportError(
      new v(
        `OneOf Input Object "${n.name}" must specify exactly one key.`,
        {
          nodes: [e]
        }
      )
    );
    return;
  }
  const l = (s = r[o[0]]) === null || s === void 0 ? void 0 : s.value, u = !l || l.kind === p.NULL, c = l?.kind === p.VARIABLE;
  if (u) {
    t.reportError(
      new v(`Field "${n.name}.${o[0]}" must be non-null.`, {
        nodes: [e]
      })
    );
    return;
  }
  if (c) {
    const f = l.name.value;
    i[f].type.kind !== p.NON_NULL_TYPE && t.reportError(
      new v(
        `Variable "${f}" must be non-nullable to be used for OneOf Input Object "${n.name}".`,
        {
          nodes: [e]
        }
      )
    );
  }
}
function dl(t) {
  return {
    VariableDefinition(e) {
      const n = fe(t.getSchema(), e.type);
      if (n !== void 0 && !Oe(n)) {
        const r = e.variable.name.value, i = J(e.type);
        t.reportError(
          new v(
            `Variable "$${r}" cannot be non-input type "${i}".`,
            {
              nodes: e.type
            }
          )
        );
      }
    }
  };
}
function pl(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const r = t.getRecursiveVariableUsages(n);
        for (const { node: i, type: s, defaultValue: o, parentType: a } of r) {
          const l = i.name.value, u = e[l];
          if (u && s) {
            const c = t.getSchema(), f = fe(c, u.type);
            if (f && !hl(
              c,
              f,
              u.defaultValue,
              s,
              o
            )) {
              const d = R(f), h = R(s);
              t.reportError(
                new v(
                  `Variable "$${l}" of type "${d}" used in position expecting type "${h}".`,
                  {
                    nodes: [u, i]
                  }
                )
              );
            }
            ue(a) && a.isOneOf && Lo(f) && t.reportError(
              new v(
                `Variable "$${l}" is of type "${f}" but must be non-nullable to be used for OneOf Input Object "${a}".`,
                {
                  nodes: [u, i]
                }
              )
            );
          }
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    }
  };
}
function hl(t, e, n, r, i) {
  if (j(r) && !j(e)) {
    if (!(n != null && n.kind !== p.NULL) && !(i !== void 0))
      return !1;
    const a = r.ofType;
    return yt(t, e, a);
  }
  return yt(t, e, r);
}
const gl = Object.freeze([Fa]), Es = Object.freeze([
  ma,
  ll,
  Aa,
  rl,
  Na,
  Ta,
  dl,
  za,
  ya,
  ol,
  _a,
  Da,
  Ga,
  Ca,
  ul,
  xa,
  La,
  Sa,
  sl,
  Ea,
  il,
  cl,
  Ha,
  pl,
  Pa,
  al,
  ...gl
]);
class ml {
  constructor(e, n) {
    this._ast = e, this._fragments = void 0, this._fragmentSpreads = /* @__PURE__ */ new Map(), this._recursivelyReferencedFragments = /* @__PURE__ */ new Map(), this._onError = n;
  }
  get [Symbol.toStringTag]() {
    return "ASTValidationContext";
  }
  reportError(e) {
    this._onError(e);
  }
  getDocument() {
    return this._ast;
  }
  getFragment(e) {
    let n;
    if (this._fragments)
      n = this._fragments;
    else {
      n = /* @__PURE__ */ Object.create(null);
      for (const r of this.getDocument().definitions)
        r.kind === p.FRAGMENT_DEFINITION && (n[r.name.value] = r);
      this._fragments = n;
    }
    return n[e];
  }
  getFragmentSpreads(e) {
    let n = this._fragmentSpreads.get(e);
    if (!n) {
      n = [];
      const r = [e];
      let i;
      for (; i = r.pop(); )
        for (const s of i.selections)
          s.kind === p.FRAGMENT_SPREAD ? n.push(s) : s.selectionSet && r.push(s.selectionSet);
      this._fragmentSpreads.set(e, n);
    }
    return n;
  }
  getRecursivelyReferencedFragments(e) {
    let n = this._recursivelyReferencedFragments.get(e);
    if (!n) {
      n = [];
      const r = /* @__PURE__ */ Object.create(null), i = [e.selectionSet];
      let s;
      for (; s = i.pop(); )
        for (const o of this.getFragmentSpreads(s)) {
          const a = o.name.value;
          if (r[a] !== !0) {
            r[a] = !0;
            const l = this.getFragment(a);
            l && (n.push(l), i.push(l.selectionSet));
          }
        }
      this._recursivelyReferencedFragments.set(e, n);
    }
    return n;
  }
}
class yl extends ml {
  constructor(e, n, r, i) {
    super(n, i), this._schema = e, this._typeInfo = r, this._variableUsages = /* @__PURE__ */ new Map(), this._recursiveVariableUsages = /* @__PURE__ */ new Map();
  }
  get [Symbol.toStringTag]() {
    return "ValidationContext";
  }
  getSchema() {
    return this._schema;
  }
  getVariableUsages(e) {
    let n = this._variableUsages.get(e);
    if (!n) {
      const r = [], i = new ps(this._schema);
      Xi(
        e,
        hs(i, {
          VariableDefinition: () => !1,
          Variable(s) {
            r.push({
              node: s,
              type: i.getInputType(),
              defaultValue: i.getDefaultValue(),
              parentType: i.getParentInputType()
            });
          }
        })
      ), n = r, this._variableUsages.set(e, n);
    }
    return n;
  }
  getRecursiveVariableUsages(e) {
    let n = this._recursiveVariableUsages.get(e);
    if (!n) {
      n = this.getVariableUsages(e);
      for (const r of this.getRecursivelyReferencedFragments(e))
        n = n.concat(this.getVariableUsages(r));
      this._recursiveVariableUsages.set(e, n);
    }
    return n;
  }
  getType() {
    return this._typeInfo.getType();
  }
  getParentType() {
    return this._typeInfo.getParentType();
  }
  getInputType() {
    return this._typeInfo.getInputType();
  }
  getParentInputType() {
    return this._typeInfo.getParentInputType();
  }
  getFieldDef() {
    return this._typeInfo.getFieldDef();
  }
  getDirective() {
    return this._typeInfo.getDirective();
  }
  getArgument() {
    return this._typeInfo.getArgument();
  }
  getEnumValue() {
    return this._typeInfo.getEnumValue();
  }
}
function bl(t, e, n = Es, r, i = new ps(t)) {
  var s;
  const o = (s = r?.maxErrors) !== null && s !== void 0 ? s : 100;
  e || Xe(!1, "Must provide document."), ds(t);
  const a = Object.freeze({}), l = [], u = new yl(
    t,
    e,
    i,
    (f) => {
      if (l.length >= o)
        throw l.push(
          new v(
            "Too many validation errors, error limit reached. Validation aborted."
          )
        ), a;
      l.push(f);
    }
  ), c = $o(n.map((f) => f(u)));
  try {
    Xi(e, hs(i, c));
  } catch (f) {
    if (f !== a)
      throw f;
  }
  return l;
}
function vl(t) {
  return t instanceof Error ? t : new Tl(t);
}
class Tl extends Error {
  constructor(e) {
    super("Unexpected error value: " + R(e)), this.name = "NonErrorThrown", this.thrownValue = e;
  }
}
function ae(t, e, n) {
  var r;
  const i = vl(t);
  return El(i) ? i : new v(i.message, {
    nodes: (r = i.nodes) !== null && r !== void 0 ? r : e,
    source: i.source,
    positions: i.positions,
    path: n,
    originalError: i
  });
}
function El(t) {
  return Array.isArray(t.path);
}
const ei = function(t, e, n, r) {
  if (je(t) && typeof t.__typename == "string")
    return t.__typename;
  const i = n.schema.getPossibleTypes(r), s = [];
  for (let o = 0; o < i.length; o++) {
    const a = i[o];
    if (a.isTypeOf) {
      const l = a.isTypeOf(t, e, n);
      if (Ho(l))
        s[o] = l;
      else if (l)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return i[a].name;
    });
}, pn = function(t, e, n, r) {
  if (je(t) || typeof t == "function") {
    const i = t[r.fieldName];
    return typeof i == "function" ? t[r.fieldName](e, n, r) : i;
  }
};
function kr(t, e) {
  let n = null;
  for (const i of t.definitions)
    if (i.kind === p.OPERATION_DEFINITION) {
      var r;
      if (e == null) {
        if (n)
          return null;
        n = i;
      } else if (((r = i.name) === null || r === void 0 ? void 0 : r.value) === e)
        return i;
    }
  return n;
}
function wl(t) {
  const e = t.toConfig(), n = Po(
    Yn(e.types),
    (d) => d.name,
    f
  );
  return new Or({
    ...e,
    types: Object.values(n),
    directives: Yn(e.directives).map(o),
    query: s(e.query),
    mutation: s(e.mutation),
    subscription: s(e.subscription)
  });
  function r(d) {
    return ne(d) ? new te(r(d.ofType)) : j(d) ? new L(r(d.ofType)) : i(d);
  }
  function i(d) {
    return n[d.name];
  }
  function s(d) {
    return d && i(d);
  }
  function o(d) {
    const h = d.toConfig();
    return new De({
      ...h,
      locations: ws(h.locations, (g) => g),
      args: a(h.args)
    });
  }
  function a(d) {
    return nn(d, (h) => ({ ...h, type: r(h.type) }));
  }
  function l(d) {
    return nn(d, (h) => ({
      ...h,
      type: r(h.type),
      args: h.args && a(h.args)
    }));
  }
  function u(d) {
    return nn(d, (h) => ({
      ...h,
      type: r(h.type)
    }));
  }
  function c(d) {
    return Yn(d).map(i);
  }
  function f(d) {
    if (zi(d) || cs(d))
      return d;
    if (H(d)) {
      const h = d.toConfig();
      return new pe({
        ...h,
        interfaces: () => c(h.interfaces),
        fields: () => l(h.fields)
      });
    }
    if (re(d)) {
      const h = d.toConfig();
      return new ct({
        ...h,
        interfaces: () => c(h.interfaces),
        fields: () => l(h.fields)
      });
    }
    if (Tt(d)) {
      const h = d.toConfig();
      return new Dt({
        ...h,
        types: () => c(h.types)
      });
    }
    if (vt(d)) {
      const h = d.toConfig();
      return new Qt({
        ...h,
        values: nn(h.values, (g) => g)
      });
    }
    if (ue(d)) {
      const h = d.toConfig();
      return new dn({
        ...h,
        fields: () => u(h.fields)
      });
    }
    Fe(!1, "Unexpected type: " + R(d));
  }
}
function nn(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r of Object.keys(t).sort(xn))
    n[r] = e(t[r]);
  return n;
}
function Yn(t) {
  return ws(t, (e) => e.name);
}
function ws(t, e) {
  return t.slice().sort((n, r) => {
    const i = e(n), s = e(r);
    return xn(i, s);
  });
}
const Pn = Symbol.for("@whatwg-node/promise-helpers/FakePromise");
function q(t) {
  return t?.then != null;
}
function Sl(t) {
  const e = t;
  return e && e.then && e.catch && e.finally;
}
function A(t, e, n, r) {
  let i = G().then(t).then(e, n);
  return Fr(i);
}
function G(t) {
  return t && Sl(t) ? t : q(t) ? {
    then: (e, n) => G(t.then(e, n)),
    catch: (e) => G(t.then((n) => n, e)),
    finally: (e) => G(e ? _l(t, e) : t),
    [Symbol.toStringTag]: "Promise"
  } : {
    then(e) {
      if (e)
        try {
          return G(e(t));
        } catch (n) {
          return bt(n);
        }
      return this;
    },
    catch() {
      return this;
    },
    finally(e) {
      if (e)
        try {
          return G(e()).then(() => t, () => t);
        } catch (n) {
          return bt(n);
        }
      return this;
    },
    [Symbol.toStringTag]: "Promise",
    __fakePromiseValue: t,
    [Pn]: "resolved"
  };
}
function Ss() {
  if (Promise.withResolvers)
    return Promise.withResolvers();
  let t, e;
  return {
    promise: new Promise(function(i, s) {
      t = i, e = s;
    }),
    get resolve() {
      return t;
    },
    get reject() {
      return e;
    }
  };
}
function oe(t, e, n) {
  if (t?.length === 0)
    return;
  const r = t[Symbol.iterator]();
  let i = 0;
  function s() {
    const { done: o, value: a } = r.next();
    if (o)
      return;
    let l = !1;
    function u() {
      l = !0;
    }
    return A(function() {
      return e(a, u, i++);
    }, function(f) {
      if (f && n?.push(f), !l)
        return s();
    });
  }
  return s();
}
function bt(t) {
  return {
    then(e, n) {
      if (n)
        try {
          return G(n(t));
        } catch (r) {
          return bt(r);
        }
      return this;
    },
    catch(e) {
      if (e)
        try {
          return G(e(t));
        } catch (n) {
          return bt(n);
        }
      return this;
    },
    finally(e) {
      if (e)
        try {
          e();
        } catch (n) {
          return bt(n);
        }
      return this;
    },
    __fakeRejectError: t,
    [Symbol.toStringTag]: "Promise",
    [Pn]: "rejected"
  };
}
function Sn(t, e, n, r) {
  Symbol.asyncIterator in t && (t = t[Symbol.asyncIterator]());
  let i, s;
  typeof t.return == "function" && (i = t.return, s = (l) => {
    const u = () => {
      throw l;
    };
    return i.call(t).then(u, u);
  });
  function o(l) {
    return l.done ? l : A(() => l.value, (u) => A(() => e(u), ti, s));
  }
  let a;
  if (n) {
    let l;
    const u = n;
    a = (c) => (l ||= A(() => c, (f) => A(() => u(f), ti, s)), l);
  }
  return {
    next() {
      return t.next().then(o, a);
    },
    return() {
      return i ? i.call(t).then(o, a) : G({ value: void 0, done: !0 });
    },
    throw(l) {
      return typeof t.throw == "function" ? t.throw(l).then(o, a) : s ? s(l) : bt(l);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function ti(t) {
  return { value: t, done: !1 };
}
function Il(t) {
  return t?.[Pn] === "resolved";
}
function Ol(t) {
  return t?.[Pn] === "rejected";
}
function _l(t, e) {
  return "finally" in t ? t.finally(e) : t.then((n) => {
    const r = e();
    return q(r) ? r.then(() => n) : n;
  }, (n) => {
    const r = e();
    if (q(r))
      return r.then(() => {
        throw n;
      });
    throw n;
  });
}
function Fr(t) {
  if (Il(t))
    return t.__fakePromiseValue;
  if (Ol(t))
    throw t.__fakeRejectError;
  return t;
}
function Cr(t, e) {
  const n = { ...e, ...t };
  for (const r of Object.keys(n))
    r in t && r in e && (n[r] = (i, s) => t[r](i, () => e[r](i, s)));
  return n;
}
const In = (t) => ({
  /**
   * Wraps the `wrapped` function with the given `instrument` wrapper.
   * @returns The wrapped function, or `undefined` if the instrument is `undefined`.
   */
  fn(e, n) {
    return e ? (...r) => {
      let i;
      return e(t, () => {
        i = n(...r);
      }), i;
    } : n;
  },
  /**
   * Wraps the `wrapped` function with the given `instrument` wrapper.
   * @returns The wrapped function, or `undefined` if the instrument is `undefined`.
   */
  asyncFn(e, n) {
    return e ? (...r) => {
      let i;
      return A(() => e(t, () => (i = n(...r), q(i) ? i.then(() => {
      }) : void 0)), () => i);
    } : n;
  }
}), Nl = /* @__PURE__ */ new WeakMap(), Xn = Symbol("ENVELOP_IS_INTROSPECTION");
function Rl(t) {
  return (typeof t == "string" ? t : t.body).indexOf("__schema") !== -1;
}
function Al(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    subscribeFieldResolver: t[7]
  };
}
const ni = (t) => (...e) => t(Al(e));
function kl(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    typeResolver: t[7]
  };
}
const ri = (t) => (...e) => t(kl(e));
function _e(t) {
  return typeof t == "object" && t != null && typeof t[Symbol.asyncIterator] == "function";
}
function ii(t, e) {
  if (_e(t.result))
    return { onNext: e };
  e({
    args: t.args,
    result: t.result,
    setResult: t.setResult
  });
}
function si(t, e) {
  const n = t[Symbol.asyncIterator]();
  let r = !1;
  const i = {
    [Symbol.asyncIterator]() {
      return i;
    },
    next() {
      return n.next().then((s) => (s.done && r === !1 && (r = !0, e()), s));
    },
    return() {
      const s = n.return?.();
      return r === !1 && (r = !0, e()), s || G({ done: !0, value: void 0 });
    },
    throw(s) {
      const o = n.throw?.();
      if (o)
        return o;
      throw s;
    }
  };
  return i;
}
function Fl(t, e) {
  const n = t[Symbol.asyncIterator](), r = {
    [Symbol.asyncIterator]() {
      return r;
    },
    next() {
      return n.next().catch((i) => (e(i), { done: !0, value: void 0 }));
    },
    return() {
      return n.return?.() || G({ done: !0, value: void 0 });
    },
    throw(i) {
      const s = n.throw?.();
      if (s)
        return s;
      throw i;
    }
  };
  return r;
}
function rn(t) {
  throw Error(`No \`${t}\` function found! Register it using "useEngine" plugin.`);
}
function Cl({ plugins: t }) {
  let e = null, n = !1;
  const r = () => rn("parse"), i = () => rn("validate"), s = () => rn("execute"), o = () => rn("subscribe");
  let a;
  const l = (E, _ = -1) => {
    if (e !== E && (e = E, n))
      for (const [S, I] of t.entries())
        S !== _ && I.onSchemaChange && I.onSchemaChange({
          schema: e,
          replaceSchema: ($) => {
            l($, S);
          }
        });
  }, u = [];
  for (let E = 0; E < t.length; E++) {
    const _ = t[E], S = [];
    _.onPluginInit?.({
      plugins: t,
      addPlugin: (I) => {
        S.push(I);
      },
      setSchema: (I) => l(I, E),
      registerContextErrorHandler: (I) => u.push(I)
    }), S.length && t.splice(E + 1, 0, ...S);
  }
  const c = {
    init: [],
    parse: [],
    validate: [],
    subscribe: [],
    execute: [],
    context: []
  };
  for (const { onContextBuilding: E, onExecute: _, onParse: S, onSubscribe: I, onValidate: $, onEnveloped: m, instrumentation: y } of t)
    m && c.init.push(m), E && c.context.push(E), _ && c.execute.push(_), S && c.parse.push(S), I && c.subscribe.push(I), $ && c.validate.push($), y && (a = a ? Cr(a, y) : y);
  const f = (E) => {
    for (const [_, S] of c.init.entries())
      S({
        context: E,
        extendContext: (I) => {
          E && Object.assign(E, I);
        },
        setSchema: (I) => l(I, _)
      });
  }, d = c.parse.length ? (E) => (_, S) => {
    let I = null, $ = r;
    const m = E, y = [];
    for (const b of c.parse) {
      const N = b({
        context: m,
        extendContext: (x) => {
          Object.assign(m, x);
        },
        params: { source: _, options: S },
        parseFn: $,
        setParseFn: (x) => {
          $ = x;
        },
        setParsedDocument: (x) => {
          I = x;
        }
      });
      N && y.push(N);
    }
    if (I === null)
      try {
        I = $(_, S);
      } catch (b) {
        I = b;
      }
    for (const b of y)
      b({
        context: m,
        extendContext: (N) => {
          Object.assign(m, N);
        },
        replaceParseResult: (N) => {
          I = N;
        },
        result: I
      });
    if (I === null)
      throw new Error("Failed to parse document.");
    if (I instanceof Error)
      throw I;
    return Nl.set(I, _.toString()), I;
  } : () => r, h = c.validate.length ? (E) => (_, S, I, $, m) => {
    let y = I ? [...I] : void 0, b = i, N = null;
    const x = E, P = [];
    for (const Y of c.validate) {
      const Q = Y({
        context: x,
        extendContext: (se) => {
          Object.assign(x, se);
        },
        params: {
          schema: _,
          documentAST: S,
          rules: y,
          typeInfo: $,
          options: m
        },
        validateFn: b,
        addValidationRule: (se) => {
          y || (y = []), y.push(se);
        },
        setValidationFn: (se) => {
          b = se;
        },
        setResult: (se) => {
          N = se;
        }
      });
      Q && P.push(Q);
    }
    if (N || (N = b(_, S, y, $, m)), !N)
      return;
    const U = N.length === 0;
    for (const Y of P)
      Y({
        valid: U,
        result: N,
        context: x,
        extendContext: (Q) => {
          Object.assign(x, Q);
        },
        setResult: (Q) => {
          N = Q;
        }
      });
    return N;
  } : () => i, g = c.context.length ? (E) => (_) => {
    const S = [], I = E;
    _ && Object.assign(I, _);
    let $ = !1;
    return A(() => oe(c.context, (m, y) => m({
      context: I,
      extendContext: (b) => {
        Object.assign(I, b);
      },
      breakContextBuilding: () => {
        $ = !0, y();
      }
    }), S), () => $ ? I : A(() => oe(S, (m) => m({
      context: I,
      extendContext(y) {
        Object.assign(I, y);
      }
    })), () => I), (m) => {
      let y = m;
      for (const b of u)
        b({
          context: I,
          error: y,
          setError: (N) => {
            y = N;
          }
        });
      throw y;
    });
  } : (E) => (_) => (_ && Object.assign(E, _), E), T = c.subscribe.length, F = ni(T ? (E) => {
    let _ = o;
    const S = [], I = E.contextValue || {};
    let $;
    return A(() => oe(c.subscribe, (m, y) => m({
      subscribeFn: _,
      setSubscribeFn: (b) => {
        _ = b;
      },
      context: I,
      extendContext: (b) => {
        Object.assign(I, b);
      },
      args: E,
      setResultAndStopExecution: (b) => {
        $ = b, y();
      }
    }), S), () => {
      const m = [], y = [];
      for (const { onSubscribeResult: b, onSubscribeError: N } of S)
        b && m.push(b), N && y.push(N);
      return A(() => $ || _(E), (b) => {
        const N = [], x = [];
        for (const P of m) {
          const U = P({
            args: E,
            result: b,
            setResult: (Y) => {
              b = Y;
            }
          });
          U && (U.onNext && N.push(U.onNext), U.onEnd && x.push(U.onEnd));
        }
        return N.length && _e(b) && (b = Sn(b, (P) => A(() => oe(N, (U) => U({
          args: E,
          result: P,
          setResult: (Y) => P = Y
        })), () => P))), x.length && _e(b) && (b = si(b, () => {
          for (const P of x)
            P();
        })), y.length && _e(b) && (b = Fl(b, (P) => {
          let U = P;
          for (const Y of y)
            Y({
              error: U,
              setError: (Q) => {
                U = Q;
              }
            });
          throw U;
        })), b;
      });
    });
  } : o), w = c.execute.length, D = ri(w ? (E) => {
    let _ = s, S;
    const I = [], $ = [], m = E.contextValue || {};
    return A(() => oe(c.execute, (y, b) => y({
      executeFn: _,
      setExecuteFn: (N) => {
        _ = N;
      },
      setResultAndStopExecution: (N) => {
        S = N, b();
      },
      context: m,
      extendContext: (N) => {
        if (typeof N == "object")
          Object.assign(m, N);
        else
          throw new Error(`Invalid context extension provided! Expected "object", got: "${JSON.stringify(N)}" (${typeof N})`);
      },
      args: E
    }), I), () => A(() => S || _({
      ...E,
      contextValue: m
    }), (y) => A(() => oe(I, (b) => b.onExecuteDone?.({
      args: E,
      result: y,
      setResult: (N) => {
        y = N;
      }
    }), $), () => {
      const b = [], N = [];
      for (const { onNext: x, onEnd: P } of $)
        x && b.push(x), P && N.push(P);
      return b.length && _e(y) && (y = Sn(y, (x) => A(() => oe(b, (P) => P({
        args: E,
        result: x,
        setResult: (U) => {
          x = U;
        }
      })), () => x))), N.length && _e(y) && (y = si(y, () => {
        for (const x of N)
          x();
      })), y;
    })));
  } : s);
  if (n = !0, e)
    for (const [E, _] of t.entries())
      _.onSchemaChange?.({
        schema: e,
        replaceSchema: (S) => l(S, E)
      });
  return {
    getCurrentSchema() {
      return e;
    },
    init: f,
    parse: d,
    validate: h,
    execute: D,
    subscribe: F,
    contextFactory: g,
    instrumentation: a
  };
}
function xl(t) {
  return t != null;
}
function Dl(t) {
  const e = t.plugins.filter(xl), n = Cl({
    plugins: e
  }), r = n.instrumentation, i = (s = {}) => {
    const o = In({ context: s }), a = n;
    return o.fn(r?.init, n.init)(s), {
      parse: o.fn(r?.parse, a.parse(s)),
      validate: o.fn(r?.validate, a.validate(s)),
      contextFactory: o.fn(r?.context, a.contextFactory(s)),
      execute: o.asyncFn(r?.execute, a.execute),
      subscribe: o.asyncFn(r?.subscribe, a.subscribe),
      schema: a.getCurrentSchema()
    };
  };
  return i._plugins = e, i;
}
const oi = {
  logFn: console.log
}, Ll = (t = oi) => {
  const e = {
    DEFAULT_OPTIONS: oi,
    ...t
  };
  return {
    onParse({ extendContext: n, params: r }) {
      e.skipIntrospection && Rl(r.source) && n({
        [Xn]: !0
      });
    },
    onExecute({ args: n }) {
      if (!n.contextValue[Xn])
        return e.logFn("execute-start", { args: n }), {
          onExecuteDone: ({ result: r }) => {
            e.logFn("execute-end", { args: n, result: r });
          }
        };
    },
    onSubscribe({ args: n }) {
      if (!n.contextValue[Xn])
        return e.logFn("subscribe-start", { args: n }), {
          onSubscribeResult: ({ result: r }) => {
            e.logFn("subscribe-end", { args: n, result: r });
          }
        };
    }
  };
}, $l = "Unexpected error.";
function Pl(t) {
  return t instanceof Error && t.name === "GraphQLError";
}
function Is(t) {
  return Pl(t) ? t.originalError != null ? Is(t.originalError) : !0 : !1;
}
function jl(t, e, n) {
  const r = new Error(t);
  if (r.name = "GraphQLError", n) {
    const i = e instanceof Error ? { message: e.message, stack: e.stack } : { message: String(e) };
    Object.defineProperty(r, "extensions", {
      get() {
        return i;
      }
    });
  }
  return Object.defineProperty(r, "toJSON", {
    value() {
      return {
        message: r.message,
        extensions: r.extensions
      };
    }
  }), r;
}
const Ml = (t) => (e, n) => Is(e) ? e : jl(n, e, t), Ul = globalThis.process?.env?.NODE_ENV === "development", Vl = Ml(Ul), ql = (t, e) => ({ result: n, setResult: r }) => {
  n.errors != null && r({ ...n, errors: n.errors.map((i) => t(i, e)) });
};
function Bl(t) {
  const e = t?.maskError ?? Vl, n = t?.errorMessage || $l, r = ql(e, n);
  return {
    onPluginInit(i) {
      i.registerContextErrorHandler(({ error: s, setError: o }) => {
        o(e(s, n));
      });
    },
    onExecute() {
      return {
        onExecuteDone(i) {
          return ii(i, r);
        }
      };
    },
    onSubscribe() {
      return {
        onSubscribeResult(i) {
          return ii(i, r);
        },
        onSubscribeError({ error: i, setError: s }) {
          s(e(i, n));
        }
      };
    }
  };
}
const Gl = (t) => ({
  onContextBuilding({ context: e, extendContext: n }) {
    return A(() => t(e), (r) => n(r));
  }
}), Ql = (t) => ({
  onExecute: ({ setExecuteFn: e }) => {
    t.execute && e(t.execute);
  },
  onParse: ({ setParseFn: e }) => {
    t.parse && e(t.parse);
  },
  onValidate: ({ setValidationFn: e, addValidationRule: n }) => {
    t.validate && e(t.validate), t.specifiedRules?.map(n);
  },
  onSubscribe: ({ setSubscribeFn: e }) => {
    t.subscribe && e(t.subscribe);
  }
});
class jn extends v {
  constructor(e, n) {
    super(e, n), this.name = "PothosError";
  }
}
class M extends jn {
  constructor(e, n) {
    super(e, n), this.name = "PothosSchemaError";
  }
}
const St = Symbol.for("Pothos.outputShapeKey"), Xt = Symbol.for("Pothos.parentShapeKey"), Mn = Symbol.for("Pothos.inputShapeKey"), Os = Symbol.for("Pothos.inputFieldShapeKey"), Hl = Symbol.for("Pothos.outputFieldShapeKey"), On = Symbol.for("Pothos.typeBrandKey");
function ot(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Z {
  toString() {
    return `${this.kind}Ref<${this.name}>`;
  }
  associate(e) {
    if (this.association && typeof this.associate != "string")
      throw new M(`${this} is already associated with ${this.association}`);
    this.association = e;
  }
  onConfig(e) {
    this.configCallbacks.add(e), this.currentConfig && e(this.currentConfig);
  }
  updateConfig(e) {
    if (typeof e == "function") {
      this.onceOnConfig((n) => {
        this.updateConfig(e(n));
      });
      return;
    }
    this.currentConfig = e;
    for (const n of this.configCallbacks) {
      if (this.currentConfig !== e)
        break;
      n(e);
    }
  }
  prepareForBuild() {
    this.preparedForBuild = !0;
  }
  onceOnConfig(e) {
    const n = (r) => {
      this.configCallbacks.delete(n), e(r);
    };
    this.onConfig(n);
  }
  constructor(e, n, r) {
    ot(this, "kind", void 0), ot(this, "name", void 0), ot(this, "association", null), ot(this, "configCallbacks", /* @__PURE__ */ new Set()), ot(this, "preparedForBuild", !1), ot(this, "currentConfig", void 0), this.kind = e, this.name = n, this.currentConfig = r ?? null;
  }
}
function Ot(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Kl = Mn;
class _s extends Z {
  constructor(e, n) {
    super("InputList", `InputList<${String(e)}>`), Ot(this, "kind", "InputList"), Ot(this, Kl, void 0), Ot(this, "$inferInput", void 0), Ot(this, "listType", void 0), Ot(this, "required", void 0), this.listType = e, this.required = n;
  }
}
function at(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Wl = St, zl = Xt;
class Ns extends Z {
  constructor(e, n) {
    super("List", `List<${String(e)}>`), at(this, "kind", "List"), at(this, "$inferType", void 0), at(this, Wl, void 0), at(this, zl, void 0), at(this, "listType", void 0), at(this, "nullable", void 0), this.listType = e, this.nullable = n;
  }
}
const ai = Symbol.for("Pothos.contextCache");
function Jl(t) {
  const e = /* @__PURE__ */ new WeakMap(), n = (r, ...i) => {
    const s = r[ai] || r;
    if (e.has(s))
      return e.get(s);
    const o = t(r, ...i);
    return e.set(s, o), o;
  };
  return n.delete = (r) => {
    const i = r[ai] || r;
    e.delete(i);
  }, n;
}
function Yl(t) {
  const e = {};
  if (Array.isArray(t))
    for (const n of t)
      e[String(n)] = {
        pothosOptions: {}
      };
  else
    for (const [n, r] of Object.entries(t))
      r && typeof r == "object" ? e[n] = {
        ...r,
        pothosOptions: r
      } : typeof r == "string" && (e[r] = {
        pothosOptions: {}
      });
  return e;
}
function Xl(t, e) {
  const n = {};
  for (const r of Object.keys(t).filter((i) => typeof t[t[i]] != "number"))
    n[r] = {
      value: t[r],
      pothosOptions: {},
      ...e?.[r]
    };
  return n;
}
function pr(t, e, n) {
  const r = typeof n == "object" ? n.items : !1, i = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: pr(t[0], e, r),
      nullable: i
    };
  if (t instanceof Ns)
    return {
      kind: "List",
      type: pr(t.listType, e, t.nullable),
      nullable: i
    };
  const s = e.getOutputTypeRef(t), o = s instanceof Z ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof Z ? s.name : e.getTypeConfig(s).name;
  if (o !== "InputObject" && o !== "List" && o !== "InputList")
    return {
      kind: o,
      ref: s,
      nullable: i
    };
  throw new M(`Expected input param ${a} to be an output type but got ${o}`);
}
function _n(t, e, n) {
  const r = typeof n == "object" ? n.items : !0, i = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: _n(t[0], e, r),
      required: i
    };
  if (t instanceof _s)
    return {
      kind: "List",
      type: _n(t.listType, e, t.required),
      required: i
    };
  const s = e.getInputTypeRef(t), o = s instanceof Z ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof Z ? s.name : e.getTypeConfig(s).name;
  if (o === "InputObject" || o === "Enum" || o === "Scalar")
    return {
      kind: o,
      ref: s,
      required: i
    };
  throw new M(`Expected input param ${a} to be an InputObject, Enum, or Scalar but got ${o}`);
}
function Zl(t) {
  throw new TypeError(`Unexpected value: ${t}`);
}
function hr(t) {
  return !!(t && (typeof t == "object" || typeof t == "function") && typeof t.then == "function");
}
function Ae(t) {
  if (t === void 0)
    throw new M(`Received undefined as a type ref.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.
`);
}
function li(t) {
  if (!(!t || typeof t == "function")) {
    if (!Array.isArray(t))
      throw new M("interfaces must be an array or function");
    for (const e of t)
      if (e === void 0)
        throw new M(`Received undefined in list of interfaces.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.

Alternatively you can define interfaces with a function that will be lazily evaluated,
which may resolver issues with circular dependencies:

Example:
builder.objectType('MyObject', {
  interface: () => [Interface1, Interface2],
  ...
});
`);
  }
}
function eu(t) {
  return typeof t == "object" && t !== null && On in t ? t[On] : null;
}
function gr(t, e, n) {
  if (hr(t))
    return Promise.resolve(t).then(e, n);
  const r = e(t);
  return hr(r) ? Promise.resolve(r) : r;
}
function ui(t, e, n) {
  function r(i, s) {
    return s === t.length ? i : gr(n(i, t[s], s), (o) => o === null ? null : r(o, s + 1));
  }
  return r(e, 0);
}
function _t(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
const Nt = /* @__PURE__ */ new WeakMap();
class tu {
  /**
  * Called for each type defined with the SchemaBuilder
  * @param  {PothosTypeConfig} typeConfig - Config object describing the added type
  * @return {PothosTypeConfig} Original or updated `typeConfig`
  */
  onTypeConfig(e) {
    return e;
  }
  /**
  * Called for each field on an Object or Interface type
  * @param  {PothosOutputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosOutputFieldConfig} Original or updated `fieldConfig`
  */
  onOutputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each argument or field on an Input object defined in your schema
  * @param  {PothosInputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosInputFieldConfig} Original or updated `fieldConfig`
  */
  onInputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each Enum value defined in your schema
  * @param  {PothosEnumValueConfig} valueConfig - Config object describing the enum value
  * @return {PothosEnumValueConfig} Original or updated `valueConfig`
  */
  onEnumValueConfig(e) {
    return e;
  }
  /**
  * Called before builder.toSchema() schema is called
  */
  beforeBuild() {
  }
  /**
  * Called after all fields and types have been built during `builder.toSchema()`
  * @param  {GraphQLSchema} schema - the generated schema
  * @return {PothosEnumValueConfig} Original or updated `schema`
  */
  afterBuild(e) {
    return e;
  }
  /**
  * Called with the resolver for each field in the schema
  * @param  {GraphQLFieldResolver} resolve - the resolve function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function
  * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field
  */
  wrapResolve(e, n) {
    return e;
  }
  /**
  * Called with the subscribe for each field on the Subscription type
  * @param  {GraphQLFieldResolver} subscribe - the subscribe function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this subscribe function
  * @return {GraphQLFieldResolver} - Either the original, or a new subscribe function to use for this field
  */
  wrapSubscribe(e, n) {
    return e;
  }
  /**
  * Called with resolve or subscribe functions, but wraps outside of argMappers so arg mapping errors can be handled
  * @param  {GraphQLFieldResolver} resolve - the resolve function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function
  * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field
  */
  wrapArgMappers(e, n) {
    return e;
  }
  /**
  * Called with the resolveType for each Interface or Union type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosInterfaceTypeConfig | PothosUnionTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapResolveType(e, n) {
    return e;
  }
  /**
  * Called with the isTypeOf for each Object type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosObjectTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapIsTypeOf(e, n) {
    return e;
  }
  runUnique(e, n) {
    if (Nt.has(this.builder) || Nt.set(this.builder, /* @__PURE__ */ new Map()), !Nt.get(this.builder).has(e)) {
      const r = n();
      return Nt.get(this.builder).set(e, r), r;
    }
    return Nt.get(this.builder).get(e);
  }
  /**
  * Creates a data object unique to the current request for use by this plugin
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  createRequestData(e) {
    throw new jn("createRequestData not implemented");
  }
  /**
  * Returns a data object for the current request.  requires `createRequestData` to be implemented
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  requestData(e) {
    return this.requestDataMap(e);
  }
  constructor(e, n) {
    _t(this, "name", void 0), _t(this, "builder", void 0), _t(this, "buildCache", void 0), _t(this, "options", void 0), _t(this, "requestDataMap", Jl((r) => this.createRequestData(r))), this.name = n, this.builder = e.builder, this.buildCache = e, this.options = e.options;
  }
}
function nu(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class ru extends tu {
  onTypeConfig(e) {
    return this.plugins.reduceRight((n, r) => n === null ? n : r.onTypeConfig(n), e);
  }
  onInputFieldConfig(e) {
    return this.plugins.reduceRight((n, r) => n === null ? n : r.onInputFieldConfig(n), e);
  }
  onOutputFieldConfig(e) {
    return this.plugins.reduceRight((n, r) => n === null ? n : r.onOutputFieldConfig(n), e);
  }
  onEnumValueConfig(e) {
    return this.plugins.reduceRight((n, r) => n === null ? n : r.onEnumValueConfig(n), e);
  }
  beforeBuild() {
    for (const e of this.plugins)
      e.beforeBuild();
  }
  afterBuild(e) {
    return this.plugins.reduceRight((n, r) => r.afterBuild(n), e);
  }
  wrapResolve(e, n) {
    const r = this.plugins.reduceRight((s, o) => o.wrapResolve(s, n), e);
    if (!n.argMappers.length)
      return this.wrapArgMappers(r, n);
    const i = n.argMappers;
    return this.wrapArgMappers((s, o, a, l) => {
      const u = ui(i, o, (c, f) => f(c, a, l));
      return gr(u, (c) => r(s, c, a, l));
    }, n);
  }
  wrapSubscribe(e, n) {
    const r = this.plugins.reduceRight((s, o) => o.wrapSubscribe(s, n), e);
    if (!r || !n.argMappers.length)
      return this.wrapArgMappers(r, n);
    const i = n.argMappers;
    return this.wrapArgMappers((s, o, a, l) => {
      const u = ui(i, o, (c, f) => f(c, a, l));
      return gr(u, (c) => r(s, c, a, l));
    }, n);
  }
  wrapArgMappers(e, n) {
    return this.plugins.reduceRight((r, i) => i.wrapArgMappers(r, n), e);
  }
  wrapResolveType(e, n) {
    return this.plugins.reduceRight((r, i) => i.wrapResolveType(r, n), e);
  }
  wrapIsTypeOf(e, n) {
    return this.plugins.reduceRight((r, i) => i.wrapIsTypeOf(r, n), e);
  }
  constructor(e, n) {
    super(e, "PothosMergedPlugin"), nu(this, "plugins", void 0), this.plugins = n;
  }
}
function lt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let iu = St, su = Xt, ou = Mn;
class Rs extends Z {
  constructor(e, n) {
    super("Scalar", e, n), lt(this, "kind", "Scalar"), lt(this, "$inferType", void 0), lt(this, "$inferInput", void 0), lt(this, iu, void 0), lt(this, su, void 0), lt(this, ou, void 0);
  }
}
function au(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class lu extends Rs {
  constructor(e) {
    super(e.name), au(this, "type", void 0), this.type = e;
  }
}
function ve(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class uu {
  getTypeConfig(e, n) {
    const r = this.configStore.getTypeConfig(e, n);
    return this.typeConfigs.has(r.name) || this.typeConfigs.set(r.name, this.plugin.onTypeConfig(r)), this.typeConfigs.get(r.name);
  }
  getInputTypeFieldConfigs(e) {
    const n = this.getTypeConfig(e, "InputObject"), r = this.types.get(n.name);
    if (!r)
      throw new M(`Input type ${n.name} has not been built yet`);
    const i = r.getFields(), s = {};
    for (const a of Object.keys(i)) {
      var o;
      s[a] = (o = i[a].extensions) === null || o === void 0 ? void 0 : o.pothosConfig;
    }
    return s;
  }
  getImplementers(e) {
    if (this.implementers.has(e.name))
      return this.implementers.get(e.name);
    const n = [
      ...this.configStore.typeConfigs.values()
    ].filter((r) => r.kind === "Object" && r.interfaces.find((i) => this.configStore.getTypeConfig(i).name === e.name));
    return this.implementers.set(e.name, n), n;
  }
  buildAll() {
    this.configStore.prepareForBuild();
    for (const e of this.configStore.typeConfigs.values())
      (e.kind === "Enum" || e.kind === "Scalar") && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "InputObject" && this.buildTypeFromConfig(e);
    for (const e of this.types.values())
      e instanceof dn && e.getFields();
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "Interface" && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "Object" && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "Union" && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      (e.kind === "Query" || e.kind === "Mutation" || e.kind === "Subscription") && this.buildTypeFromConfig(e);
    for (const e of this.types.values())
      e instanceof pe || e instanceof ct ? e.getFields() : e instanceof Dt && e.getTypes();
  }
  buildTypeFromConfig(e) {
    const n = this.getTypeConfig(e.name), { name: r } = n;
    switch (this.typeConfigs.set(r, n), n.kind) {
      case "Enum":
        this.addType(r, this.buildEnum(n));
        break;
      case "InputObject":
        this.addType(r, this.buildInputObject(n));
        break;
      case "Interface":
        this.addType(r, this.buildInterface(n));
        break;
      case "Scalar":
        this.addType(r, this.buildScalar(n));
        break;
      case "Union":
        this.addType(r, this.buildUnion(n));
        break;
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        this.addType(r, this.buildObject(n));
        break;
      default:
        Zl(n);
    }
  }
  addType(e, n) {
    if (this.types.has(e))
      throw new M(`reference or name has already been used to create another type (${n.name})`);
    this.types.set(e, n);
  }
  buildOutputTypeParam(e) {
    return e.kind === "List" ? e.nullable ? new te(this.buildOutputTypeParam(e.type)) : new L(new te(this.buildOutputTypeParam(e.type))) : e.nullable ? this.getOutputType(e.ref) : new L(this.getOutputType(e.ref));
  }
  buildInputTypeParam(e) {
    return e.kind === "List" ? e.required ? new L(new te(this.buildInputTypeParam(e.type))) : new te(this.buildInputTypeParam(e.type)) : e.required ? new L(this.getInputType(e.ref)) : this.getInputType(e.ref);
  }
  buildFields(e) {
    const n = {};
    for (const [s, o] of e) {
      this.outputFieldConfigs.has(o) || this.outputFieldConfigs.set(o, this.plugin.onOutputFieldConfig(o));
      const a = this.outputFieldConfigs.get(o);
      if (!a)
        continue;
      const l = {
        ...a
      }, u = /* @__PURE__ */ new Map();
      for (const g of Object.keys(l.args))
        u.set(g, l.args[g]);
      const c = this.buildInputFields(u), f = {};
      for (const g of Object.keys(l.args))
        f[g] = this.inputFieldConfigs.get(l.args[g]);
      l.args = f;
      var r;
      const d = this.plugin.wrapResolve((r = l.resolve) !== null && r !== void 0 ? r : pn, l), h = this.plugin.wrapSubscribe(l.subscribe, l);
      var i;
      n[s] = {
        ...l,
        type: this.buildOutputTypeParam(l.type),
        args: c,
        extensions: {
          ...l.extensions,
          pothosResolveWrapped: d !== ((i = l.resolve) !== null && i !== void 0 ? i : pn),
          pothosSubscribeWrapped: h !== l.subscribe,
          pothosOptions: l.pothosOptions,
          pothosConfig: l,
          pothosArgMappers: l.argMappers
        },
        resolve: d === pn ? void 0 : d,
        subscribe: h
      };
    }
    return n;
  }
  buildInputFields(e) {
    const n = {};
    for (const [r, i] of e) {
      this.inputFieldConfigs.has(i) || this.inputFieldConfigs.set(i, this.plugin.onInputFieldConfig(i));
      const s = this.inputFieldConfigs.get(i);
      s && (n[r] = {
        ...s,
        type: this.buildInputTypeParam(s.type),
        extensions: {
          ...s.extensions,
          pothosOptions: s.pothosOptions,
          pothosConfig: s
        }
      });
    }
    return n;
  }
  getInterfaceFields(e) {
    const n = e.getInterfaces().reduce((s, o) => Object.assign(s, this.getFields(o)), {}), r = this.configStore.getFields(e.name, "Interface"), i = this.buildFields(r);
    return {
      ...n,
      ...i
    };
  }
  getObjectFields(e) {
    const n = e.getInterfaces().reduce((i, s) => Object.assign(i, this.getFields(s)), {}), r = this.buildFields(this.configStore.getFields(e.name, "Object"));
    return {
      ...n,
      ...r
    };
  }
  getRootFields(e) {
    return this.buildFields(this.configStore.getFields(e.name, "Object"));
  }
  getFields(e) {
    if (e instanceof pe) {
      const n = this.configStore.getTypeConfig(e.name);
      return n.kind === "Query" || n.kind === "Mutation" || n.kind === "Subscription" ? this.getRootFields(e) : this.getObjectFields(e);
    }
    if (e instanceof ct)
      return this.getInterfaceFields(e);
    throw new M(`Type ${e.name} does not have fields to resolve`);
  }
  getInputFields(e) {
    return this.buildInputFields(this.configStore.getFields(e.name, "InputObject"));
  }
  getType(e) {
    if (e instanceof lu)
      return e.type;
    const n = this.configStore.getTypeConfig(e), r = this.types.get(n.name);
    return r || (this.buildTypeFromConfig(n), this.types.get(n.name));
  }
  getOutputType(e) {
    const n = this.getType(e);
    if (n instanceof dn)
      throw new M(`Expected ${String(e)} to be an output type but it was defined as an InputObject`);
    return n;
  }
  getInputType(e) {
    const n = this.getType(e);
    if (!n)
      throw new M(`Missing implementation of for type ${String(e)}`);
    if (n instanceof pe)
      throw new M(`Expected ${n.name} to be an input type but it was defined as a GraphQLObjectType`);
    if (n instanceof ct)
      throw new M(`Expected ${n.name} to be an input type but it was defined as a GraphQLInterfaceType`);
    if (n instanceof Dt)
      throw new M(`Expected ${String(e)} to be an input type but it was defined as an GraphQLUnionType`);
    return n;
  }
  getTypeOfKind(e, n) {
    const r = this.getType(e);
    switch (n) {
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        if (r instanceof pe)
          return r;
        break;
      case "Interface":
        if (r instanceof ct)
          return r;
        break;
      case "Union":
        if (r instanceof Dt)
          return r;
        break;
      case "Enum":
        if (r instanceof Qt)
          return r;
        break;
      case "Scalar":
        if (r instanceof Pe)
          return r;
        break;
      case "InputObject":
        if (r instanceof Pe)
          return r;
        break;
    }
    throw new M(`Expected ${String(e)} to be of type ${n}`);
  }
  buildObject(e) {
    var n;
    const r = new pe({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getFields(r),
      isTypeOf: e.kind === "Object" ? this.plugin.wrapIsTypeOf((n = e.isTypeOf) !== null && n !== void 0 ? n : void 0, e) : void 0,
      interfaces: e.kind === "Object" ? () => e.interfaces.map((i) => this.getTypeOfKind(i, "Interface")) : void 0
    });
    return r;
  }
  buildInterface(e) {
    const n = (i, s, o) => {
      const a = eu(i);
      if (a)
        return typeof a == "string" ? a : this.getTypeConfig(a).name;
      var l;
      return ((l = e.resolveType) !== null && l !== void 0 ? l : ei)(i, s, o, r);
    }, r = new ct({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      interfaces: () => e.interfaces.map((i) => this.getTypeOfKind(i, "Interface")),
      fields: () => this.getFields(r),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
    return r;
  }
  buildUnion(e) {
    const n = (r, i, s, o) => {
      if (typeof r == "object" && r !== null && On in r) {
        const u = r[On];
        return typeof u == "string" ? u : this.getTypeConfig(u).name;
      }
      if (!e.resolveType)
        return ei(r, i, s, o);
      const a = e.resolveType(r, i, s, o), l = (u) => {
        if (typeof u == "string" || !u)
          return u;
        if (u instanceof pe)
          return u.name;
        try {
          return this.configStore.getTypeConfig(u).name;
        } catch {
        }
        return u;
      };
      return hr(a) ? a.then(l) : l(a);
    };
    return new Dt({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      types: () => e.types.map((r) => this.getTypeOfKind(r, "Object")),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
  }
  buildInputObject(e) {
    const n = new dn({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getInputFields(n)
    });
    return n;
  }
  buildScalar(e) {
    return e.name === "ID" ? Ln : e.name === "Int" ? Dn : e.name === "Float" ? Er : e.name === "Boolean" ? X : e.name === "String" ? V : new Pe({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  buildEnum(e) {
    const n = {}, r = typeof e.values == "function" ? e.values() : e.values;
    for (const i of Object.keys(e.values)) {
      const s = r[i];
      this.enumValueConfigs.has(s) || this.enumValueConfigs.set(s, this.plugin.onEnumValueConfig(s)), this.enumValueConfigs.get(s) && (n[i] = this.enumValueConfigs.get(s));
    }
    return new Qt({
      ...e,
      values: n,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  constructor(e, n) {
    ve(this, "types", /* @__PURE__ */ new Map()), ve(this, "builder", void 0), ve(this, "plugin", void 0), ve(this, "options", void 0), ve(this, "configStore", void 0), ve(this, "pluginList", void 0), ve(this, "implementers", /* @__PURE__ */ new Map()), ve(this, "typeConfigs", /* @__PURE__ */ new Map()), ve(this, "enumValueConfigs", /* @__PURE__ */ new Map()), ve(this, "outputFieldConfigs", /* @__PURE__ */ new Map()), ve(this, "inputFieldConfigs", /* @__PURE__ */ new Map()), this.builder = e, this.configStore = e.configStore, this.options = n;
    const r = {};
    var i;
    this.pluginList = ((i = e.options.plugins) !== null && i !== void 0 ? i : []).map((s) => {
      const o = this.builder.constructor.plugins[s];
      if (!o)
        throw new jn(`No plugin named ${s} was registered`);
      return r[s] = new o(this, s), r[s];
    }), this.plugin = new ru(this, this.pluginList);
  }
}
function ft(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let cu = Mn;
class Nn extends Z {
  addFields(e) {
    this.fields.add(e);
    for (const n of this.fieldCbs)
      for (const [r, i] of Object.entries(e()))
        i && n(r, i);
  }
  onField(e) {
    this.fieldCbs.add(e);
    for (const n of this.fields)
      for (const [r, i] of Object.entries(n()))
        i && e(r, i);
  }
  constructor(e) {
    super("InputObject", e), ft(this, "kind", "InputObject"), ft(this, "$inferInput", void 0), ft(this, cu, void 0), ft(this, "fields", /* @__PURE__ */ new Set()), ft(this, "fieldCbs", /* @__PURE__ */ new Set());
  }
}
class fu extends Nn {
  implement(e) {
    return this.builder.inputType(this, e), this;
  }
  constructor(e, n) {
    super(n), ft(this, "builder", void 0), this.builder = e;
  }
}
function Zn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class As extends Z {
  addFields(e) {
    for (const n of this.fieldCbs)
      for (const [r, i] of Object.entries(e()))
        i && n(r, i);
    this.fields.add(e);
  }
  addInterfaces(e) {
    Array.isArray(e) && e.length === 0 || (this.preparedForBuild ? this.updateConfig((n) => ({
      ...n,
      interfaces: [
        ...n.interfaces,
        ...typeof e == "function" ? e() : e
      ]
    })) : this.interfaces.push(() => Array.isArray(e) ? e : e()));
  }
  onField(e) {
    this.fieldCbs.add(e);
    for (const n of this.fields)
      for (const [r, i] of Object.entries(n()))
        i && e(r, i);
  }
  prepareForBuild() {
    this.preparedForBuild || (super.prepareForBuild(), this.interfaces.length > 0 && this.updateConfig((e) => {
      var n;
      return {
        ...e,
        interfaces: [
          ...(n = e.interfaces) !== null && n !== void 0 ? n : [],
          ...this.interfaces.flatMap((r) => r())
        ]
      };
    }));
  }
  constructor(...e) {
    super(...e), Zn(this, "fields", /* @__PURE__ */ new Set()), Zn(this, "fieldCbs", /* @__PURE__ */ new Set()), Zn(this, "interfaces", []);
  }
}
function Pt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let du = St, pu = Xt;
class Rn extends As {
  constructor(e, n) {
    super("Interface", e, n), Pt(this, "kind", "Interface"), Pt(this, "$inferType", void 0), Pt(this, du, void 0), Pt(this, pu, void 0);
  }
}
class hu extends Rn {
  implement(e) {
    return this.builder.interfaceType(this, e);
  }
  constructor(e, n) {
    super(n), Pt(this, "builder", void 0), this.builder = e;
  }
}
function jt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let gu = St, mu = Xt;
class rt extends As {
  constructor(e, n) {
    super("Object", e, n), jt(this, "kind", "Object"), jt(this, "$inferType", void 0), jt(this, gu, void 0), jt(this, mu, void 0);
  }
}
class yu extends rt {
  implement(e) {
    return this.builder.objectType(this, e);
  }
  constructor(e, n) {
    super(n), jt(this, "builder", void 0), this.builder = e;
  }
}
function bu(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class ks extends rt {
  constructor(...e) {
    super(...e), bu(this, "kind", "Object");
  }
}
class Fs extends rt {
}
class Cs extends rt {
}
function ke(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class vu {
  addFields(e, n) {
    this.onTypeConfig(e, (r, i) => {
      if (!(i instanceof Rn || i instanceof rt || i instanceof Fs || i instanceof ks || i instanceof Cs))
        throw new M(`Can not add fields to ${i} because it is not an object`);
      i.addFields(n);
    });
  }
  addInputFields(e, n) {
    this.onTypeConfig(e, (r, i) => {
      if (!(i instanceof Nn))
        throw new M(`Can not add fields to ${i} because it is not an input object`);
      i.addFields(n);
    });
  }
  associateParamWithRef(e, n) {
    const r = this.resolveParamAssociations(n);
    this.paramAssociations.set(e, r);
    var i;
    const s = (i = this.pendingTypeConfigResolutions.get(e)) !== null && i !== void 0 ? i : [];
    if (s.length > 0)
      if (typeof r == "string" && this.typeConfigs.has(r))
        for (const o of s) {
          const a = this.typeConfigs.get(r);
          o(a, this.implementors.get(a.name));
        }
      else
        for (const o of s)
          this.onTypeConfig(r, o);
    this.pendingTypeConfigResolutions.delete(e);
  }
  onTypeConfig(e, n) {
    const r = this.resolveParamAssociations(e);
    if (typeof r == "string" && this.typeConfigs.has(r)) {
      const i = this.typeConfigs.get(r);
      n(i, this.implementors.get(i.name));
    } else
      this.pendingTypeConfigResolutions.has(r) || this.pendingTypeConfigResolutions.set(r, []), this.pendingTypeConfigResolutions.get(r).push(n);
  }
  onTypeConfigOfKind(e, n, r) {
    this.onTypeConfig(e, (i) => {
      if (i.kind !== n)
        throw new M(`Expected ${this.describeRef(e)} to be of kind ${n} but it is of kind ${i.kind}`);
      r(i);
    });
  }
  addTypeRef(e) {
    this.refs.has(e) || (this.pending || e.prepareForBuild(), this.refs.add(e), e.onConfig((n) => {
      const r = this.implementors.get(n.name);
      if (r && r !== e)
        throw new M(`Duplicate typename: Another type with name ${n.name} already exists.`);
      if (r || (this.implementors.set(n.name, e), this.associateParamWithRef(e, n.name), (e instanceof rt || e instanceof Rn || e instanceof Nn) && (this.fields.has(n.name) || this.fields.set(n.name, /* @__PURE__ */ new Map()), this.onPrepare(() => {
        e.onField((i, s) => {
          const o = this.fields.get(n.name);
          if (o.has(i))
            throw new M(`Duplicate field ${i} on ${n.name}`);
          var a;
          o.set(i, s.getConfig(i, (a = this.typeConfigs.get(n.name)) !== null && a !== void 0 ? a : n));
        });
      }))), this.typeConfigs.set(n.name, n), this.pendingTypeConfigResolutions.has(n.name)) {
        const i = this.pendingTypeConfigResolutions.get(n.name);
        for (const s of i)
          s(n, e);
      }
      this.pendingTypeConfigResolutions.delete(n.name);
    }));
  }
  subscribeToFields(e) {
  }
  hasImplementation(e) {
    return this.typeConfigs.has(e);
  }
  hasConfig(e) {
    const n = this.resolveParamAssociations(e);
    return !(typeof n != "string" || !this.typeConfigs.has(n));
  }
  getTypeConfig(e, n) {
    const r = this.resolveParamAssociations(e);
    if (typeof r != "string" || !this.typeConfigs.has(r))
      throw new M(`${this.describeRef(e)} has not been implemented`);
    const i = this.typeConfigs.get(r);
    if (n && i.graphqlKind !== n)
      throw new M(`Expected ref to resolve to a ${n} type, but got ${i.kind}`);
    return i;
  }
  getInputTypeRef(e) {
    const n = this.resolveParamAssociations(e);
    if (e instanceof Z) {
      if (e.kind !== "InputObject" && e.kind !== "Enum" && e.kind !== "Scalar")
        throw new M(`Expected ${this.describeRef(e)} to be an input type but got ${e.kind}`);
      return e;
    }
    if (typeof n == "string" && this.typeConfigs.has(n)) {
      const r = this.implementors.get(n);
      if (r instanceof Z) {
        if (r.kind !== "InputObject" && r.kind !== "Enum" && r.kind !== "Scalar")
          throw new M(`Expected ${this.describeRef(r)} to be an input type but got ${r.kind}`);
        return r;
      }
    }
    throw new M(`${this.describeRef(e)} has not been implemented`);
  }
  getOutputTypeRef(e) {
    const n = this.resolveParamAssociations(e);
    if (e instanceof Z) {
      if (e.kind === "InputObject" || e.kind === "InputList")
        throw new M(`Expected ${e.name} to be an output type but got ${e.kind}`);
      return e;
    }
    if (typeof n == "string" && this.typeConfigs.has(n)) {
      const r = this.implementors.get(n);
      if (r instanceof Z) {
        if (r.kind === "InputObject" || r.kind === "InputList")
          throw new M(`Expected ${r.name} to be an output type but got ${r.kind}`);
        return r;
      }
    }
    throw new M(`${this.describeRef(e)} has not been implemented`);
  }
  getFields(e, n) {
    const r = this.getTypeConfig(e);
    this.fields.has(e) || this.fields.set(e, /* @__PURE__ */ new Map());
    const i = this.fields.get(e);
    if (n && r.graphqlKind !== n)
      throw new M(`Expected ${e} to be a ${n} type, but found ${r.graphqlKind}`);
    return i;
  }
  prepareForBuild() {
    this.pending = !1;
    for (const n of this.refs)
      n.prepareForBuild();
    const { pendingActions: e } = this;
    this.pendingActions = [];
    for (const n of e)
      n();
    if (this.pendingTypeConfigResolutions.size > 0)
      throw new M(`Missing implementations for some references (${[
        ...this.pendingTypeConfigResolutions.keys()
      ].map((n) => this.describeRef(n)).join(", ")}).`);
  }
  onPrepare(e) {
    this.pending ? this.pendingActions.push(e) : e();
  }
  resolveParamAssociations(e) {
    let n = this.paramAssociations.get(e);
    for (; n && this.paramAssociations.has(n); )
      n = this.paramAssociations.get(n);
    return n ?? e;
  }
  describeRef(e) {
    return typeof e == "string" ? e : e && e.toString !== {}.toString ? String(e) : typeof e == "function" && e.name !== (() => {
    }).name ? `function ${e.name}` : "<unnamed ref or enum>";
  }
  constructor(e) {
    ke(this, "typeConfigs", /* @__PURE__ */ new Map()), ke(this, "fields", /* @__PURE__ */ new Map()), ke(this, "refs", /* @__PURE__ */ new Set()), ke(this, "implementors", /* @__PURE__ */ new Map()), ke(this, "pendingActions", []), ke(this, "paramAssociations", /* @__PURE__ */ new Map()), ke(this, "pendingTypeConfigResolutions", /* @__PURE__ */ new Map()), ke(this, "pending", !0), ke(this, "builder", void 0), this.builder = e;
  }
}
function He(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Tu = Os;
class Eu {
  onConfig(e) {
    this.pendingActions.push(e);
  }
  updateConfig(e) {
    this.pendingActions.push(e);
  }
  getConfig(e, n, r) {
    const i = this.pendingActions.reduce((s, o) => {
      var a;
      return (a = o(s)) !== null && a !== void 0 ? a : s;
    }, this.initConfig(e, n, r));
    for (const s of this.onUseCallbacks)
      this.onUseCallbacks.delete(s), s(i);
    return i;
  }
  onFirstUse(e) {
    this.onUseCallbacks.add(e);
  }
  constructor(e) {
    He(this, "kind", "Arg"), He(this, "fieldName", void 0), He(this, "$inferInput", void 0), He(this, Tu, void 0), He(this, "pendingActions", []), He(this, "initConfig", void 0), He(this, "onUseCallbacks", /* @__PURE__ */ new Set()), this.initConfig = e;
  }
}
function Ke(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let wu = Os;
class Su {
  updateConfig(e) {
    this.pendingActions.push(e);
  }
  getConfig(e, n) {
    const r = this.pendingActions.reduce((i, s) => {
      var o;
      return (o = s(i)) !== null && o !== void 0 ? o : i;
    }, this.initConfig(e, n));
    for (const i of this.onUseCallbacks)
      this.onUseCallbacks.delete(i), i(r);
    return r;
  }
  onFirstUse(e) {
    this.onUseCallbacks.add(e);
  }
  constructor(e) {
    Ke(this, "kind", "InputObject"), Ke(this, "fieldName", void 0), Ke(this, "$inferInput", void 0), Ke(this, wu, void 0), Ke(this, "pendingActions", []), Ke(this, "initConfig", void 0), Ke(this, "onUseCallbacks", /* @__PURE__ */ new Set()), this.initConfig = e;
  }
}
function de(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class mr {
  argBuilder() {
    const e = this.field.bind(this), n = Object.keys(Object.getPrototypeOf(this)).filter((r) => typeof this[r] == "function" && Function.prototype[r] === void 0);
    for (const r of [
      ...Object.keys(this),
      ...n
    ])
      e[r] = typeof this[r] == "function" ? this[r].bind(this) : this[r];
    return e;
  }
  /**
  * Create in input field or argument for the current type
  * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
  */
  field(e) {
    return this.kind === "Arg" ? new Eu((r, i, s) => {
      const o = e;
      var a, l;
      return {
        name: r,
        parentField: i,
        kind: this.kind,
        graphqlKind: this.kind,
        parentType: s.name,
        type: _n(o.type, this.builder.configStore, (a = o.required) !== null && a !== void 0 ? a : this.builder.defaultInputFieldRequiredness),
        pothosOptions: o,
        description: o.description,
        deprecationReason: o.deprecationReason,
        defaultValue: o.defaultValue,
        extensions: (l = o.extensions) !== null && l !== void 0 ? l : {}
      };
    }) : new Su((r, i) => {
      const s = e;
      var o, a;
      return {
        name: r,
        parentField: void 0,
        kind: this.kind,
        graphqlKind: this.kind,
        parentType: i.name,
        type: _n(s.type, this.builder.configStore, (o = s.required) !== null && o !== void 0 ? o : this.builder.defaultInputFieldRequiredness),
        pothosOptions: s,
        description: s.description,
        deprecationReason: s.deprecationReason,
        defaultValue: s.defaultValue,
        extensions: (a = s.extensions) !== null && a !== void 0 ? a : {}
      };
    });
  }
  helper(e) {
    return (...n) => {
      const [r = {}] = n;
      return this.field({
        ...r,
        type: e
      });
    };
  }
  constructor(e, n) {
    de(this, "kind", void 0), de(this, "builder", void 0), de(this, "boolean", this.helper("Boolean")), de(this, "float", this.helper("Float")), de(this, "id", this.helper("ID")), de(this, "int", this.helper("Int")), de(this, "string", this.helper("String")), de(this, "booleanList", this.helper([
      "Boolean"
    ])), de(this, "floatList", this.helper([
      "Float"
    ])), de(this, "idList", this.helper([
      "ID"
    ])), de(this, "intList", this.helper([
      "Int"
    ])), de(this, "stringList", this.helper([
      "String"
    ])), de(this, "listRef", (r, i) => {
      var s;
      return new _s(r, (s = i?.required) !== null && s !== void 0 ? s : !0);
    }), this.builder = e, this.kind = n;
  }
}
function We(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Iu = Hl;
class Ou {
  updateConfig(e) {
    this.pendingActions.push(e);
  }
  getConfig(e, n) {
    const r = this.pendingActions.reduce((i, s) => {
      var o;
      return (o = s(i)) !== null && o !== void 0 ? o : i;
    }, this.initConfig(e, n));
    for (const i of this.onUseCallbacks)
      this.onUseCallbacks.delete(i), i(r);
    return r;
  }
  onFirstUse(e) {
    this.onUseCallbacks.add(e);
  }
  constructor(e, n) {
    We(this, "kind", void 0), We(this, "fieldName", void 0), We(this, "$inferType", void 0), We(this, Iu, void 0), We(this, "pendingActions", []), We(this, "initConfig", void 0), We(this, "onUseCallbacks", /* @__PURE__ */ new Set()), this.kind = e, this.initConfig = n;
  }
}
function er(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class _u {
  createField(e) {
    return new Ou(this.kind, (r, i) => {
      var s;
      const o = {};
      if (e.args)
        for (const [c, f] of Object.entries(e.args))
          o[c] = f.getConfig(c, r, i);
      let { resolve: a } = e;
      ((s = e.extensions) === null || s === void 0 ? void 0 : s.pothosExposedField) === r && (a = pn);
      const { subscribe: l } = e;
      var u;
      return {
        kind: this.kind,
        graphqlKind: i.graphqlKind,
        parentType: i.name,
        name: r,
        args: o,
        argMappers: [],
        type: pr(e.type, this.builder.configStore, (u = e.nullable) !== null && u !== void 0 ? u : this.builder.defaultFieldNullability),
        pothosOptions: e,
        extensions: {
          pothosOriginalResolve: a,
          pothosOriginalSubscribe: l,
          ...e.extensions
        },
        description: e.description,
        deprecationReason: e.deprecationReason,
        resolve: a,
        subscribe: l
      };
    });
  }
  exposeField(e, { extensions: n, ...r }) {
    return this.createField({
      ...r,
      extensions: {
        pothosExposedField: e,
        ...n
      },
      resolve: (i) => i[e]
    });
  }
  constructor(e, n, r) {
    er(this, "kind", void 0), er(this, "graphqlKind", void 0), er(this, "builder", void 0), this.builder = e, this.kind = n, this.graphqlKind = r;
  }
}
function Nu(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Un extends _u {
  /**
  * Create a Boolean field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  boolean(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  float(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: "Float"
    });
  }
  /**
  * Create a ID field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  id(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: "ID"
    });
  }
  /**
  * Create a Int field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  int(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: "Int"
    });
  }
  /**
  * Create a String field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  string(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  booleanList(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  floatList(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create a ID list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  idList(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  intList(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  stringList(...e) {
    const [n = {}] = e;
    return this.createField({
      ...n,
      type: [
        "String"
      ]
    });
  }
  /**
  * create a new field for the current type
  * @param {PothosSchemaTypes.FieldOptions} options - options for this field
  */
  field(e) {
    return this.createField(e);
  }
  listRef(e, n) {
    var r;
    return new Ns(e, (r = n?.nullable) !== null && r !== void 0 ? r : !1);
  }
  constructor(...e) {
    super(...e), Nu(this, "arg", new mr(this.builder, "Arg").argBuilder());
  }
}
class xs extends Un {
  /**
  * Create a Boolean field from a boolean property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBoolean(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloat(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: "Float"
    });
  }
  /**
  * Create an ID field from a property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeID(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: "ID"
    });
  }
  /**
  * Create an Int field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeInt(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: "Int"
    });
  }
  /**
  * Create a String field from a string property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeString(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field from a boolean[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBooleanList(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloatList(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create an ID list field from an id[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIDList(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIntList(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field from a string[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeStringList(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, {
      ...r,
      type: [
        "String"
      ]
    });
  }
  /**
  * Create a field that resolves to a property of the corresponding type on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  expose(e, ...n) {
    const [r = {}] = n;
    return this.exposeField(e, r);
  }
}
class sn extends xs {
  constructor(e) {
    super(e, "Interface", "Interface");
  }
}
class on extends Un {
  constructor(e) {
    super(e, "Mutation", "Object");
  }
}
class an extends xs {
  constructor(e) {
    super(e, "Object", "Object");
  }
}
class ln extends Un {
  constructor(e) {
    super(e, "Query", "Object");
  }
}
class un extends Un {
  constructor(e) {
    super(e, "Subscription", "Object");
  }
}
function Rt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Ru = St, Au = Mn;
class ku extends Z {
  constructor(e, n) {
    super("Enum", e, n), Rt(this, "kind", "Enum"), Rt(this, "$inferType", void 0), Rt(this, "$inferInput", void 0), Rt(this, Ru, void 0), Rt(this, Au, void 0);
  }
}
function At(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Fu = St, Cu = Xt;
class xu extends Z {
  addTypes(e) {
    Array.isArray(e) && e.length === 0 || (this.preparedForBuild ? this.updateConfig((n) => ({
      ...n,
      types: [
        ...n.types,
        ...typeof e == "function" ? e() : e
      ]
    })) : this.types.push(() => Array.isArray(e) ? e : e()));
  }
  prepareForBuild() {
    this.preparedForBuild || (super.prepareForBuild(), this.types.length > 0 && this.updateConfig((e) => ({
      ...e,
      types: [
        ...e.types,
        ...this.types.flatMap((n) => n())
      ]
    })));
  }
  constructor(e, n) {
    super("Union", e, n), At(this, "kind", "Union"), At(this, "$inferType", void 0), At(this, Fu, void 0), At(this, Cu, void 0), At(this, "types", []);
  }
}
function Te(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Vn = class dt {
  static registerPlugin(e, n, r) {
    if (!dt.allowPluginReRegistration && dt.plugins[e])
      throw new jn(`Received multiple implementations for plugin ${e}`);
    dt.plugins[e] = n, r && dt.optionNormalizers.set(e, r);
  }
  objectType(e, n, r) {
    Ae(e), li(n.interfaces);
    var i;
    const s = typeof e == "string" ? e : (i = n.name) !== null && i !== void 0 ? i : e.name, o = e instanceof Z ? e : new rt(s);
    return o.updateConfig({
      kind: "Object",
      graphqlKind: "Object",
      name: s,
      interfaces: [],
      description: n.description,
      extensions: n.extensions,
      isTypeOf: n.isTypeOf,
      pothosOptions: n
    }), n.interfaces && o.addInterfaces(n.interfaces), o !== e && typeof e != "string" && this.configStore.associateParamWithRef(e, o), r && o.addFields(() => r(new an(this))), n.fields && o.addFields(() => {
      const a = new an(this);
      return n.fields(a);
    }), this.configStore.addTypeRef(o), o;
  }
  objectFields(e, n) {
    Ae(e), this.configStore.addFields(e, () => n(new an(this)));
  }
  objectField(e, n, r) {
    Ae(e), this.configStore.addFields(e, () => ({
      [n]: r(new an(this))
    }));
  }
  queryType(...e) {
    const [n = {}, r] = e;
    var i;
    return this.queryRef.updateConfig({
      kind: "Query",
      graphqlKind: "Object",
      name: (i = n.name) !== null && i !== void 0 ? i : "Query",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), n.name && (this.queryRef.name = n.name), this.configStore.addTypeRef(this.queryRef), r && this.queryRef.addFields(() => r(new ln(this))), n.fields && this.queryRef.addFields(() => n.fields(new ln(this))), this.queryRef;
  }
  queryFields(e) {
    this.configStore.addFields(this.queryRef, () => e(new ln(this)));
  }
  queryField(e, n) {
    this.configStore.addFields(this.queryRef, () => ({
      [e]: n(new ln(this))
    }));
  }
  mutationType(...e) {
    const [n = {}, r] = e;
    var i;
    return this.mutationRef.updateConfig({
      kind: "Mutation",
      graphqlKind: "Object",
      name: (i = n.name) !== null && i !== void 0 ? i : "Mutation",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), this.configStore.addTypeRef(this.mutationRef), n.name && (this.mutationRef.name = n.name), r && this.configStore.addFields(this.mutationRef, () => r(new on(this))), n.fields && this.configStore.addFields(this.mutationRef, () => n.fields(new on(this))), this.mutationRef;
  }
  mutationFields(e) {
    this.configStore.addFields(this.mutationRef, () => e(new on(this)));
  }
  mutationField(e, n) {
    this.configStore.addFields(this.mutationRef, () => ({
      [e]: n(new on(this))
    }));
  }
  subscriptionType(...e) {
    const [n = {}, r] = e;
    var i;
    return this.subscriptionRef.updateConfig({
      kind: "Subscription",
      graphqlKind: "Object",
      name: (i = n.name) !== null && i !== void 0 ? i : "Subscription",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), this.configStore.addTypeRef(this.subscriptionRef), n.name && (this.subscriptionRef.name = n.name), r && this.configStore.addFields(this.subscriptionRef, () => r(new un(this))), n.fields && this.configStore.addFields(this.subscriptionRef, () => n.fields(new un(this))), this.subscriptionRef;
  }
  subscriptionFields(e) {
    this.configStore.addFields(this.subscriptionRef, () => e(new un(this)));
  }
  subscriptionField(e, n) {
    this.configStore.addFields(this.subscriptionRef, () => ({
      [e]: n(new un(this))
    }));
  }
  args(e) {
    return e(new mr(this, "Arg"));
  }
  interfaceType(e, n, r) {
    Ae(e), li(n.interfaces);
    var i;
    const s = typeof e == "string" ? e : (i = n.name) !== null && i !== void 0 ? i : e.name, o = e instanceof Z ? e : new Rn(s), a = o.name;
    return o.updateConfig({
      kind: "Interface",
      graphqlKind: "Interface",
      name: a,
      interfaces: [],
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions,
      resolveType: n.resolveType
    }), this.configStore.addTypeRef(o), n.interfaces && o.addInterfaces(n.interfaces), o !== e && typeof e != "string" && this.configStore.associateParamWithRef(e, o), r && this.configStore.addFields(o, () => r(new sn(this))), n.fields && this.configStore.addFields(o, () => n.fields(new sn(this))), o;
  }
  interfaceFields(e, n) {
    Ae(e), this.configStore.addFields(e, () => n(new sn(this)));
  }
  interfaceField(e, n, r) {
    Ae(e), this.configStore.addFields(e, () => ({
      [n]: r(new sn(this))
    }));
  }
  unionType(e, n) {
    const r = new xu(e, {
      kind: "Union",
      graphqlKind: "Union",
      name: e,
      types: [],
      description: n.description,
      resolveType: n.resolveType,
      pothosOptions: n,
      extensions: n.extensions
    });
    if (Array.isArray(n.types))
      for (const i of n.types)
        Ae(i);
    return this.configStore.addTypeRef(r), r.addTypes(n.types), r;
  }
  enumType(e, n) {
    Ae(e);
    const r = typeof e == "string" ? e : n.name, i = typeof e == "object" ? Xl(e, n?.values) : Yl(n.values), s = new ku(r, {
      kind: "Enum",
      graphqlKind: "Enum",
      name: r,
      values: i,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    });
    return this.configStore.addTypeRef(s), typeof e != "string" && this.configStore.associateParamWithRef(e, s), s;
  }
  scalarType(e, n) {
    const r = new Rs(e, {
      kind: "Scalar",
      graphqlKind: "Scalar",
      name: e,
      description: n.description,
      parseLiteral: n.parseLiteral,
      parseValue: n.parseValue,
      serialize: n.serialize,
      pothosOptions: n,
      extensions: n.extensions
    });
    return this.configStore.addTypeRef(r), r;
  }
  addScalarType(e, n, ...r) {
    const [i = {}] = r, s = n.toConfig();
    return this.scalarType(e, {
      ...s,
      ...i,
      extensions: {
        ...s.extensions,
        ...i.extensions
      }
    });
  }
  inputType(e, n) {
    Ae(e);
    const r = typeof e == "string" ? e : e.name, i = typeof e == "string" ? new Nn(r) : e;
    return i.updateConfig({
      kind: "InputObject",
      graphqlKind: "InputObject",
      name: r,
      isOneOf: n.isOneOf,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), this.configStore.addTypeRef(i), e !== i && typeof e != "string" && this.configStore.associateParamWithRef(e, i), this.configStore.addInputFields(i, () => n.fields(new mr(this, "InputObject"))), i;
  }
  inputRef(e) {
    return new fu(this, e);
  }
  objectRef(e) {
    return new yu(this, e);
  }
  interfaceRef(e) {
    return new hu(this, e);
  }
  toSchema(...e) {
    const [n = {}] = e, { directives: r, extensions: i } = n, s = [
      Ln,
      Dn,
      Er,
      V,
      X
    ];
    for (const h of s)
      this.configStore.hasImplementation(h.name) || this.addScalarType(h.name, h);
    const o = new uu(this, n);
    o.plugin.beforeBuild(), o.buildAll();
    const a = [
      ...o.types.values()
    ], l = this.configStore.hasConfig(this.queryRef) ? this.configStore.getTypeConfig(this.queryRef).name : "Query", u = this.configStore.hasConfig(this.mutationRef) ? this.configStore.getTypeConfig(this.mutationRef).name : "Mutation", c = this.configStore.hasConfig(this.subscriptionRef) ? this.configStore.getTypeConfig(this.subscriptionRef).name : "Subscription", f = new Or({
      query: o.types.get(l),
      mutation: o.types.get(u),
      subscription: o.types.get(c),
      extensions: i ?? {},
      directives: r,
      types: a
    }), d = o.plugin.afterBuild(f);
    return n.sortSchema === !1 ? d : wl(d);
  }
  constructor(e) {
    Te(this, "$inferSchemaTypes", void 0), Te(this, "queryRef", new Fs("Query")), Te(this, "mutationRef", new ks("Mutation")), Te(this, "subscriptionRef", new Cs("Subscription")), Te(this, "configStore", void 0), Te(this, "options", void 0), Te(this, "defaultFieldNullability", void 0), Te(this, "defaultInputFieldRequiredness", void 0), this.options = [
      ...dt.optionNormalizers.values()
    ].reduce((i, s) => e.defaults && typeof s[e.defaults] == "function" ? Object.assign(i, s[e.defaults](i)) : i, e), this.configStore = new vu(this);
    var n;
    this.defaultFieldNullability = (n = e.defaultFieldNullability) !== null && n !== void 0 ? n : e.defaults !== "v3";
    var r;
    this.defaultInputFieldRequiredness = (r = e.defaultInputFieldRequiredness) !== null && r !== void 0 ? r : !1;
  }
};
Te(Vn, "plugins", {});
Te(Vn, "optionNormalizers", /* @__PURE__ */ new Map());
Te(Vn, "allowPluginReRegistration", !1);
const Du = Vn, Ve = {
  red: "\x1B[31m",
  yellow: "\x1B[33m",
  magenta: "\x1B[35m",
  cyan: "\x1B[36m",
  reset: "\x1B[0m"
}, ci = Ve.yellow + "WARN" + Ve.reset, fi = Ve.cyan + "INFO" + Ve.reset, di = Ve.red + "ERR" + Ve.reset, pi = Ve.magenta + "DEBUG" + Ve.reset, kt = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3,
  silent: 4
}, cn = () => {
}, qn = (t) => (...e) => console.log(t, ...e), Lu = console.debug ? (...t) => console.debug(pi, ...t) : qn(pi), $u = console.info ? (...t) => console.info(fi, ...t) : qn(fi), Pu = console.warn ? (...t) => console.warn(ci, ...t) : qn(ci), ju = console.error ? (...t) => console.error(di, ...t) : qn(di), tr = (t = globalThis.process?.env.DEBUG === "1" ? "debug" : "info") => {
  const e = kt[t];
  return {
    debug: e > kt.debug ? cn : Lu,
    info: e > kt.info ? cn : $u,
    warn: e > kt.warn ? cn : Pu,
    error: e > kt.error ? cn : ju
  };
}, Mu = '<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/graphql-hive/graphql-yoga/main/website/public/favicon.ico><link crossorigin rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.4.0/dist/graphiql.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from"https://unpkg.com/@graphql-yoga/graphiql@4.4.0/dist/yoga-graphiql.es.js";renderYogaGraphiQL(root,__OPTS__)<\/script></body></html>';
function Uu({ headers: t, method: e }) {
  return e === "GET" && !!t?.get("accept")?.includes("text/html");
}
const Vu = (t) => Mu.replace("__TITLE__", t?.title || "Yoga GraphiQL").replace("__OPTS__", JSON.stringify(t ?? {}));
function qu(t) {
  const e = t.logger ?? console;
  let n;
  typeof t?.options == "function" ? n = t?.options : typeof t?.options == "object" ? n = () => t?.options : t?.options === !1 ? n = () => !1 : n = () => ({});
  const r = t?.render ?? Vu;
  let i;
  const s = ({ URLPattern: o }) => (i ||= new o({
    pathname: t.graphqlEndpoint
  }), i);
  return {
    onRequest({ request: o, serverContext: a, fetchAPI: l, endResponse: u, url: c }) {
      if (Uu(o) && (o.url.endsWith(t.graphqlEndpoint) || o.url.endsWith(`${t.graphqlEndpoint}/`) || c.pathname === t.graphqlEndpoint || c.pathname === `${t.graphqlEndpoint}/` || s(l).test(c)))
        return e.debug("Rendering GraphiQL"), A(() => n(o, a), (f) => {
          if (f)
            return A(() => r({
              ...f === !0 ? {} : f
            }), (d) => {
              const h = new l.Response(d, {
                headers: {
                  "Content-Type": "text/html"
                },
                status: 200
              });
              u(h);
            });
        });
    }
  };
}
const Bu = (t) => {
  if (t == null)
    return {};
  if (fs(t))
    return {
      onPluginInit({ setSchema: n }) {
        n(t);
      }
    };
  if ("then" in t) {
    let n;
    return {
      onRequestParse() {
        return {
          onRequestParseDone() {
            if (!n)
              return A(() => t, (r) => {
                n = r;
              });
          }
        };
      },
      onEnveloped({ setSchema: r }) {
        if (!n)
          throw new Error("You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.");
        r(n);
      }
    };
  }
  const e = /* @__PURE__ */ new WeakMap();
  return {
    onRequestParse({ request: n, serverContext: r }) {
      return {
        onRequestParseDone() {
          return A(() => t({
            ...r,
            request: n
          }), (i) => {
            e.set(n, i);
          });
        }
      };
    },
    onEnveloped({ setSchema: n, context: r }) {
      if (r?.request == null)
        throw new Error("Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.");
      const i = e.get(r.request);
      if (i == null)
        throw new Error("No schema found for this request. Make sure you use this plugin with GraphQL Yoga.");
      n(i);
    }
  };
}, Ds = 3;
function ce(t) {
  return Bn(t, []);
}
function Bn(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return Gu(t, e);
    default:
      return String(t);
  }
}
function hi(t) {
  return (t.name = "GraphQLError") ? t.toString() : `${t.name}: ${t.message};
 ${t.stack}`;
}
function Gu(t, e) {
  if (t === null)
    return "null";
  if (t instanceof Error)
    return t.name === "AggregateError" ? hi(t) + `
` + gi(t.errors, e) : hi(t);
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (Qu(t)) {
    const r = t.toJSON();
    if (r !== t)
      return typeof r == "string" ? r : Bn(r, n);
  } else if (Array.isArray(t))
    return gi(t, n);
  return Hu(t, n);
}
function Qu(t) {
  return typeof t.toJSON == "function";
}
function Hu(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > Ds ? "[" + Ku(t) + "]" : "{ " + n.map(([i, s]) => i + ": " + Bn(s, e)).join(", ") + " }";
}
function gi(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > Ds)
    return "[Array]";
  const n = t.length, r = [];
  for (let i = 0; i < n; ++i)
    r.push(Bn(t[i], e));
  return "[" + r.join(", ") + "]";
}
function Ku(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
const Wu = [
  "message",
  "locations",
  "path",
  "nodes",
  "source",
  "positions",
  "originalError",
  "name",
  "stack",
  "extensions"
];
function zu(t) {
  return t != null && typeof t == "object" && Object.keys(t).every((e) => Wu.includes(e));
}
function C(t, e) {
  return e?.originalError && !(e.originalError instanceof Error) && zu(e.originalError) && (e.originalError = C(e.originalError.message, e.originalError)), Zi.major >= 17 ? new v(t, e) : new v(t, e?.nodes, e?.source, e?.positions, e?.path, e?.originalError, e?.extensions);
}
function Ju(t) {
  return t != null && typeof t == "object" && Symbol.iterator in t;
}
function Ls(t) {
  return typeof t == "object" && t !== null;
}
function Yu(t, e, n) {
  let r = n;
  for (const i of t)
    r = A(() => r, (s) => e(s, i));
  return r;
}
function $s(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function Ps(t, e, n = {}) {
  const r = {}, s = (e.arguments ?? []).reduce((o, a) => ({
    ...o,
    [a.name.value]: a
  }), {});
  for (const { name: o, type: a, defaultValue: l } of t.args) {
    const u = s[o];
    if (!u) {
      if (l !== void 0)
        r[o] = l;
      else if (j(a))
        throw C(`Argument "${o}" of required type "${ce(a)}" was not provided.`, {
          nodes: [e]
        });
      continue;
    }
    const c = u.value;
    let f = c.kind === p.NULL;
    if (c.kind === p.VARIABLE) {
      const h = c.name.value;
      if (n == null || !$s(n, h)) {
        if (l !== void 0)
          r[o] = l;
        else if (j(a))
          throw C(`Argument "${o}" of required type "${ce(a)}" was provided the variable "$${h}" which was not provided a runtime value.`, {
            nodes: [c]
          });
        continue;
      }
      f = n[h] == null;
    }
    if (f && j(a))
      throw C(`Argument "${o}" of non-null type "${ce(a)}" must not be null.`, {
        nodes: [c]
      });
    const d = Ze(c, a, n);
    if (d === void 0)
      throw C(`Argument "${o}" has invalid value ${J(c)}.`, {
        nodes: [c]
      });
    r[o] = d;
  }
  return r;
}
function js(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(r) {
    const i = e.get(r);
    if (i === void 0) {
      const s = t(r);
      return e.set(r, s), s;
    }
    return i;
  };
}
function Xu(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(r, i, s) {
    let o = e.get(r);
    if (!o) {
      o = /* @__PURE__ */ new WeakMap(), e.set(r, o);
      const u = /* @__PURE__ */ new WeakMap();
      o.set(i, u);
      const c = t(r, i, s);
      return u.set(s, c), c;
    }
    let a = o.get(i);
    if (!a) {
      a = /* @__PURE__ */ new WeakMap(), o.set(i, a);
      const u = t(r, i, s);
      return a.set(s, u), u;
    }
    const l = a.get(s);
    if (l === void 0) {
      const u = t(r, i, s);
      return a.set(s, u), u;
    }
    return l;
  };
}
function Zu(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(r, i, s, o, a) {
    let l = e.get(r);
    if (!l) {
      l = /* @__PURE__ */ new WeakMap(), e.set(r, l);
      const h = /* @__PURE__ */ new WeakMap();
      l.set(i, h);
      const g = /* @__PURE__ */ new WeakMap();
      h.set(s, g);
      const T = /* @__PURE__ */ new WeakMap();
      g.set(o, T);
      const F = t(r, i, s, o, a);
      return T.set(a, F), F;
    }
    let u = l.get(i);
    if (!u) {
      u = /* @__PURE__ */ new WeakMap(), l.set(i, u);
      const h = /* @__PURE__ */ new WeakMap();
      u.set(s, h);
      const g = /* @__PURE__ */ new WeakMap();
      h.set(o, g);
      const T = t(r, i, s, o, a);
      return g.set(a, T), T;
    }
    let c = u.get(s);
    if (!c) {
      c = /* @__PURE__ */ new WeakMap(), u.set(s, c);
      const h = /* @__PURE__ */ new WeakMap();
      c.set(o, h);
      const g = t(r, i, s, o, a);
      return h.set(a, g), g;
    }
    let f = c.get(o);
    if (!f) {
      f = /* @__PURE__ */ new WeakMap(), c.set(o, f);
      const h = t(r, i, s, o, a);
      return f.set(a, h), h;
    }
    const d = f.get(a);
    if (d === void 0) {
      const h = t(r, i, s, o, a);
      return f.set(a, h), h;
    }
    return d;
  };
}
function ec(t, e, n) {
  const i = tc(t).get(e);
  if (i == null)
    throw C(`Schema is not configured to execute ${e} operation.`, {
      nodes: n
    });
  return i;
}
const tc = js(function(e) {
  const n = /* @__PURE__ */ new Map(), r = e.getQueryType();
  r && n.set("query", r);
  const i = e.getMutationType();
  i && n.set("mutation", i);
  const s = e.getSubscriptionType();
  return s && n.set("subscription", s), n;
});
class An extends Map {
  get [Symbol.toStringTag]() {
    return "AccumulatorMap";
  }
  add(e, n) {
    const r = this.get(e);
    r === void 0 ? this.set(e, [n]) : r.push(n);
  }
}
const nc = new De({
  name: "defer",
  description: "Directs the executor to defer this fragment when the `if` argument is true or undefined.",
  locations: [k.FRAGMENT_SPREAD, k.INLINE_FRAGMENT],
  args: {
    if: {
      type: new L(X),
      description: "Deferred when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: V,
      description: "Unique name"
    }
  }
}), rc = new De({
  name: "stream",
  description: "Directs the executor to stream plural fields when the `if` argument is true or undefined.",
  locations: [k.FIELD],
  args: {
    if: {
      type: new L(X),
      description: "Stream when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: V,
      description: "Unique name"
    },
    initialCount: {
      defaultValue: 0,
      type: Dn,
      description: "Number of items to return immediately"
    }
  }
});
function gt(t, e, n, r, i, s, o, a) {
  for (const l of i.selections)
    switch (l.kind) {
      case p.FIELD: {
        if (!nr(n, l))
          continue;
        s.add(ic(l), l);
        break;
      }
      case p.INLINE_FRAGMENT: {
        if (!nr(n, l) || !mi(t, l, r))
          continue;
        const u = yi(n, l);
        if (u) {
          const c = new An();
          gt(t, e, n, r, l.selectionSet, c, o, a), o.push({
            label: u.label,
            fields: c
          });
        } else
          gt(t, e, n, r, l.selectionSet, s, o, a);
        break;
      }
      case p.FRAGMENT_SPREAD: {
        const u = l.name.value;
        if (!nr(n, l))
          continue;
        const c = yi(n, l);
        if (a.has(u) && !c)
          continue;
        const f = e[u];
        if (!f || !mi(t, f, r))
          continue;
        if (c || a.add(u), c) {
          const d = new An();
          gt(t, e, n, r, f.selectionSet, d, o, a), o.push({
            label: c.label,
            fields: d
          });
        } else
          gt(t, e, n, r, f.selectionSet, s, o, a);
        break;
      }
    }
}
function Ms(t, e, n, r, i) {
  const s = new An(), o = [];
  return gt(t, e, n, r, i, s, o, /* @__PURE__ */ new Set()), { fields: s, patches: o };
}
function nr(t, e) {
  return !(Et(Sr, e, t)?.if === !0 || Et(wr, e, t)?.if === !1);
}
function mi(t, e, n) {
  const r = e.typeCondition;
  if (!r)
    return !0;
  const i = fe(t, r);
  return i === n ? !0 : Ce(i) ? t.getPossibleTypes(i).includes(n) : !1;
}
function ic(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function yi(t, e) {
  const n = Et(nc, e, t);
  if (n && n.if !== !1)
    return {
      label: typeof n.label == "string" ? n.label : void 0
    };
}
const sc = Zu(function(e, n, r, i, s) {
  const o = new An(), a = /* @__PURE__ */ new Set(), l = [], u = {
    fields: o,
    patches: l
  };
  for (const c of s)
    c.selectionSet && gt(e, n, r, i, c.selectionSet, o, l, a);
  return u;
});
function Gn(t) {
  return t?.[Symbol.asyncIterator] != null;
}
function It(t, e, n) {
  return { prev: t, key: e, typename: n };
}
function ee(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function oc(t) {
  return t.map((e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e).join("");
}
class ac extends Error {
  error;
  suppressed;
  // eslint-disable-next-line n/handle-callback-err
  constructor(e, n, r) {
    super(r), this.error = e, this.suppressed = n, this.name = "SuppressedError", Error.captureStackTrace(this, this.constructor);
  }
}
const ie = {
  get dispose() {
    return Symbol.dispose || Symbol.for("dispose");
  },
  get asyncDispose() {
    return Symbol.asyncDispose || Symbol.for("asyncDispose");
  }
};
function lc(t) {
  return t?.[ie.dispose] != null;
}
function uc(t) {
  return t?.[ie.asyncDispose] != null;
}
const cc = globalThis.SuppressedError || ac;
class xr {
  callbacks = [];
  get disposed() {
    return this.callbacks.length === 0;
  }
  use(e) {
    return uc(e) ? this.callbacks.push(() => e[ie.asyncDispose]()) : lc(e) && this.callbacks.push(() => e[ie.dispose]()), e;
  }
  adopt(e, n) {
    return n && this.callbacks.push(() => n(e)), e;
  }
  defer(e) {
    e && this.callbacks.push(e);
  }
  move() {
    const e = new xr();
    return e.callbacks = this.callbacks, this.callbacks = [], e;
  }
  disposeAsync() {
    return this[ie.asyncDispose]();
  }
  _error;
  _iterateCallbacks() {
    const e = this.callbacks.pop();
    if (e)
      return A(e, () => this._iterateCallbacks(), (n) => (this._error = this._error ? new cc(n, this._error) : n, this._iterateCallbacks()));
  }
  [ie.asyncDispose]() {
    const e = this._iterateCallbacks();
    if (e?.then)
      return e.then(() => {
        if (this._error) {
          const n = this._error;
          throw this._error = void 0, n;
        }
      });
    if (this._error) {
      const n = this._error;
      throw this._error = void 0, n;
    }
  }
  [Symbol.toStringTag] = "AsyncDisposableStack";
}
const fc = globalThis.AsyncDisposableStack || xr;
function Ne(t) {
  if (t instanceof Error)
    return t;
  if (typeof t == "object" && t != null && "message" in t && typeof t.message == "string") {
    let e;
    "cause" in t && (e = { cause: t.cause });
    const n = new Error(t.message, e);
    return "stack" in t && typeof t.stack == "string" && (n.stack = t.stack), "name" in t && typeof t.name == "string" && (n.name = t.name), n;
  }
  return new Error(String(t));
}
function dc(t) {
  const e = t[Symbol.asyncIterator]();
  let n, r, i = !1;
  async function s() {
    if (i)
      return { value: void 0, done: !0 };
    try {
      if (!n) {
        if (r)
          return await r, await s();
        let l;
        r = new Promise((c) => {
          l = c;
        });
        const u = await e.next();
        return u.done ? (i = !0, await s()) : (n = u.value[Symbol.asyncIterator](), r = void 0, l(), await s());
      }
      const o = n, a = await n.next();
      return a.done ? (n === o && (n = void 0), await s()) : a;
    } catch (o) {
      throw i = !0, o;
    }
  }
  return {
    next: s,
    async return() {
      return i = !0, await Promise.all([n?.return?.(), e.return?.()]), { value: void 0, done: !0 };
    },
    async throw(o) {
      throw i = !0, await Promise.all([n?.throw?.(o), e.throw?.(o)]), o;
    },
    [Symbol.asyncIterator]() {
      return this;
    },
    async [ie.asyncDispose]() {
      i = !0, await Promise.all([
        n?.[ie.asyncDispose]?.(),
        e?.[ie.asyncDispose]?.()
      ]);
    }
  };
}
function bi(t, e) {
  if (!t)
    throw new Error(e ?? "Unexpected invariant triggered.");
}
function vi(t, e, n) {
  e?.throwIfAborted();
  const r = /* @__PURE__ */ Object.create(null), i = [];
  for (const o in t) {
    const a = A(() => t[o], (l) => {
      r[o] = l;
    });
    q(a) && i.push(a);
  }
  if (!i.length)
    return r;
  const s = i.length === 1 ? i[0] : Promise.all(i);
  return n ? Promise.race([n, s]).then(() => r) : s.then(() => r);
}
function pc(t, e, n, r) {
  const i = [], s = r?.maxErrors;
  try {
    const o = hc(t, e, n, (a) => {
      if (s != null && i.length >= s)
        throw C("Too many errors processing variables, error limit reached. Execution aborted.");
      i.push(a);
    });
    if (i.length === 0)
      return { coerced: o };
  } catch (o) {
    i.push(o);
  }
  return { errors: i };
}
function hc(t, e, n, r) {
  const i = {};
  for (const s of e) {
    const o = s.variable.name.value, a = fe(t, s.type);
    if (!Oe(a)) {
      const u = J(s.type);
      r(C(`Variable "$${o}" expected value of type "${u}" which cannot be used as an input type.`, { nodes: s.type }));
      continue;
    }
    if (!$s(n, o)) {
      if (s.defaultValue)
        i[o] = Ze(s.defaultValue, a);
      else if (j(a)) {
        const u = ce(a);
        r(C(`Variable "$${o}" of required type "${u}" was not provided.`, {
          nodes: s
        }));
      }
      continue;
    }
    const l = n[o];
    if (l === null && j(a)) {
      const u = ce(a);
      r(C(`Variable "$${o}" of non-null type "${u}" must not be null.`, {
        nodes: s
      }));
      continue;
    }
    i[o] = Ya(l, a, (u, c, f) => {
      let d = `Variable "$${o}" got invalid value ` + ce(c);
      u.length > 0 && (d += ` at "${o}${oc(u)}"`), r(C(d + "; " + f.message, {
        nodes: s,
        originalError: f
      }));
    });
  }
  return i;
}
const gc = Xu((t, e, n) => sc(t.schema, t.fragments, t.variableValues, e, n));
function mc(t) {
  const e = Vs(t);
  return "schema" in e ? Us(e) : {
    errors: e.map((n) => (Object.defineProperty(n, "extensions", {
      value: {
        ...n.extensions,
        http: {
          ...n.extensions?.http || {},
          status: 400
        }
      }
    }), n))
  };
}
function Us(t) {
  return t.signal?.throwIfAborted(), A(() => vc(t), (e) => {
    const n = Ti(e, t.errors);
    return t.subsequentPayloads.size > 0 ? {
      initialResult: {
        ...n,
        hasNext: !0
      },
      subsequentResults: $c(t)
    } : n;
  }, (e) => (t.signal?.throwIfAborted(), e.errors ? t.errors.push(...e.errors) : t.errors.push(e), Ti(null, t.errors)));
}
function Ti(t, e) {
  return e.length === 0 ? { data: t } : { errors: e, data: t };
}
const yc = js(function(e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r of e.definitions)
    r.kind === p.FRAGMENT_DEFINITION && (n[r.name.value] = r);
  return n;
});
function Vs(t) {
  const { schema: e, document: n, rootValue: r, contextValue: i, variableValues: s, operationName: o, fieldResolver: a, typeResolver: l, subscribeFieldResolver: u, signal: c } = t;
  c?.throwIfAborted(), ds(e);
  const f = yc(n);
  let d;
  for (const w of n.definitions)
    switch (w.kind) {
      case p.OPERATION_DEFINITION:
        if (o == null) {
          if (d !== void 0)
            return [
              C("Must provide operation name if query contains multiple operations.", {
                extensions: {
                  code: "OPERATION_RESOLUTION_FAILURE"
                }
              })
            ];
          d = w;
        } else w.name?.value === o && (d = w);
        break;
    }
  if (d == null)
    return o != null ? [
      C(`Unknown operation named "${o}".`, {
        extensions: {
          code: "OPERATION_RESOLUTION_FAILURE"
        }
      })
    ] : [
      C("Must provide an operation.", {
        extensions: {
          code: "OPERATION_RESOLUTION_FAILURE"
        }
      })
    ];
  const h = d.variableDefinitions ?? [], g = pc(e, h, s ?? {}, {
    maxErrors: 50
  });
  if (g.errors)
    return g.errors;
  c?.throwIfAborted();
  let T, F;
  if (c) {
    const w = /* @__PURE__ */ new Set(), D = Ss();
    F = D.promise;
    const E = () => {
      D.reject(c.reason), c.removeEventListener("abort", E);
    };
    c.addEventListener("abort", E, { once: !0 }), F.catch(() => {
      for (const _ of w)
        _();
      w.clear();
    }), T = (_) => {
      w.add(_);
    };
  }
  return {
    schema: e,
    fragments: f,
    rootValue: r,
    contextValue: i,
    operation: d,
    variableValues: g.coerced,
    fieldResolver: a ?? Ii,
    typeResolver: l ?? _c,
    subscribeFieldResolver: u ?? Ii,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: [],
    signal: c,
    onSignalAbort: T,
    signalPromise: F
  };
}
function bc(t, e) {
  return {
    ...t,
    rootValue: e,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: []
  };
}
function vc(t) {
  const { operation: e, schema: n, fragments: r, variableValues: i, rootValue: s } = t, o = ec(n, e.operation, [e]);
  o == null && C(`Schema is not configured to execute ${e.operation} operation.`, {
    nodes: e
  });
  const { fields: a, patches: l } = Ms(n, r, i, o, e.selectionSet), u = void 0;
  let c;
  e.operation === "mutation" ? c = Tc(t, o, s, u, a) : c = Dr(t, o, s, u, a);
  for (const f of l) {
    const { label: d, fields: h } = f;
    Ks(t, o, s, h, d, u);
  }
  return c;
}
function Tc(t, e, n, r, i) {
  return Yu(i, (s, [o, a]) => {
    const l = It(r, o, e.name);
    return t.signal?.throwIfAborted(), A(() => qs(t, e, n, a, l), (u) => (u === void 0 || (s[o] = u), s));
  }, /* @__PURE__ */ Object.create(null));
}
function Dr(t, e, n, r, i, s) {
  const o = /* @__PURE__ */ Object.create(null);
  let a = !1;
  try {
    for (const [l, u] of i) {
      t.signal?.throwIfAborted();
      const c = It(r, l, e.name), f = qs(t, e, n, u, c, s);
      f !== void 0 && (o[l] = f, q(f) && (a = !0));
    }
  } catch (l) {
    if (l !== t.signal?.reason && a)
      return A(() => vi(o, t.signal), () => {
        throw l;
      }, () => {
        throw l;
      });
    throw l;
  }
  return a ? vi(o, t.signal, t.signalPromise) : o;
}
function qs(t, e, n, r, i, s) {
  const o = s?.errors ?? t.errors, a = zs(t.schema, e, r[0]);
  if (!a)
    return;
  const l = a.type, u = a.resolve ?? t.fieldResolver, c = Bs(t, a, r, e, i);
  try {
    t.signal?.throwIfAborted();
    const f = Ps(a, r[0], t.variableValues), d = t.contextValue, h = u(n, f, d, c);
    let g;
    return q(h) ? g = h.then((T) => qe(t, l, r, c, i, T, s)) : g = qe(t, l, r, c, i, h, s), q(g) ? g.then(void 0, (T) => {
      if (T instanceof AggregateError) {
        let D;
        for (let E of T.errors) {
          E = Ne(E);
          const _ = ae(E, r, ee(i));
          D = me(_, l, o), le(t, i, s);
        }
        return D;
      }
      T = Ne(T);
      const F = ae(T, r, ee(i)), w = me(F, l, o);
      return le(t, i, s), w;
    }) : g;
  } catch (f) {
    if (f instanceof AggregateError) {
      let T;
      for (let F of f.errors) {
        F = Ne(F);
        const w = ae(F, r, ee(i));
        T = me(w, l, o), le(t, i, s);
      }
      return T;
    }
    const d = Ne(f), h = ae(d, r, ee(i)), g = me(h, l, o);
    return le(t, i, s), g;
  }
}
function Bs(t, e, n, r, i) {
  return {
    fieldName: e.name,
    fieldNodes: n,
    returnType: e.type,
    parentType: r,
    path: i,
    schema: t.schema,
    fragments: t.fragments,
    rootValue: t.rootValue,
    operation: t.operation,
    variableValues: t.variableValues,
    signal: t.signal
  };
}
const Ec = "CRITICAL_ERROR";
function me(t, e, n) {
  if (j(e) || t.extensions?.[Ec])
    throw t;
  return n.push(t), null;
}
function qe(t, e, n, r, i, s, o) {
  if (s instanceof Error)
    throw s;
  if (j(e)) {
    const a = qe(t, e.ofType, n, r, i, s, o);
    if (a === null)
      throw new Error(`Cannot return null for non-nullable field ${r.parentType.name}.${r.fieldName}.`);
    return a;
  }
  if (s == null)
    return null;
  if (ne(e))
    return Sc(t, e, n, r, i, s, o);
  if (Me(e))
    return Ic(e, s);
  if (Ce(e))
    return Oc(t, e, n, r, i, s, o);
  if (H(e))
    return yr(t, e, n, r, i, s, o);
  console.assert(!1, "Cannot complete value of unexpected output type: " + ce(e));
}
function Gs(t, e, n) {
  if (typeof n.key == "number")
    return;
  const r = Et(rc, e[0], t.variableValues);
  if (r && r.if !== !1)
    return bi(typeof r.initialCount == "number", "initialCount must be a number"), bi(r.initialCount >= 0, "initialCount must be a positive integer"), {
      initialCount: r.initialCount,
      label: typeof r.label == "string" ? r.label : void 0
    };
}
async function wc(t, e, n, r, i, s, o) {
  t.signal?.throwIfAborted(), s.return && t.onSignalAbort?.(() => {
    s.return?.();
  });
  const a = o?.errors ?? t.errors, l = Gs(t, n, i);
  let u = !1;
  const c = [];
  let f = 0;
  for (; ; ) {
    if (l && typeof l.initialCount == "number" && f >= l.initialCount) {
      Dc(f, s, t, n, r, e, i, l.label, o);
      break;
    }
    const d = It(i, f, void 0);
    let h;
    try {
      if (h = await s.next(), h.done)
        break;
    } catch (g) {
      const T = Ne(g), F = ae(T, n, ee(d));
      c.push(me(F, e, a));
      break;
    }
    Qs(h.value, c, a, t, e, n, r, d, o) && (u = !0), f += 1;
  }
  return u ? Promise.all(c) : c;
}
function Sc(t, e, n, r, i, s, o) {
  const a = e.ofType, l = o?.errors ?? t.errors;
  if (Gn(s)) {
    const g = s[Symbol.asyncIterator]();
    return wc(t, a, n, r, i, g, o);
  }
  if (!Ju(s))
    throw C(`Expected Iterable, but did not find one for field "${r.parentType.name}.${r.fieldName}".`);
  const u = Gs(t, n, i);
  let c = !1, f = o;
  const d = [];
  let h = 0;
  for (const g of s) {
    const T = It(i, h, void 0);
    if (u && typeof u.initialCount == "number" && h >= u.initialCount) {
      f = Cc(i, T, g, t, n, r, a, u.label, f), h++;
      continue;
    }
    Qs(g, d, l, t, a, n, r, T, o) && (c = !0), h++;
  }
  return c ? Promise.all(d) : d;
}
function Qs(t, e, n, r, i, s, o, a, l) {
  try {
    let u;
    if (q(t) ? u = t.then((c) => qe(r, i, s, o, a, c, l)) : u = qe(r, i, s, o, a, t, l), q(u))
      return e.push(u.then(void 0, (c) => {
        c = Ne(c);
        const f = ae(c, s, ee(a)), d = me(f, i, n);
        return le(r, a, l), d;
      })), !0;
    e.push(u);
  } catch (u) {
    const c = Ne(u), f = ae(c, s, ee(a)), d = me(f, i, n);
    le(r, a, l), e.push(d);
  }
  return !1;
}
function Ic(t, e) {
  let n;
  try {
    n = t.serialize(e);
  } catch (r) {
    throw r instanceof v ? new Error(r.message) : r;
  }
  if (n == null)
    throw new Error(`Expected \`${ce(t)}.serialize(${ce(e)})\` to return non-nullable value, returned: ${ce(n)}`);
  return n;
}
function Oc(t, e, n, r, i, s, o) {
  const a = e.resolveType ?? t.typeResolver, l = t.contextValue, u = a(s, l, r, e);
  return q(u) ? u.then((c) => yr(t, Ei(c, t, e, n, r, s), n, r, i, s, o)) : yr(t, Ei(u, t, e, n, r, s), n, r, i, s, o);
}
function Ei(t, e, n, r, i, s) {
  if (t == null)
    throw C(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}". Either the "${n.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, { nodes: r });
  if (H(t)) {
    if (Zi.major >= 16)
      throw C("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");
    t = t.name;
  }
  if (typeof t != "string")
    throw C(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}" with value ${ce(s)}, received "${ce(t)}".`);
  const o = e.schema.getType(t);
  if (o == null)
    throw C(`Abstract type "${n.name}" was resolved to a type "${t}" that does not exist inside the schema.`, { nodes: r });
  if (!H(o))
    throw C(`Abstract type "${n.name}" was resolved to a non-object type "${t}".`, { nodes: r });
  if (!e.schema.isSubType(n, o))
    throw C(`Runtime Object type "${o.name}" is not a possible type for "${n.name}".`, { nodes: r });
  return o;
}
function yr(t, e, n, r, i, s, o) {
  if (e.isTypeOf) {
    const a = e.isTypeOf(s, t.contextValue, r);
    if (q(a))
      return a.then((l) => {
        if (!l)
          throw wi(e, s, n);
        return Si(t, e, n, i, s, o);
      });
    if (!a)
      throw wi(e, s, n);
  }
  return Si(t, e, n, i, s, o);
}
function wi(t, e, n) {
  return C(`Expected value of type "${t.name}" but got: ${ce(e)}.`, {
    nodes: n
  });
}
function Si(t, e, n, r, i, s) {
  const { fields: o, patches: a } = gc(t, e, n), l = Dr(t, e, i, r, o, s);
  for (const u of a) {
    const { label: c, fields: f } = u;
    Ks(t, e, i, f, c, r, s);
  }
  return l;
}
const _c = function(t, e, n, r) {
  if (Ls(t) && typeof t.__typename == "string")
    return t.__typename;
  const i = n.schema.getPossibleTypes(r), s = [];
  for (let o = 0; o < i.length; o++) {
    const a = i[o];
    if (a.isTypeOf) {
      const l = a.isTypeOf(t, e, n);
      if (q(l))
        s[o] = l;
      else if (l)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return i[a].name;
    });
}, Ii = function(t, e, n, r) {
  if (Ls(t) || typeof t == "function") {
    const i = t[r.fieldName];
    return typeof i == "function" ? t[r.fieldName](e, n, r) : i;
  }
};
function Nc(t) {
  const e = Vs(t);
  if (!("schema" in e)) {
    for (const r of e) {
      const i = r.extensions ||= {}, s = i.http ||= {};
      s.status = 400, r.extensions.code = "BAD_USER_INPUT";
    }
    return {
      errors: e
    };
  }
  const n = kc(e);
  return q(n) ? n.then((r) => Oi(e, r)) : Oi(e, n);
}
function Rc(t) {
  return t?.initialResult;
}
function Hs(t) {
  const e = t.subsequentResults;
  let n = !1, r = !1;
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next() {
      return r ? G({ value: void 0, done: r }) : n ? e.next() : (n = !0, G({
        value: t.initialResult,
        done: r
      }));
    },
    return() {
      return r = !0, e.return();
    },
    throw(i) {
      return r = !0, e.throw(i);
    },
    [ie.asyncDispose]() {
      return r = !0, e?.[ie.asyncDispose]?.();
    }
  };
}
async function* Ac(t) {
  "initialResult" in t ? yield* Hs(t) : yield t;
}
function Oi(t, e) {
  return Gn(e) ? dc(Sn(e, (n) => A(() => Us(bc(t, n)), Ac), (n) => {
    throw n instanceof AggregateError ? new AggregateError(n.errors.map((r) => _i(r, t.operation)), n.message) : _i(n, t.operation);
  })) : e;
}
function _i(t, e) {
  return C(t.message, {
    originalError: t,
    nodes: [e]
  });
}
function kc(t) {
  try {
    const e = Fc(t);
    return q(e) ? e.then(void 0, (n) => ({ errors: [n] })) : e;
  } catch (e) {
    return { errors: [e] };
  }
}
function Fc(t) {
  const { schema: e, fragments: n, operation: r, variableValues: i, rootValue: s } = t, o = e.getSubscriptionType();
  if (o == null)
    throw C("Schema is not configured to execute subscription operation.", {
      nodes: r
    });
  const { fields: a } = Ms(e, n, i, o, r.selectionSet), [l, u] = [...a.entries()][0], c = u[0].name.value, f = zs(e, o, u[0]);
  if (!f)
    throw C(`The subscription field "${c}" is not defined.`, {
      nodes: u
    });
  const d = It(void 0, l, o.name), h = Bs(t, f, u, o, d);
  try {
    const g = Ps(f, u[0], i), T = t.contextValue, w = (f.subscribe ?? t.subscribeFieldResolver)(s, g, T, h);
    return q(w) ? w.then((D) => Ni(D, t.signal, t.onSignalAbort)).then(void 0, (D) => {
      throw ae(D, u, ee(d));
    }) : Ni(w, t.signal, t.onSignalAbort);
  } catch (g) {
    throw ae(g, u, ee(d));
  }
}
function Ni(t, e, n) {
  if (e?.throwIfAborted(), t instanceof Error)
    throw t;
  if (!Gn(t))
    throw C(`Subscription field must return Async Iterable. Received: ${ce(t)}.`);
  return n ? {
    [Symbol.asyncIterator]() {
      const r = t[Symbol.asyncIterator]();
      return r.return && n?.(() => {
        r.return?.();
      }), r;
    }
  } : t;
}
function Ks(t, e, n, r, i, s, o) {
  const a = new Pc({
    label: i,
    path: s,
    parentContext: o,
    exeContext: t
  });
  let l;
  try {
    l = Dr(t, e, n, s, r, a), q(l) && (l = l.then(null, (u) => (a.errors.push(u), null)));
  } catch (u) {
    a.errors.push(u), l = null;
  }
  a.addData(l);
}
function Cc(t, e, n, r, i, s, o, a, l) {
  const u = new Ws({
    label: a,
    path: e,
    parentContext: l,
    exeContext: r
  });
  let c;
  try {
    try {
      q(n) ? c = n.then((d) => qe(r, o, i, s, e, d, u)) : c = qe(r, o, i, s, e, n, u), q(c) && (c = c.then(void 0, (d) => {
        d = Ne(d);
        const h = ae(d, i, ee(e)), g = me(h, o, u.errors);
        return le(r, e, u), g;
      }));
    } catch (d) {
      const h = Ne(d), g = ae(h, i, ee(e));
      c = me(g, o, u.errors), le(r, e, u);
    }
  } catch (d) {
    return u.errors.push(d), le(r, t, u), u.addItems(null), u;
  }
  let f;
  return q(c) ? f = c.then((d) => [d], (d) => (u.errors.push(d), le(r, t, u), null)) : f = [c], u.addItems(f), u;
}
async function xc(t, e, n, r, i, s, o) {
  let a;
  try {
    const { value: u, done: c } = await t.next();
    if (c)
      return s.setIsCompletedIterator(), { done: c, value: void 0 };
    a = u;
  } catch (u) {
    const c = Ne(u), f = ae(c, n, ee(o));
    return { done: !0, value: me(f, i, s.errors) };
  }
  let l;
  try {
    return l = qe(e, i, n, r, o, a, s), q(l) && (l = l.then(void 0, (u) => {
      const c = ae(u, n, ee(o)), f = me(c, i, s.errors);
      return le(e, o, s), f;
    })), { done: !1, value: l };
  } catch (u) {
    const c = ae(u, n, ee(o)), f = me(c, i, s.errors);
    return le(e, o, s), { done: !1, value: f };
  }
}
async function Dc(t, e, n, r, i, s, o, a, l) {
  let u = t, c = l ?? void 0;
  for (; ; ) {
    const f = It(o, u, void 0), d = new Ws({
      label: a,
      path: f,
      parentContext: c,
      iterator: e,
      exeContext: n
    });
    let h;
    try {
      h = await xc(e, n, r, i, s, d, f);
    } catch (w) {
      d.errors.push(w), le(n, o, d), d.addItems(null), e?.return && e.return().catch(() => {
      });
      return;
    }
    const { done: g, value: T } = h;
    let F;
    if (q(T) ? F = T.then((w) => [w], (w) => (d.errors.push(w), le(n, o, d), null)) : F = [T], d.addItems(F), g)
      break;
    c = d, u++;
  }
}
function le(t, e, n) {
  const r = ee(e);
  t.subsequentPayloads.forEach((i) => {
    if (i !== n) {
      for (let s = 0; s < r.length; s++)
        if (i.path[s] !== r[s])
          return;
      Lr(i) && i.iterator?.return && i.iterator.return().catch(() => {
      }), t.subsequentPayloads.delete(i);
    }
  });
}
function Lc(t) {
  const e = [];
  for (const n of t.subsequentPayloads) {
    const r = {};
    if (n.isCompleted) {
      if (t.subsequentPayloads.delete(n), Lr(n)) {
        const i = n.items;
        if (n.isCompletedIterator)
          continue;
        r.items = i;
      } else {
        const i = n.data;
        r.data = i ?? null;
      }
      r.path = n.path, n.label && (r.label = n.label), n.errors.length > 0 && (r.errors = n.errors), e.push(r);
    }
  }
  return e;
}
function $c(t) {
  let e = !1;
  async function n() {
    if (e)
      return { value: void 0, done: !0 };
    const i = Array.from(t.subsequentPayloads).map((a) => a.promise);
    if (t.signalPromise ? await Promise.race([t.signalPromise, ...i]) : await Promise.race(i), e)
      return { value: void 0, done: !0 };
    const s = Lc(t), o = t.subsequentPayloads.size > 0;
    return !s.length && o ? n() : (o || (e = !0), {
      value: s.length ? { incremental: s, hasNext: o } : { hasNext: o },
      done: !1
    });
  }
  function r() {
    const i = [];
    return t.subsequentPayloads.forEach((s) => {
      Lr(s) && s.iterator?.return && i.push(s.iterator.return());
    }), Promise.all(i);
  }
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next: n,
    async return() {
      return await r(), e = !0, { value: void 0, done: !0 };
    },
    async throw(i) {
      throw await r(), e = !0, i;
    },
    async [ie.asyncDispose]() {
      await r(), e = !0;
    }
  };
}
class Pc {
  type;
  errors;
  label;
  path;
  promise;
  data;
  parentContext;
  isCompleted;
  _exeContext;
  _resolve;
  constructor(e) {
    this.type = "defer", this.label = e.label, this.path = ee(e.path), this.parentContext = e.parentContext, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.data = null, this.promise = new Promise((n) => {
      this._resolve = (r) => {
        n(r);
      };
    }).then((n) => {
      this.data = n, this.isCompleted = !0;
    });
  }
  addData(e) {
    const n = this.parentContext?.promise;
    if (n) {
      this._resolve?.(n.then(() => e));
      return;
    }
    this._resolve?.(e);
  }
}
class Ws {
  type;
  errors;
  label;
  path;
  items;
  promise;
  parentContext;
  iterator;
  isCompletedIterator;
  isCompleted;
  _exeContext;
  _resolve;
  constructor(e) {
    this.type = "stream", this.items = null, this.label = e.label, this.path = ee(e.path), this.parentContext = e.parentContext, this.iterator = e.iterator, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.items = null, this.promise = new Promise((n) => {
      this._resolve = (r) => {
        n(r);
      };
    }).then((n) => {
      this.items = n, this.isCompleted = !0;
    });
  }
  addItems(e) {
    const n = this.parentContext?.promise;
    if (n) {
      this._resolve?.(n.then(() => e));
      return;
    }
    this._resolve?.(e);
  }
  setIsCompletedIterator() {
    this.isCompletedIterator = !0;
  }
}
function Lr(t) {
  return t.type === "stream";
}
function zs(t, e, n) {
  const r = n.name.value;
  return r === yn.name && t.getQueryType() === e ? yn : r === bn.name && t.getQueryType() === e ? bn : r === vn.name ? vn : e.getFields()[r];
}
function Ri(t) {
  const e = kr(t.document, t.operationName);
  if (e == null)
    throw new Error("Must provide an operation.");
  return e.operation === "subscription" ? Nc(t) : A(() => mc(t), (n) => Rc(n) ? Hs(n) : n);
}
var B = {}, Ai;
function jc() {
  return Ai || (Ai = 1, B.fetch = globalThis.fetch, B.Headers = globalThis.Headers, B.Request = globalThis.Request, B.Response = globalThis.Response, B.FormData = globalThis.FormData, B.ReadableStream = globalThis.ReadableStream, B.WritableStream = globalThis.WritableStream, B.TransformStream = globalThis.TransformStream, B.CompressionStream = globalThis.CompressionStream, B.DecompressionStream = globalThis.DecompressionStream, B.TextDecoderStream = globalThis.TextDecoderStream, B.TextEncoderStream = globalThis.TextEncoderStream, B.Blob = globalThis.Blob, B.File = globalThis.File, B.crypto = globalThis.crypto, B.btoa = globalThis.btoa, B.TextEncoder = globalThis.TextEncoder, B.TextDecoder = globalThis.TextDecoder, B.URLPattern = globalThis.URLPattern, B.URL = globalThis.URL, B.URLSearchParams = globalThis.URLSearchParams, B.createFetch = () => globalThis), B;
}
var Qn = /* @__PURE__ */ jc();
const Mc = /* @__PURE__ */ Go(Qn), Js = /* @__PURE__ */ Qo({
  __proto__: null,
  default: Mc
}, [Qn]);
function Ys(t) {
  return t != null && typeof t == "object" && typeof t[Symbol.asyncIterator] == "function";
}
function Uc(t) {
  if (t.socket?.localPort)
    return t.socket?.localPort;
  const n = (t.headers?.[":authority"] || t.headers?.host)?.split(":")?.[1];
  return n || 80;
}
function Vc(t) {
  if (t.headers?.[":authority"])
    return t.headers?.[":authority"];
  if (t.headers?.host)
    return t.headers?.host;
  const e = Uc(t);
  if (t.hostname)
    return t.hostname + ":" + e;
  const n = t.socket?.localAddress;
  return n && !n?.includes("::") && !n?.includes("ffff") ? `${n}:${e}` : "localhost";
}
function qc(t) {
  const e = Vc(t), n = t.protocol || (t.socket?.encrypted ? "https" : "http"), r = t.originalUrl || t.url || "/graphql";
  return `${n}://${e}${r}`;
}
function Bc(t) {
  const e = t[Symbol.toStringTag];
  return !!(typeof t == "string" || e === "Uint8Array" || e === "Blob" || e === "FormData" || e === "URLSearchParams" || Ys(t));
}
function ki(t, e, n, r) {
  const i = t.raw || t.req || t;
  let s = qc(i);
  if (t.query) {
    const u = new e.URL(s);
    for (const c in t.query)
      u.searchParams.set(c, t.query[c]);
    s = u.toString();
  }
  let o = t.headers;
  if (t.headers?.[":method"]) {
    o = {};
    for (const u in t.headers)
      u.startsWith(":") || (o[u] = t.headers[u]);
  }
  const a = r ? Zs() : new AbortController();
  if (n?.once) {
    const u = () => {
      a.signal.aborted || (Object.defineProperty(i, "aborted", { value: !0 }), a.abort(n.errored ?? void 0));
    };
    n.once("error", u), n.once("close", u), n.once("finish", () => {
      n.removeListener("close", u);
    });
  }
  if (t.method === "GET" || t.method === "HEAD")
    return new e.Request(s, {
      method: t.method,
      headers: o,
      signal: a.signal
    });
  const l = t.body;
  if (l != null && Object.keys(l).length > 0) {
    if (Bc(l))
      return new e.Request(s, {
        method: t.method || "GET",
        headers: o,
        body: l,
        signal: a.signal
      });
    const u = new e.Request(s, {
      method: t.method || "GET",
      headers: o,
      signal: a.signal
    });
    return u.headers.get("content-type")?.includes("json") || u.headers.set("content-type", "application/json; charset=utf-8"), new Proxy(u, {
      get: (c, f, d) => {
        switch (f) {
          case "json":
            return () => G(l);
          case "text":
            return () => G(JSON.stringify(l));
          default:
            return globalThis.Bun ? Reflect.get(c, f) : Reflect.get(c, f, d);
        }
      }
    });
  }
  return new e.Request(s, {
    method: t.method,
    headers: o,
    signal: a.signal,
    // @ts-expect-error - AsyncIterable is supported as body
    body: i,
    duplex: "half"
  });
}
function Xs(t) {
  return t.read != null;
}
function Gc(t) {
  return Xs(t);
}
function Fi(t) {
  return t != null && t.setHeader != null && t.end != null && t.once != null && t.write != null;
}
function Qc(t) {
  return t != null && t.getReader != null;
}
function Hc(t) {
  return t != null && t.request != null && t.respondWith != null;
}
function Kc(t) {
  t?.socket?.setTimeout?.(0), t?.socket?.setNoDelay?.(!0), t?.socket?.setKeepAlive?.(!0);
}
function Je(t) {
  t.end(null, null, null);
}
function Wc(t, e) {
  let n = !1;
  const r = () => {
    n = !0;
  };
  t.once("error", r), t.once("close", r), t.once("finish", () => {
    t.removeListener("close", r), t.removeListener("error", r);
  });
  const i = e[Symbol.asyncIterator](), s = () => i.next().then(({ done: o, value: a }) => {
    if (!(n || o))
      return A(() => Vt(a, t), () => n ? Je(t) : s());
  });
  return s();
}
function Vt(t, e) {
  if (!e.write(t))
    return new Promise((r) => e.once("drain", r));
}
function zc(t, e, n, r) {
  if (e.closed || e.destroyed || e.writableEnded)
    return;
  if (!t) {
    e.statusCode = 404, Je(e);
    return;
  }
  if (r && // @ts-expect-error - headersInit is a private property
  t.headers?.headersInit && // @ts-expect-error - headersInit is a private property
  !Array.isArray(t.headers.headersInit) && // @ts-expect-error - headersInit is a private property
  !t.headers.headersInit.get && // @ts-expect-error - map is a private property
  !t.headers._map && // @ts-expect-error - _setCookies is a private property
  !t.headers._setCookies?.length)
    e.writeHead(
      t.status,
      t.statusText,
      // @ts-expect-error - headersInit is a private property
      t.headers.headersInit
    );
  else {
    if (e.setHeaders)
      e.setHeaders(t.headers);
    else {
      let o = !1;
      t.headers.forEach((a, l) => {
        if (l === "set-cookie") {
          if (o)
            return;
          o = !0;
          const u = t.headers.getSetCookie?.();
          if (u) {
            e.setHeader("set-cookie", u);
            return;
          }
        }
        e.setHeader(l, a);
      });
    }
    e.writeHead(t.status, t.statusText);
  }
  if (t.bodyType === "String")
    return A(
      // @ts-expect-error - bodyInit is a private property
      () => Vt(t.bodyInit, e),
      () => Je(e)
    );
  const i = (
    // @ts-expect-error - _buffer is a private property
    t._buffer
  );
  if (i)
    return A(() => Vt(i, e), () => Je(e));
  const s = t.body;
  if (s == null) {
    Je(e);
    return;
  }
  if (
    // @ts-expect-error - Uint8Array is a valid body type
    s[Symbol.toStringTag] === "Uint8Array"
  )
    return A(() => Vt(s, e), () => Je(e));
  if (Kc(n), Xs(s)) {
    e.once("close", () => {
      s.destroy();
    }), s.pipe(e, {
      end: !0
    });
    return;
  }
  if (Qc(s))
    return Jc(n, e, s);
  if (Ys(s))
    return Wc(e, s);
}
function Jc(t, e, n) {
  const r = n.getReader();
  t?.once?.("error", (s) => {
    r.cancel(s);
  });
  function i() {
    return r.read().then(({ done: s, value: o }) => s ? Je(e) : A(() => Vt(o, e), i));
  }
  return i();
}
function Yc(t) {
  return t != null && typeof t == "object" && ("body" in t || "cache" in t || "credentials" in t || "headers" in t || "integrity" in t || "keepalive" in t || "method" in t || "mode" in t || "redirect" in t || "referrer" in t || "referrerPolicy" in t || "signal" in t || "window" in t);
}
function pt(...t) {
  const [e, ...n] = t.filter((r) => r != null && typeof r == "object");
  return n.forEach((r) => {
    const i = Object.getOwnPropertyNames(r).reduce((s, o) => (Object.getOwnPropertyDescriptor(r, o) && (s[o] = Object.getOwnPropertyDescriptor(r, o)), s), {});
    Object.getOwnPropertySymbols(r).forEach((s) => {
      const o = Object.getOwnPropertyDescriptor(r, s);
      o?.enumerable && (i[s] = o);
    }), Object.defineProperties(e, i);
  }), e;
}
function Ci(t, e) {
  return new e(t.stack || t.message || t.toString(), {
    status: t.status || 500
  });
}
function xi(t, e) {
  return t == null ? e == null ? {} : {
    waitUntil: e
  } : pt(Object.create(t), {
    waitUntil: e
  }, t);
}
function Di(t, e) {
  if (e?.aborted)
    throw e.reason;
  if (q(t) && e) {
    let r = function() {
      n.reject(e.reason);
    };
    const n = Ss();
    return e.addEventListener("abort", r, { once: !0 }), t.then(function(s) {
      n.resolve(s);
    }).catch(function(s) {
      n.reject(s);
    }).finally(() => {
      e.removeEventListener("abort", r);
    }), n.promise;
  }
  return t;
}
const Xc = ["SIGINT", "exit", "SIGTERM"], hn = /* @__PURE__ */ new Set();
let Li = !1;
function Zc() {
  if (!Li) {
    Li = !0;
    for (const t of Xc)
      globalThis.process.once(t, function() {
        return Promise.allSettled([...hn].map((n) => !n.disposed && n.disposeAsync()));
      });
  }
}
function ef(t) {
  globalThis.process && (Zc(), hn.has(t) || (hn.add(t), t.defer(() => {
    hn.delete(t);
  })));
}
class tf extends EventTarget {
  aborted = !1;
  _onabort = null;
  _reason;
  constructor() {
    super();
    const e = globalThis.process?.getBuiltinModule?.("node:events");
    e?.kMaxEventTargetListeners && (this[e.kMaxEventTargetListeners] = 0);
  }
  throwIfAborted() {
    if (this._nativeCtrl?.signal?.throwIfAborted)
      return this._nativeCtrl.signal.throwIfAborted();
    if (this.aborted)
      throw this._reason;
  }
  _nativeCtrl;
  ensureNativeCtrl() {
    if (!this._nativeCtrl) {
      const e = this.aborted;
      this._nativeCtrl = new AbortController(), e && this._nativeCtrl.abort(this._reason);
    }
    return this._nativeCtrl;
  }
  abort(e) {
    if (this._nativeCtrl?.abort)
      return this._nativeCtrl?.abort(e);
    this._reason = e || new DOMException("This operation was aborted", "AbortError"), this.aborted = !0, this.dispatchEvent(new Event("abort"));
  }
  get signal() {
    return this._nativeCtrl?.signal ? this._nativeCtrl.signal : this;
  }
  get reason() {
    return this._nativeCtrl?.signal ? this._nativeCtrl.signal.reason : this._reason;
  }
  get onabort() {
    return this._onabort ? this._onabort : this._onabort;
  }
  set onabort(e) {
    if (this._nativeCtrl?.signal) {
      this._nativeCtrl.signal.onabort = e;
      return;
    }
    this._onabort && this.removeEventListener("abort", this._onabort), this._onabort = e, e && this.addEventListener("abort", e);
  }
}
function Zs() {
  return globalThis.Bun || globalThis.Deno ? new AbortController() : new Proxy(new tf(), {
    get(t, e, n) {
      if (e.toString().includes("kDependantSignals")) {
        const r = t.ensureNativeCtrl();
        return Reflect.get(r.signal, e, r.signal);
      }
      return Reflect.get(t, e, n);
    },
    set(t, e, n, r) {
      if (e.toString().includes("kDependantSignals")) {
        const i = t.ensureNativeCtrl();
        return Reflect.set(i.signal, e, n, i.signal);
      }
      return Reflect.set(t, e, n, r);
    },
    getPrototypeOf() {
      return AbortSignal.prototype;
    }
  });
}
function nf(t) {
  return !!t.onData;
}
function rf({ req: t, res: e, fetchAPI: n, controller: r }) {
  const i = t.getMethod();
  let s;
  const o = [], a = [
    (S) => {
      o.push(S);
    }
  ], l = (S) => {
    for (const I of a)
      I(S);
  };
  let u = !1;
  const c = [
    () => {
      u = !0;
    }
  ], f = () => {
    for (const S of c)
      S();
  };
  e.onData(function(S, I) {
    l(Buffer.from(Buffer.from(S, 0, S.byteLength))), I && f();
  });
  let d;
  if (i !== "get" && i !== "head") {
    s = "half", r.signal.addEventListener("abort", () => {
      f();
    }, { once: !0 });
    let S;
    d = () => (S || (S = new n.ReadableStream({
      start(I) {
        for (const $ of o)
          I.enqueue($);
        if (u) {
          I.close();
          return;
        }
        a.push(($) => {
          I.enqueue($);
        }), c.push(() => {
          if (r.signal.reason) {
            I.error(r.signal.reason);
            return;
          }
          I.desiredSize && I.close();
        });
      }
    })), S);
  }
  const h = new n.Headers();
  t.forEach((S, I) => {
    h.append(S, I);
  });
  let g = `http://localhost${t.getUrl()}`;
  const T = t.getQuery();
  T && (g += `?${T}`);
  let F;
  function w() {
    return d ? u ? E() : d() : null;
  }
  const D = new n.Request(g, {
    method: i,
    headers: h,
    get body() {
      return w();
    },
    signal: r.signal,
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - not in the TS types yet
    duplex: s
  });
  function E() {
    return F || (F = o.length === 1 ? o[0] : Buffer.concat(o)), F;
  }
  function _() {
    return u ? G(E()) : new Promise((S, I) => {
      try {
        c.push(() => {
          S(E());
        });
      } catch ($) {
        I($);
      }
    });
  }
  return Object.defineProperties(D, {
    body: {
      get() {
        return w();
      },
      configurable: !0,
      enumerable: !0
    },
    json: {
      value() {
        return _().then((S) => S.toString("utf8")).then((S) => JSON.parse(S));
      },
      configurable: !0,
      enumerable: !0
    },
    text: {
      value() {
        return _().then((S) => S.toString("utf8"));
      },
      configurable: !0,
      enumerable: !0
    },
    arrayBuffer: {
      value() {
        return _();
      },
      configurable: !0,
      enumerable: !0
    }
  }), D;
}
function sf(t, e) {
  return new e.WritableStream({
    write(n) {
      t.cork(() => {
        t.write(n);
      });
    },
    close() {
      t.cork(() => {
        t.end();
      });
    }
  });
}
function of(t, e, n, r) {
  if (!e) {
    t.writeStatus("404 Not Found"), t.end();
    return;
  }
  const i = e._buffer;
  if (!n.signal.aborted && (t.cork(() => {
    t.writeStatus(`${e.status} ${e.statusText}`);
    for (const [s, o] of e.headers)
      if (s !== "content-length") {
        if (s === "set-cookie") {
          const a = e.headers.getSetCookie?.();
          if (a) {
            for (const l of a)
              t.writeHeader(s, l);
            continue;
          }
        }
        t.writeHeader(s, o);
      }
    i ? t.end(i) : e.body || t.end();
  }), !(i || !e.body)))
    return n.signal.addEventListener("abort", () => {
      e.body?.locked || e.body?.cancel(n.signal.reason);
    }, { once: !0 }), e.body.pipeTo(sf(t, r), {
      signal: n.signal
    }).catch((s) => {
      if (!n.signal.aborted)
        throw s;
    });
}
function af(t) {
  try {
    return !!t?.request;
  } catch {
    return !1;
  }
}
const lf = {};
function uf(t, e) {
  const n = e?.__useSingleWriteHead == null ? !0 : e.__useSingleWriteHead, r = {
    ...Js,
    ...e?.fetchAPI
  }, i = e?.__useCustomAbortCtrl == null ? r.Request !== globalThis.Request : e.__useCustomAbortCtrl, s = typeof t == "function" ? t : t.handle, o = [], a = [];
  let l;
  const u = /* @__PURE__ */ new Set();
  let c;
  function f() {
    return c || (c = new fc(), e?.disposeOnProcessTerminate && ef(c), c.defer(() => {
      if (u.size > 0)
        return Promise.allSettled(u).then(() => {
          u.clear();
        }, () => {
          u.clear();
        });
    })), c;
  }
  function d(m) {
    q(m) && (f(), u.add(m), m.then(() => {
      u.delete(m);
    }, (y) => {
      console.error(`Unexpected error while waiting: ${y.message || y}`), u.delete(m);
    }));
  }
  if (e?.plugins != null)
    for (const m of e.plugins) {
      m.instrumentation && (l = l ? Cr(l, m.instrumentation) : m.instrumentation), m.onRequest && o.push(m.onRequest), m.onResponse && a.push(m.onResponse);
      const y = m[ie.dispose];
      y && f().defer(y);
      const b = m[ie.asyncDispose];
      b && f().defer(b), m.onDispose && f().defer(m.onDispose);
    }
  let h = o.length > 0 || a.length > 0 ? function(y, b) {
    let N = s, x;
    if (o.length === 0)
      return Y();
    let P = y.parsedUrl || new Proxy(lf, {
      get(Q, se, ye) {
        return P = new r.URL(y.url, "http://localhost"), Reflect.get(P, se, P);
      }
    });
    function U(Q) {
      return a.length === 0 ? Q : A(() => oe(a, (se) => se({
        request: y,
        response: Q,
        serverContext: b,
        setResponse(ye) {
          Q = ye;
        },
        fetchAPI: r
      })), () => Q);
    }
    function Y() {
      return x ? U(x) : A(() => N(y, b), U);
    }
    return A(() => oe(o, (Q, se) => Q({
      request: y,
      setRequest(ye) {
        y = ye;
      },
      serverContext: b,
      fetchAPI: r,
      url: P,
      requestHandler: N,
      setRequestHandler(ye) {
        N = ye;
      },
      endResponse(ye) {
        x = ye, ye && se();
      }
    })), Y);
  } : s;
  if (l?.request) {
    const m = h;
    h = (y, b) => In({ request: y }).asyncFn(l.request, m)(y, b);
  }
  function g(m, ...y) {
    const b = y.length > 1 ? pt(...y) : y[0] || {};
    b.waitUntil || (b.waitUntil = d);
    const N = ki(m, r, void 0, i);
    return h(N, b);
  }
  function T(m, y, ...b) {
    const N = y.raw || y, x = b.length > 1 ? pt(...b) : b[0] || {};
    x.waitUntil || (x.waitUntil = d);
    const P = ki(m, r, N, i);
    return h(P, x);
  }
  function F(m, y, ...b) {
    const N = {
      req: m,
      res: y,
      waitUntil: d
    };
    return Fr(G().then(() => T(m, y, N, ...b)).catch((x) => Ci(x, r.Response)).then((x) => zc(x, y, m, n)).catch((x) => console.error(`Unexpected error while handling request: ${x.message || x}`)));
  }
  function w(m, y, ...b) {
    const N = {
      res: m,
      req: y,
      waitUntil: d
    }, P = b.filter((be) => be != null).length > 0 ? pt(N, ...b) : N, U = i ? Zs() : new AbortController(), Y = m.end.bind(m);
    let Q = !1;
    m.end = function(be) {
      return Q = !0, Y(be);
    }, m.onAborted.bind(m)(function() {
      U.abort();
    }), m.onAborted = function(be) {
      U.signal.addEventListener("abort", be, { once: !0 });
    };
    const ye = rf({
      req: y,
      res: m,
      fetchAPI: r,
      controller: U
    });
    return A(() => A(() => h(ye, P), (be) => be, (be) => Ci(be, r.Response)), (be) => {
      if (!U.signal.aborted && !Q)
        return A(() => of(m, be, U, r), (en) => en, (en) => {
          console.error(`Unexpected error while handling request: ${en.message || en}`);
        });
    });
  }
  function D(m, ...y) {
    if (!m.respondWith || !m.request)
      throw new TypeError(`Expected FetchEvent, got ${m}`);
    const b = y.filter((P) => P != null), N = b.length > 0 ? pt({}, m, ...b) : xi(m), x = h(m.request, N);
    m.respondWith(x);
  }
  function E(m, ...y) {
    const b = y.filter((x) => x != null), N = b.length > 1 ? pt({}, ...b) : xi(b[0], b[0] == null || b[0].waitUntil == null ? d : void 0);
    return h(m, N);
  }
  const _ = (m, ...y) => {
    if (typeof m == "string" || "href" in m) {
      const [N, ...x] = y;
      if (Yc(N)) {
        const U = new r.Request(m, N), Y = E(U, ...x), Q = N.signal;
        return Q ? Di(Y, Q) : Y;
      }
      const P = new r.Request(m);
      return E(P, ...y);
    }
    const b = E(m, ...y);
    return Di(b, m.signal);
  }, S = (m, ...y) => {
    const [b, ...N] = y;
    if (Gc(m)) {
      if (!Fi(b))
        throw new TypeError(`Expected ServerResponse, got ${b}`);
      return F(m, b, ...N);
    }
    if (nf(m))
      return w(m, b, ...N);
    if (Fi(b))
      throw new TypeError("Got Node response without Node request");
    return af(m) ? Hc(m) ? D(m, ...y) : E(m.request, m, ...y) : _(m, ...y);
  }, I = {
    handleRequest: E,
    fetch: _,
    handleNodeRequest: g,
    handleNodeRequestAndResponse: T,
    requestListener: F,
    handleEvent: D,
    handleUWS: w,
    handle: S,
    get disposableStack() {
      return f();
    },
    [ie.asyncDispose]() {
      return c && !c.disposed ? c.disposeAsync() : G();
    },
    dispose() {
      return c && !c.disposed ? c.disposeAsync() : G();
    },
    waitUntil: d
  }, $ = new Proxy(S, {
    // It should have all the attributes of the handler function and the server instance
    has: (m, y) => y in I || y in S || t && y in t,
    get: (m, y) => {
      if (globalThis.Deno || y === Symbol.asyncDispose || y === Symbol.dispose) {
        const x = Reflect.get(I, y, I);
        if (x)
          return x;
      }
      const b = I[y];
      if (b)
        return b.bind ? b.bind(I) : b;
      const N = S[y];
      if (N)
        return N.bind ? N.bind(S) : N;
      if (t) {
        const x = t[y];
        if (x)
          return x.bind ? function(...P) {
            const U = t[y](...P);
            return U === t ? $ : U;
          } : x;
      }
    },
    apply(m, y, b) {
      return S(...b);
    }
  });
  return $;
}
function cf(t, e) {
  const n = t.headers.get("origin");
  if (e === !1 || n == null)
    return null;
  const r = {};
  if (e.origin == null || e.origin.length === 0 || e.origin.includes("*") ? (r["Access-Control-Allow-Origin"] = n, r.Vary = "Origin") : typeof e.origin == "string" ? r["Access-Control-Allow-Origin"] = e.origin : Array.isArray(e.origin) && (e.origin.length === 1 ? r["Access-Control-Allow-Origin"] = e.origin[0] : e.origin.includes(n) ? (r["Access-Control-Allow-Origin"] = n, r.Vary = "Origin") : r["Access-Control-Allow-Origin"] = "null"), e.methods?.length)
    r["Access-Control-Allow-Methods"] = e.methods.join(", ");
  else {
    const i = t.headers.get("access-control-request-method");
    i && (r["Access-Control-Allow-Methods"] = i);
  }
  if (e.allowedHeaders?.length)
    r["Access-Control-Allow-Headers"] = e.allowedHeaders.join(", ");
  else {
    const i = t.headers.get("access-control-request-headers");
    i && (r["Access-Control-Allow-Headers"] = i, r.Vary ? r.Vary += ", Access-Control-Request-Headers" : r.Vary = "Access-Control-Request-Headers");
  }
  return e.credentials != null ? e.credentials === !0 && (r["Access-Control-Allow-Credentials"] = "true") : r["Access-Control-Allow-Origin"] !== "*" && (r["Access-Control-Allow-Credentials"] = "true"), e.exposedHeaders && (r["Access-Control-Expose-Headers"] = e.exposedHeaders.join(", ")), e.maxAge && (r["Access-Control-Max-Age"] = e.maxAge.toString()), r;
}
function ff(t, e, n) {
  return A(() => e(t, n), (r) => cf(t, r));
}
function df(t) {
  let e = () => ({});
  if (t != null)
    if (typeof t == "function")
      e = t;
    else if (typeof t == "object") {
      const n = {
        ...t
      };
      e = () => n;
    } else t === !1 && (e = () => !1);
  return {
    onRequest({ request: n, fetchAPI: r, endResponse: i }) {
      if (n.method.toUpperCase() === "OPTIONS") {
        const s = new r.Response(null, {
          status: 204,
          // Safari (and potentially other browsers) need content-length 0,
          // for 204 or they just hang waiting for a body
          // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176
          headers: {
            "Content-Length": "0"
          }
        });
        i(s);
      }
    },
    onResponse({ request: n, serverContext: r, response: i }) {
      return A(() => ff(n, e, r), (s) => {
        if (s != null)
          for (const o in s)
            i.headers.set(o, s[o]);
      });
    }
  };
}
function pf(t) {
  return t != null && typeof t == "object" && "errors" in t;
}
function hf(t) {
  return t != null && typeof t.toString == "function";
}
function it(t) {
  return t instanceof v;
}
function $r(t) {
  return t instanceof v ? t.originalError != null ? $r(t.originalError) : !0 : !1;
}
function eo(t) {
  return typeof t == "object" && t?.constructor?.name === "DOMException" && (t.name === "AbortError" || t.name === "TimeoutError");
}
function gn(t, e, n) {
  const r = /* @__PURE__ */ new Set();
  if (pf(t))
    for (const i of t.errors) {
      const s = gn(i, e, n);
      for (const o of s)
        r.add(o);
    }
  else if (eo(t))
    n.debug("Request aborted");
  else if (e) {
    const i = e.maskError(t, e.errorMessage, e.isDev);
    i !== t && n.error(t), r.add(it(i) ? i : C(i.message, {
      originalError: i
    }));
  } else it(t) ? r.add(t) : t instanceof Error ? r.add(C(t.message, {
    originalError: t
  })) : typeof t == "string" ? r.add(C(t, {
    extensions: {
      code: "INTERNAL_SERVER_ERROR",
      unexpected: !0
    }
  })) : hf(t) ? r.add(C(t.toString(), {
    extensions: {
      code: "INTERNAL_SERVER_ERROR",
      unexpected: !0
    }
  })) : (n.error(t), r.add(C("Unexpected error.", {
    extensions: {
      http: {
        unexpected: !0
      }
    }
  })));
  return Array.from(r);
}
function Pr(t, e = {}, n = !1) {
  let r, i = !1;
  if ("extensions" in t && t.extensions?.http && (t.extensions.http.headers && Object.assign(e, t.extensions.http.headers), t.extensions.http.status && (r = t.extensions.http.status)), "errors" in t && t.errors?.length)
    for (const s of t.errors)
      if (s.extensions?.http) {
        if (s.extensions.http.headers && Object.assign(e, s.extensions.http.headers), n && s.extensions.http.spec)
          continue;
        s.extensions.http.status && (!r || s.extensions.http.status > r) && (r = s.extensions.http.status);
      } else (!$r(s) || s.extensions?.unexpected) && (i = !0);
  else
    r ||= 200;
  return r || (i && !("data" in t) ? r = 500 : r = 200), {
    status: r,
    headers: e
  };
}
function gf(t) {
  return Array.isArray(t) && t.length > 0 && // if one item in the array is a GraphQLError, we're good
  t.some(it);
}
function to(t) {
  const e = t.get("operationName") || void 0, n = t.get("query") || void 0, r = t.get("variables") || void 0, i = t.get("extensions") || void 0;
  return {
    operationName: e,
    query: n,
    variables: r ? JSON.parse(r) : void 0,
    extensions: i ? JSON.parse(i) : void 0
  };
}
function mf(t) {
  const e = new Qn.URLSearchParams(t);
  return to(e);
}
function Kt(t, e) {
  let n = t.headers.get("content-type");
  return n = n?.split(",")[0] || null, n === e || !!n?.startsWith(`${e};`);
}
function yf(t) {
  return t.method === "GET";
}
function bf(t) {
  const e = t.url.substring(t.url.indexOf("?") + 1), n = new Qn.URLSearchParams(e);
  return to(n);
}
function vf(t) {
  return t.method === "POST" && Kt(t, "application/x-www-form-urlencoded");
}
function Tf(t) {
  return t.text().then(mf);
}
function Ef(t) {
  return t.method === "POST" && Kt(t, "application/graphql");
}
function wf(t) {
  return t.text().then((e) => ({ query: e }));
}
function Sf(t) {
  return t.method === "POST" && (Kt(t, "application/json") || Kt(t, "application/graphql+json"));
}
function If(t) {
  return A(() => t.json(), (e) => {
    if (e == null)
      throw C(`POST body is expected to be object but received ${e}`, {
        extensions: {
          http: {
            status: 400
          },
          code: "BAD_REQUEST"
        }
      });
    const n = typeof e;
    if (n !== "object")
      throw C(`POST body is expected to be object but received ${n}`, {
        extensions: {
          http: {
            status: 400
          },
          code: "BAD_REQUEST"
        }
      });
    return e;
  }, (e) => {
    if (e instanceof v)
      throw e;
    const n = {
      http: {
        spec: !0,
        status: 400
      },
      code: "BAD_REQUEST"
    };
    throw e instanceof Error && (n.originalError = {
      name: e.name,
      message: e.message
    }), C("POST body sent invalid JSON.", {
      extensions: n
    });
  });
}
function Of(t, e, n) {
  e.split && (e = e.split("."));
  for (var r = 0, i = e.length, s = t, o, a; r < i && (a = "" + e[r++], !(a === "__proto__" || a === "constructor" || a === "prototype")); )
    s = s[a] = r === i ? n : typeof (o = s[a]) == typeof e ? o : e[r] * 0 !== 0 || ~("" + e[r]).indexOf(".") ? {} : [];
}
function _f(t) {
  return t.method === "POST" && Kt(t, "multipart/form-data");
}
function Nf(t) {
  return A(() => t.formData(), (e) => {
    const n = e.get("operations");
    if (!n)
      throw C('Missing multipart form field "operations"');
    if (typeof n != "string")
      throw C('Multipart form field "operations" must be a string');
    let r;
    try {
      r = JSON.parse(n);
    } catch {
      throw C('Multipart form field "operations" must be a valid JSON string');
    }
    const i = e.get("map");
    if (i != null) {
      if (typeof i != "string")
        throw C('Multipart form field "map" must be a string');
      let s;
      try {
        s = JSON.parse(i);
      } catch {
        throw C('Multipart form field "map" must be a valid JSON string');
      }
      for (const o in s) {
        const a = e.get(o), l = s[o];
        for (const u of l)
          Of(r, u, a);
      }
    }
    return r;
  }, (e) => {
    throw e instanceof Error && e.message.startsWith("File size limit exceeded: ") ? C(e.message, {
      extensions: {
        http: {
          status: 413
        }
      }
    }) : e;
  });
}
const Rf = /* @__PURE__ */ new Set(["query", "variables", "operationName", "extensions"]);
function Af(t, e) {
  if (t == null || typeof t != "object")
    throw C('Invalid "params" in the request body', {
      extensions: {
        http: {
          spec: !0,
          status: 400
        },
        code: "BAD_REQUEST"
      }
    });
  for (const n in t)
    if (t[n] != null && !Rf.has(n)) {
      if (e?.includes(n))
        continue;
      throw C(`Unexpected parameter "${n}" in the request body.`, {
        extensions: {
          http: {
            status: 400
          },
          code: "BAD_REQUEST"
        }
      });
    }
}
function kf(t, e) {
  if (!Cf(t))
    throw C(`Expected params to be an object but given ${Mt(t)}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  if (Af(t, e), t.query == null)
    throw C("Must provide query string.", {
      extensions: {
        http: {
          spec: !0,
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  const n = Mt(t.query);
  if (n !== "string")
    throw C(`Expected "query" param to be a string, but given ${n}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  const r = Mt(t.variables);
  if (!["object", "null", "undefined"].includes(r))
    throw C(`Expected "variables" param to be empty or an object, but given ${r}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  const i = Mt(t.extensions);
  if (!["object", "null", "undefined"].includes(i))
    throw C(`Expected "extensions" param to be empty or an object, but given ${i}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  return t;
}
function Ff(t) {
  return {
    onParams({ params: e }) {
      kf(e, t);
    }
  };
}
function Mt(t) {
  return t === null ? "null" : Array.isArray(t) ? "array" : typeof t;
}
function Cf(t) {
  return Mt(t) === "object";
}
function xf(t) {
  return t === "GET" || t === "POST";
}
function Df() {
  return {
    onRequestParse({ request: t }) {
      if (!xf(t.method))
        throw C("GraphQL only supports GET and POST requests.", {
          extensions: {
            http: {
              status: 405,
              headers: {
                Allow: "GET, POST"
              }
            },
            code: "BAD_REQUEST"
          }
        });
    }
  };
}
function Lf() {
  return {
    onValidate() {
      return ({ valid: t, result: e }) => {
        if (!t)
          for (const n of e)
            n.extensions ||= {}, n.extensions.code ||= "GRAPHQL_VALIDATION_FAILED", n.extensions.http ||= {}, n.extensions.http.spec = n.extensions.http.spec == null ? !0 : n.extensions.http.spec, n.extensions.http.status ||= 400;
      };
    }
  };
}
function $f(t) {
  return {
    onRequestParse() {
      return {
        onRequestParseDone({ requestParserResult: e }) {
          if (Array.isArray(e)) {
            if (!t)
              throw C("Batching is not supported.", {
                extensions: {
                  http: {
                    status: 400
                  },
                  code: "BAD_REQUEST"
                }
              });
            if (e.length > t)
              throw C(`Batching is limited to ${t} operations per request.`, {
                extensions: {
                  http: {
                    status: 413
                  },
                  code: "BAD_REQUEST"
                }
              });
          }
        }
      };
    }
  };
}
function Pf(t, e, n) {
  const r = e ? kr(e, n) ?? void 0 : void 0;
  if (!r)
    throw C("Could not determine what operation to execute.", {
      extensions: {
        code: "OPERATION_RESOLUTION_FAILURE",
        http: {
          status: 400
        }
      }
    });
  if (r.operation === "mutation" && t === "GET")
    throw C("Can only perform a mutation operation from a POST request.", {
      extensions: {
        http: {
          status: 405,
          headers: {
            Allow: "POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
}
function jf() {
  return {
    onParse() {
      return ({ result: t, context: {
        request: e,
        // the `params` might be missing in cases where the user provided
        // malformed context to getEnveloped (like `yoga.getEnveloped({})`)
        params: { operationName: n } = {}
      } }) => {
        if (e)
          if (t instanceof Error) {
            if (t instanceof v) {
              const r = t.extensions ||= {};
              r.code ||= "GRAPHQL_PARSE_FAILED";
              const i = r.http ||= {};
              i.spec ||= !0, i.status ||= 400;
            }
          } else
            Pf(e.method, t, n);
      };
    }
  };
}
function Mf({ id: t = Date.now().toString(), logger: e = console, endpoint: n = "/health" } = {}) {
  return {
    onRequest({ endResponse: r, fetchAPI: i, request: s }) {
      if (s.url.endsWith(n)) {
        e.debug("Responding Health Check");
        const o = new i.Response(null, {
          status: 200,
          headers: {
            "x-yoga-id": t
          }
        });
        r(o);
      }
    }
  };
}
const ut = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, no = /* @__PURE__ */ new Set(), br = typeof process == "object" && process ? process : {}, ro = (t, e, n, r) => {
  typeof br.emitWarning == "function" ? br.emitWarning(t, e, n, r) : console.error(`[${n}] ${e}: ${t}`);
};
let kn = globalThis.AbortController, $i = globalThis.AbortSignal;
if (typeof kn > "u") {
  $i = class {
    onabort;
    _onabort = [];
    reason;
    aborted = !1;
    addEventListener(r, i) {
      this._onabort.push(i);
    }
  }, kn = class {
    constructor() {
      e();
    }
    signal = new $i();
    abort(r) {
      if (!this.signal.aborted) {
        this.signal.reason = r, this.signal.aborted = !0;
        for (const i of this.signal._onabort)
          i(r);
        this.signal.onabort?.(r);
      }
    }
  };
  let t = br.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
  const e = () => {
    t && (t = !1, ro("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
const Uf = (t) => !no.has(t), $e = (t) => t && t === Math.floor(t) && t > 0 && isFinite(t), io = (t) => $e(t) ? t <= Math.pow(2, 8) ? Uint8Array : t <= Math.pow(2, 16) ? Uint16Array : t <= Math.pow(2, 32) ? Uint32Array : t <= Number.MAX_SAFE_INTEGER ? mn : null : null;
class mn extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
}
class mt {
  heap;
  length;
  // private constructor
  static #l = !1;
  static create(e) {
    const n = io(e);
    if (!n)
      return [];
    mt.#l = !0;
    const r = new mt(e, n);
    return mt.#l = !1, r;
  }
  constructor(e, n) {
    if (!mt.#l)
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new n(e), this.length = 0;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
}
class jr {
  // options that cannot be changed without disaster
  #l;
  #f;
  #g;
  #m;
  #k;
  #F;
  /**
   * {@link LRUCache.OptionsBase.ttl}
   */
  ttl;
  /**
   * {@link LRUCache.OptionsBase.ttlResolution}
   */
  ttlResolution;
  /**
   * {@link LRUCache.OptionsBase.ttlAutopurge}
   */
  ttlAutopurge;
  /**
   * {@link LRUCache.OptionsBase.updateAgeOnGet}
   */
  updateAgeOnGet;
  /**
   * {@link LRUCache.OptionsBase.updateAgeOnHas}
   */
  updateAgeOnHas;
  /**
   * {@link LRUCache.OptionsBase.allowStale}
   */
  allowStale;
  /**
   * {@link LRUCache.OptionsBase.noDisposeOnSet}
   */
  noDisposeOnSet;
  /**
   * {@link LRUCache.OptionsBase.noUpdateTTL}
   */
  noUpdateTTL;
  /**
   * {@link LRUCache.OptionsBase.maxEntrySize}
   */
  maxEntrySize;
  /**
   * {@link LRUCache.OptionsBase.sizeCalculation}
   */
  sizeCalculation;
  /**
   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
   */
  noDeleteOnFetchRejection;
  /**
   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
   */
  noDeleteOnStaleGet;
  /**
   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
   */
  allowStaleOnFetchAbort;
  /**
   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
   */
  allowStaleOnFetchRejection;
  /**
   * {@link LRUCache.OptionsBase.ignoreFetchAbort}
   */
  ignoreFetchAbort;
  // computed properties
  #i;
  #y;
  #r;
  #n;
  #e;
  #u;
  #d;
  #a;
  #s;
  #b;
  #o;
  #v;
  #T;
  #p;
  #E;
  #_;
  #c;
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: e.#T,
      ttls: e.#p,
      sizes: e.#v,
      keyMap: e.#r,
      keyList: e.#n,
      valList: e.#e,
      next: e.#u,
      prev: e.#d,
      get head() {
        return e.#a;
      },
      get tail() {
        return e.#s;
      },
      free: e.#b,
      // methods
      isBackgroundFetch: (n) => e.#t(n),
      backgroundFetch: (n, r, i, s) => e.#D(n, r, i, s),
      moveToTail: (n) => e.#A(n),
      indexes: (n) => e.#w(n),
      rindexes: (n) => e.#S(n),
      isStale: (n) => e.#h(n)
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return this.#l;
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return this.#f;
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return this.#y;
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return this.#i;
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return this.#k;
  }
  get memoMethod() {
    return this.#F;
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return this.#g;
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return this.#m;
  }
  constructor(e) {
    const { max: n = 0, ttl: r, ttlResolution: i = 1, ttlAutopurge: s, updateAgeOnGet: o, updateAgeOnHas: a, allowStale: l, dispose: u, disposeAfter: c, noDisposeOnSet: f, noUpdateTTL: d, maxSize: h = 0, maxEntrySize: g = 0, sizeCalculation: T, fetchMethod: F, memoMethod: w, noDeleteOnFetchRejection: D, noDeleteOnStaleGet: E, allowStaleOnFetchRejection: _, allowStaleOnFetchAbort: S, ignoreFetchAbort: I } = e;
    if (n !== 0 && !$e(n))
      throw new TypeError("max option must be a nonnegative integer");
    const $ = n ? io(n) : Array;
    if (!$)
      throw new Error("invalid max value: " + n);
    if (this.#l = n, this.#f = h, this.maxEntrySize = g || this.#f, this.sizeCalculation = T, this.sizeCalculation) {
      if (!this.#f && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (w !== void 0 && typeof w != "function")
      throw new TypeError("memoMethod must be a function if defined");
    if (this.#F = w, F !== void 0 && typeof F != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if (this.#k = F, this.#_ = !!F, this.#r = /* @__PURE__ */ new Map(), this.#n = new Array(n).fill(void 0), this.#e = new Array(n).fill(void 0), this.#u = new $(n), this.#d = new $(n), this.#a = 0, this.#s = 0, this.#b = mt.create(n), this.#i = 0, this.#y = 0, typeof u == "function" && (this.#g = u), typeof c == "function" ? (this.#m = c, this.#o = []) : (this.#m = void 0, this.#o = void 0), this.#E = !!this.#g, this.#c = !!this.#m, this.noDisposeOnSet = !!f, this.noUpdateTTL = !!d, this.noDeleteOnFetchRejection = !!D, this.allowStaleOnFetchRejection = !!_, this.allowStaleOnFetchAbort = !!S, this.ignoreFetchAbort = !!I, this.maxEntrySize !== 0) {
      if (this.#f !== 0 && !$e(this.#f))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!$e(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      this.#V();
    }
    if (this.allowStale = !!l, this.noDeleteOnStaleGet = !!E, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!a, this.ttlResolution = $e(i) || i === 0 ? i : 1, this.ttlAutopurge = !!s, this.ttl = r || 0, this.ttl) {
      if (!$e(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      this.#L();
    }
    if (this.#l === 0 && this.ttl === 0 && this.#f === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !this.#l && !this.#f) {
      const m = "LRU_CACHE_UNBOUNDED";
      Uf(m) && (no.add(m), ro("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", m, jr));
    }
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(e) {
    return this.#r.has(e) ? 1 / 0 : 0;
  }
  #L() {
    const e = new mn(this.#l), n = new mn(this.#l);
    this.#p = e, this.#T = n, this.#$ = (s, o, a = ut.now()) => {
      if (n[s] = o !== 0 ? a : 0, e[s] = o, o !== 0 && this.ttlAutopurge) {
        const l = setTimeout(() => {
          this.#h(s) && this.#I(this.#n[s], "expire");
        }, o + 1);
        l.unref && l.unref();
      }
    }, this.#N = (s) => {
      n[s] = e[s] !== 0 ? ut.now() : 0;
    }, this.#O = (s, o) => {
      if (e[o]) {
        const a = e[o], l = n[o];
        if (!a || !l)
          return;
        s.ttl = a, s.start = l, s.now = r || i();
        const u = s.now - l;
        s.remainingTTL = a - u;
      }
    };
    let r = 0;
    const i = () => {
      const s = ut.now();
      if (this.ttlResolution > 0) {
        r = s;
        const o = setTimeout(() => r = 0, this.ttlResolution);
        o.unref && o.unref();
      }
      return s;
    };
    this.getRemainingTTL = (s) => {
      const o = this.#r.get(s);
      if (o === void 0)
        return 0;
      const a = e[o], l = n[o];
      if (!a || !l)
        return 1 / 0;
      const u = (r || i()) - l;
      return a - u;
    }, this.#h = (s) => {
      const o = n[s], a = e[s];
      return !!a && !!o && (r || i()) - o > a;
    };
  }
  // conditionally set private methods related to TTL
  #N = () => {
  };
  #O = () => {
  };
  #$ = () => {
  };
  /* c8 ignore stop */
  #h = () => !1;
  #V() {
    const e = new mn(this.#l);
    this.#y = 0, this.#v = e, this.#R = (n) => {
      this.#y -= e[n], e[n] = 0;
    }, this.#P = (n, r, i, s) => {
      if (this.#t(r))
        return 0;
      if (!$e(i))
        if (s) {
          if (typeof s != "function")
            throw new TypeError("sizeCalculation must be a function");
          if (i = s(r, n), !$e(i))
            throw new TypeError("sizeCalculation return invalid (expect positive integer)");
        } else
          throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
      return i;
    }, this.#C = (n, r, i) => {
      if (e[n] = r, this.#f) {
        const s = this.#f - e[n];
        for (; this.#y > s; )
          this.#x(!0);
      }
      this.#y += e[n], i && (i.entrySize = r, i.totalCalculatedSize = this.#y);
    };
  }
  #R = (e) => {
  };
  #C = (e, n, r) => {
  };
  #P = (e, n, r, i) => {
    if (r || i)
      throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
    return 0;
  };
  *#w({ allowStale: e = this.allowStale } = {}) {
    if (this.#i)
      for (let n = this.#s; !(!this.#j(n) || ((e || !this.#h(n)) && (yield n), n === this.#a)); )
        n = this.#d[n];
  }
  *#S({ allowStale: e = this.allowStale } = {}) {
    if (this.#i)
      for (let n = this.#a; !(!this.#j(n) || ((e || !this.#h(n)) && (yield n), n === this.#s)); )
        n = this.#u[n];
  }
  #j(e) {
    return e !== void 0 && this.#r.get(this.#n[e]) === e;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of this.#w())
      this.#e[e] !== void 0 && this.#n[e] !== void 0 && !this.#t(this.#e[e]) && (yield [this.#n[e], this.#e[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of this.#S())
      this.#e[e] !== void 0 && this.#n[e] !== void 0 && !this.#t(this.#e[e]) && (yield [this.#n[e], this.#e[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of this.#w()) {
      const n = this.#n[e];
      n !== void 0 && !this.#t(this.#e[e]) && (yield n);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of this.#S()) {
      const n = this.#n[e];
      n !== void 0 && !this.#t(this.#e[e]) && (yield n);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of this.#w())
      this.#e[e] !== void 0 && !this.#t(this.#e[e]) && (yield this.#e[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of this.#S())
      this.#e[e] !== void 0 && !this.#t(this.#e[e]) && (yield this.#e[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * A String value that is used in the creation of the default string
   * description of an object. Called by the built-in method
   * `Object.prototype.toString`.
   */
  [Symbol.toStringTag] = "LRUCache";
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(e, n = {}) {
    for (const r of this.#w()) {
      const i = this.#e[r], s = this.#t(i) ? i.__staleWhileFetching : i;
      if (s !== void 0 && e(s, this.#n[r], this))
        return this.get(this.#n[r], n);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(e, n = this) {
    for (const r of this.#w()) {
      const i = this.#e[r], s = this.#t(i) ? i.__staleWhileFetching : i;
      s !== void 0 && e.call(n, s, this.#n[r], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, n = this) {
    for (const r of this.#S()) {
      const i = this.#e[r], s = this.#t(i) ? i.__staleWhileFetching : i;
      s !== void 0 && e.call(n, s, this.#n[r], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const n of this.#S({ allowStale: !0 }))
      this.#h(n) && (this.#I(this.#n[n], "expire"), e = !0);
    return e;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(e) {
    const n = this.#r.get(e);
    if (n === void 0)
      return;
    const r = this.#e[n], i = this.#t(r) ? r.__staleWhileFetching : r;
    if (i === void 0)
      return;
    const s = { value: i };
    if (this.#p && this.#T) {
      const o = this.#p[n], a = this.#T[n];
      if (o && a) {
        const l = o - (ut.now() - a);
        s.ttl = l, s.start = Date.now();
      }
    }
    return this.#v && (s.size = this.#v[n]), s;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const e = [];
    for (const n of this.#w({ allowStale: !0 })) {
      const r = this.#n[n], i = this.#e[n], s = this.#t(i) ? i.__staleWhileFetching : i;
      if (s === void 0 || r === void 0)
        continue;
      const o = { value: s };
      if (this.#p && this.#T) {
        o.ttl = this.#p[n];
        const a = ut.now() - this.#T[n];
        o.start = Math.floor(Date.now() - a);
      }
      this.#v && (o.size = this.#v[n]), e.unshift([r, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(e) {
    this.clear();
    for (const [n, r] of e) {
      if (r.start) {
        const i = Date.now() - r.start;
        r.start = ut.now() - i;
      }
      this.set(n, r.value, r);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(e, n, r = {}) {
    if (n === void 0)
      return this.delete(e), this;
    const { ttl: i = this.ttl, start: s, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: a = this.sizeCalculation, status: l } = r;
    let { noUpdateTTL: u = this.noUpdateTTL } = r;
    const c = this.#P(e, n, r.size || 0, a);
    if (this.maxEntrySize && c > this.maxEntrySize)
      return l && (l.set = "miss", l.maxEntrySizeExceeded = !0), this.#I(e, "set"), this;
    let f = this.#i === 0 ? void 0 : this.#r.get(e);
    if (f === void 0)
      f = this.#i === 0 ? this.#s : this.#b.length !== 0 ? this.#b.pop() : this.#i === this.#l ? this.#x(!1) : this.#i, this.#n[f] = e, this.#e[f] = n, this.#r.set(e, f), this.#u[this.#s] = f, this.#d[f] = this.#s, this.#s = f, this.#i++, this.#C(f, c, l), l && (l.set = "add"), u = !1;
    else {
      this.#A(f);
      const d = this.#e[f];
      if (n !== d) {
        if (this.#_ && this.#t(d)) {
          d.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: h } = d;
          h !== void 0 && !o && (this.#E && this.#g?.(h, e, "set"), this.#c && this.#o?.push([h, e, "set"]));
        } else o || (this.#E && this.#g?.(d, e, "set"), this.#c && this.#o?.push([d, e, "set"]));
        if (this.#R(f), this.#C(f, c, l), this.#e[f] = n, l) {
          l.set = "replace";
          const h = d && this.#t(d) ? d.__staleWhileFetching : d;
          h !== void 0 && (l.oldValue = h);
        }
      } else l && (l.set = "update");
    }
    if (i !== 0 && !this.#p && this.#L(), this.#p && (u || this.#$(f, i, s), l && this.#O(l, f)), !o && this.#c && this.#o) {
      const d = this.#o;
      let h;
      for (; h = d?.shift(); )
        this.#m?.(...h);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    try {
      for (; this.#i; ) {
        const e = this.#e[this.#a];
        if (this.#x(!0), this.#t(e)) {
          if (e.__staleWhileFetching)
            return e.__staleWhileFetching;
        } else if (e !== void 0)
          return e;
      }
    } finally {
      if (this.#c && this.#o) {
        const e = this.#o;
        let n;
        for (; n = e?.shift(); )
          this.#m?.(...n);
      }
    }
  }
  #x(e) {
    const n = this.#a, r = this.#n[n], i = this.#e[n];
    return this.#_ && this.#t(i) ? i.__abortController.abort(new Error("evicted")) : (this.#E || this.#c) && (this.#E && this.#g?.(i, r, "evict"), this.#c && this.#o?.push([i, r, "evict"])), this.#R(n), e && (this.#n[n] = void 0, this.#e[n] = void 0, this.#b.push(n)), this.#i === 1 ? (this.#a = this.#s = 0, this.#b.length = 0) : this.#a = this.#u[n], this.#r.delete(r), this.#i--, n;
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, n = {}) {
    const { updateAgeOnHas: r = this.updateAgeOnHas, status: i } = n, s = this.#r.get(e);
    if (s !== void 0) {
      const o = this.#e[s];
      if (this.#t(o) && o.__staleWhileFetching === void 0)
        return !1;
      if (this.#h(s))
        i && (i.has = "stale", this.#O(i, s));
      else return r && this.#N(s), i && (i.has = "hit", this.#O(i, s)), !0;
    } else i && (i.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, n = {}) {
    const { allowStale: r = this.allowStale } = n, i = this.#r.get(e);
    if (i === void 0 || !r && this.#h(i))
      return;
    const s = this.#e[i];
    return this.#t(s) ? s.__staleWhileFetching : s;
  }
  #D(e, n, r, i) {
    const s = n === void 0 ? void 0 : this.#e[n];
    if (this.#t(s))
      return s;
    const o = new kn(), { signal: a } = r;
    a?.addEventListener("abort", () => o.abort(a.reason), {
      signal: o.signal
    });
    const l = {
      signal: o.signal,
      options: r,
      context: i
    }, u = (T, F = !1) => {
      const { aborted: w } = o.signal, D = r.ignoreFetchAbort && T !== void 0;
      if (r.status && (w && !F ? (r.status.fetchAborted = !0, r.status.fetchError = o.signal.reason, D && (r.status.fetchAbortIgnored = !0)) : r.status.fetchResolved = !0), w && !D && !F)
        return f(o.signal.reason);
      const E = h;
      return this.#e[n] === h && (T === void 0 ? E.__staleWhileFetching ? this.#e[n] = E.__staleWhileFetching : this.#I(e, "fetch") : (r.status && (r.status.fetchUpdated = !0), this.set(e, T, l.options))), T;
    }, c = (T) => (r.status && (r.status.fetchRejected = !0, r.status.fetchError = T), f(T)), f = (T) => {
      const { aborted: F } = o.signal, w = F && r.allowStaleOnFetchAbort, D = w || r.allowStaleOnFetchRejection, E = D || r.noDeleteOnFetchRejection, _ = h;
      if (this.#e[n] === h && (!E || _.__staleWhileFetching === void 0 ? this.#I(e, "fetch") : w || (this.#e[n] = _.__staleWhileFetching)), D)
        return r.status && _.__staleWhileFetching !== void 0 && (r.status.returnedStale = !0), _.__staleWhileFetching;
      if (_.__returned === _)
        throw T;
    }, d = (T, F) => {
      const w = this.#k?.(e, s, l);
      w && w instanceof Promise && w.then((D) => T(D === void 0 ? void 0 : D), F), o.signal.addEventListener("abort", () => {
        (!r.ignoreFetchAbort || r.allowStaleOnFetchAbort) && (T(void 0), r.allowStaleOnFetchAbort && (T = (D) => u(D, !0)));
      });
    };
    r.status && (r.status.fetchDispatched = !0);
    const h = new Promise(d).then(u, c), g = Object.assign(h, {
      __abortController: o,
      __staleWhileFetching: s,
      __returned: void 0
    });
    return n === void 0 ? (this.set(e, g, { ...l.options, status: void 0 }), n = this.#r.get(e)) : this.#e[n] = g, g;
  }
  #t(e) {
    if (!this.#_)
      return !1;
    const n = e;
    return !!n && n instanceof Promise && n.hasOwnProperty("__staleWhileFetching") && n.__abortController instanceof kn;
  }
  async fetch(e, n = {}) {
    const {
      // get options
      allowStale: r = this.allowStale,
      updateAgeOnGet: i = this.updateAgeOnGet,
      noDeleteOnStaleGet: s = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: a = this.noDisposeOnSet,
      size: l = 0,
      sizeCalculation: u = this.sizeCalculation,
      noUpdateTTL: c = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: f = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: d = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: h = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: g = this.allowStaleOnFetchAbort,
      context: T,
      forceRefresh: F = !1,
      status: w,
      signal: D
    } = n;
    if (!this.#_)
      return w && (w.fetch = "get"), this.get(e, {
        allowStale: r,
        updateAgeOnGet: i,
        noDeleteOnStaleGet: s,
        status: w
      });
    const E = {
      allowStale: r,
      updateAgeOnGet: i,
      noDeleteOnStaleGet: s,
      ttl: o,
      noDisposeOnSet: a,
      size: l,
      sizeCalculation: u,
      noUpdateTTL: c,
      noDeleteOnFetchRejection: f,
      allowStaleOnFetchRejection: d,
      allowStaleOnFetchAbort: g,
      ignoreFetchAbort: h,
      status: w,
      signal: D
    };
    let _ = this.#r.get(e);
    if (_ === void 0) {
      w && (w.fetch = "miss");
      const S = this.#D(e, _, E, T);
      return S.__returned = S;
    } else {
      const S = this.#e[_];
      if (this.#t(S)) {
        const b = r && S.__staleWhileFetching !== void 0;
        return w && (w.fetch = "inflight", b && (w.returnedStale = !0)), b ? S.__staleWhileFetching : S.__returned = S;
      }
      const I = this.#h(_);
      if (!F && !I)
        return w && (w.fetch = "hit"), this.#A(_), i && this.#N(_), w && this.#O(w, _), S;
      const $ = this.#D(e, _, E, T), y = $.__staleWhileFetching !== void 0 && r;
      return w && (w.fetch = I ? "stale" : "refresh", y && I && (w.returnedStale = !0)), y ? $.__staleWhileFetching : $.__returned = $;
    }
  }
  async forceFetch(e, n = {}) {
    const r = await this.fetch(e, n);
    if (r === void 0)
      throw new Error("fetch() returned undefined");
    return r;
  }
  memo(e, n = {}) {
    const r = this.#F;
    if (!r)
      throw new Error("no memoMethod provided to constructor");
    const { context: i, forceRefresh: s, ...o } = n, a = this.get(e, o);
    if (!s && a !== void 0)
      return a;
    const l = r(e, a, {
      options: o,
      context: i
    });
    return this.set(e, l, o), l;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, n = {}) {
    const { allowStale: r = this.allowStale, updateAgeOnGet: i = this.updateAgeOnGet, noDeleteOnStaleGet: s = this.noDeleteOnStaleGet, status: o } = n, a = this.#r.get(e);
    if (a !== void 0) {
      const l = this.#e[a], u = this.#t(l);
      return o && this.#O(o, a), this.#h(a) ? (o && (o.get = "stale"), u ? (o && r && l.__staleWhileFetching !== void 0 && (o.returnedStale = !0), r ? l.__staleWhileFetching : void 0) : (s || this.#I(e, "expire"), o && r && (o.returnedStale = !0), r ? l : void 0)) : (o && (o.get = "hit"), u ? l.__staleWhileFetching : (this.#A(a), i && this.#N(a), l));
    } else o && (o.get = "miss");
  }
  #M(e, n) {
    this.#d[n] = e, this.#u[e] = n;
  }
  #A(e) {
    e !== this.#s && (e === this.#a ? this.#a = this.#u[e] : this.#M(this.#d[e], this.#u[e]), this.#M(this.#s, e), this.#s = e);
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    return this.#I(e, "delete");
  }
  #I(e, n) {
    let r = !1;
    if (this.#i !== 0) {
      const i = this.#r.get(e);
      if (i !== void 0)
        if (r = !0, this.#i === 1)
          this.#U(n);
        else {
          this.#R(i);
          const s = this.#e[i];
          if (this.#t(s) ? s.__abortController.abort(new Error("deleted")) : (this.#E || this.#c) && (this.#E && this.#g?.(s, e, n), this.#c && this.#o?.push([s, e, n])), this.#r.delete(e), this.#n[i] = void 0, this.#e[i] = void 0, i === this.#s)
            this.#s = this.#d[i];
          else if (i === this.#a)
            this.#a = this.#u[i];
          else {
            const o = this.#d[i];
            this.#u[o] = this.#u[i];
            const a = this.#u[i];
            this.#d[a] = this.#d[i];
          }
          this.#i--, this.#b.push(i);
        }
    }
    if (this.#c && this.#o?.length) {
      const i = this.#o;
      let s;
      for (; s = i?.shift(); )
        this.#m?.(...s);
    }
    return r;
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return this.#U("delete");
  }
  #U(e) {
    for (const n of this.#S({ allowStale: !0 })) {
      const r = this.#e[n];
      if (this.#t(r))
        r.__abortController.abort(new Error("deleted"));
      else {
        const i = this.#n[n];
        this.#E && this.#g?.(r, i, e), this.#c && this.#o?.push([r, i, e]);
      }
    }
    if (this.#r.clear(), this.#e.fill(void 0), this.#n.fill(void 0), this.#p && this.#T && (this.#p.fill(0), this.#T.fill(0)), this.#v && this.#v.fill(0), this.#a = 0, this.#s = 0, this.#b.length = 0, this.#y = 0, this.#i = 0, this.#c && this.#o) {
      const n = this.#o;
      let r;
      for (; r = n?.shift(); )
        this.#m?.(...r);
    }
  }
}
const Vf = 1024, qf = 36e5;
function rr({ max: t = Vf, ttl: e = qf } = {}) {
  return new jr({ max: t, ttl: e });
}
function Bf({ documentCache: t = rr(), errorCache: e = rr(), validationCache: n = !0 }) {
  const r = rr();
  return {
    onParse({ params: i, setParsedDocument: s }) {
      const o = i.source.toString(), a = t.get(o);
      if (a) {
        s(a);
        return;
      }
      const l = e.get(o);
      if (l)
        throw l;
      return ({ result: u }) => {
        u != null && (u instanceof Error ? e.set(o, u) : t.set(o, u));
      };
    },
    onValidate({
      params: { schema: i, documentAST: s, rules: o },
      setResult: a
      // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    }) {
      if (i != null && n !== !1) {
        const l = o?.map((d) => d.name).join(",") || "";
        let u = r.get(l);
        u || (u = /* @__PURE__ */ new WeakMap(), r.set(l, u));
        let c = u.get(i);
        c || (c = /* @__PURE__ */ new WeakMap(), u.set(i, c));
        const f = c.get(s);
        if (f) {
          a(f);
          return;
        }
        return ({ result: d }) => {
          d != null && c?.set(s, d);
        };
      }
    }
  };
}
const Gf = () => !0;
function Ft(t) {
  const e = t.match || Gf;
  return {
    onRequestParse({ request: n, setRequestParser: r }) {
      e(n) && r(t.parse);
    }
  };
}
function Qf(t) {
  const e = (t.headers.get("accept") || "*/*").replace(/\s/g, "").toLowerCase().split(","), n = [];
  for (const r of e) {
    const [i, ...s] = r.split(";");
    i === void 0 || (s?.find((a) => a.includes("charset=")) || "charset=utf-8") !== "charset=utf-8" || n.push(i);
  }
  return n.reverse();
}
function Hf(t, e) {
  const [n, r] = t.split("/"), [i, s] = e.split("/");
  return (i === "*" || i === n) && (s === "*" || s === r);
}
function Mr(t) {
  if (Array.isArray(t))
    return `[${t.map((r) => {
      const i = Pi(r);
      return (r.stringify || JSON.stringify)(i);
    }).join(",")}]`;
  const e = Pi(t);
  return (t.stringify || JSON.stringify)(e);
}
function Pi(t) {
  if (t.errors?.length || t.extensions?.http) {
    const e = { ...t };
    if (e.errors &&= e.errors.map(so), e.extensions) {
      const { http: n, ...r } = t.extensions;
      e.extensions = Object.keys(r).length ? r : void 0;
    }
    return e;
  }
  return t;
}
function so(t) {
  if (it(t)) {
    const e = "toJSON" in t && typeof t.toJSON == "function" ? t.toJSON() : Object(t), { http: n, unexpected: r, ...i } = e.extensions || {};
    return C(t.message, {
      nodes: t.nodes,
      source: t.source,
      positions: t.positions,
      path: t.path,
      originalError: so(t.originalError || void 0),
      extensions: Object.keys(i).length ? i : void 0
    });
  }
  return t;
}
function Kf(t, e) {
  const r = Pr(t, {
    Connection: "keep-alive",
    "Content-Type": 'multipart/mixed; boundary="-"',
    "Transfer-Encoding": "chunked"
  });
  let i;
  const s = new e.TextEncoder(), o = new e.ReadableStream({
    start(a) {
      if (_e(t))
        i = t[Symbol.asyncIterator]();
      else {
        let l = !1;
        i = {
          next: () => l ? G({ done: !0, value: null }) : (l = !0, G({ done: !1, value: t }))
        };
      }
      a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
    },
    pull(a) {
      return A(() => i.next(), ({ done: l, value: u }) => {
        if (u != null) {
          a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("Content-Type: application/json; charset=utf-8")), a.enqueue(s.encode(`\r
`));
          const c = Mr(u), f = s.encode(c);
          a.enqueue(s.encode("Content-Length: " + f.byteLength)), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode(`\r
`)), a.enqueue(f), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
        }
        l && (a.enqueue(s.encode(`--\r
`)), a.close());
      }, (l) => {
        a.error(l);
      });
    },
    cancel(a) {
      if (i.return)
        return A(() => i.return?.(a), () => {
        });
    }
  });
  return new e.Response(o, r);
}
function Wf(t, e, n) {
  if (Gn(t))
    return new e.Response(null, {
      status: 406,
      statusText: "Not Acceptable",
      headers: {
        accept: "application/json; charset=utf-8, application/graphql-response+json; charset=utf-8"
      }
    });
  const r = {
    "Content-Type": n + "; charset=utf-8"
  }, i = Pr(
    t,
    r,
    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors
    n === "application/json" && !Array.isArray(t) && gf(t.errors) && t.errors.some((o) => !o.extensions?.originalError || it(o.extensions.originalError))
  ), s = Mr(t);
  return new e.Response(s, i);
}
function zf() {
  return function(e, n) {
    let r = 12e3;
    globalThis.process?.env?.NODE_ENV === "test" && (r = 300);
    const s = Pr(e, {
      "Content-Type": "text/event-stream",
      Connection: "keep-alive",
      "Cache-Control": "no-cache",
      "Content-Encoding": "none"
    }, !0);
    let o, a;
    const l = new n.TextEncoder(), u = new n.ReadableStream({
      start(c) {
        if (c.enqueue(l.encode(`:

`)), a = setInterval(() => {
          if (!c.desiredSize) {
            clearInterval(a);
            return;
          }
          c.enqueue(l.encode(`:

`));
        }, r), _e(e))
          o = e[Symbol.asyncIterator]();
        else {
          let f = !1;
          o = {
            next: () => f ? G({ done: !0, value: null }) : (f = !0, G({ done: !1, value: e }))
          };
        }
      },
      pull(c) {
        return A(() => o.next(), (f) => {
          if (f.value != null) {
            c.enqueue(l.encode(`event: next
`));
            const d = Mr(f.value);
            c.enqueue(l.encode(`data: ${d}

`));
          }
          f.done && (c.enqueue(l.encode(`event: complete
`)), c.enqueue(l.encode(`data:

`)), clearInterval(a), c.close());
        }, (f) => {
          c.error(f);
        });
      },
      cancel(c) {
        if (clearInterval(a), o.return)
          return A(() => o.return?.(c), () => {
          });
      }
    });
    return new n.Response(u, s);
  };
}
const Jf = {
  mediaTypes: ["multipart/mixed"],
  asyncIterables: !0,
  processResult: Kf
};
function Yf() {
  return {
    mediaTypes: ["text/event-stream"],
    asyncIterables: !0,
    processResult: zf()
  };
}
const ji = {
  mediaTypes: ["application/graphql-response+json", "application/json"],
  asyncIterables: !1,
  processResult: Wf
};
function Xf() {
  const t = /* @__PURE__ */ new WeakMap(), e = Yf(), n = [e, Jf, ji], r = [e, ji];
  return {
    onSubscribe({ args: { contextValue: i } }) {
      i.request && t.set(i.request, !0);
    },
    onResultProcess({ request: i, result: s, acceptableMediaTypes: o, setResultProcessor: a }) {
      const u = t.get(i) ? r : n, c = Qf(i), f = _e(s);
      for (const d of u)
        for (const h of c)
          if (!(f && !d.asyncIterables))
            for (const g of d.mediaTypes)
              o.push(g), Hf(g, h) && a(d.processResult, g);
    }
  };
}
const Zf = `<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/graphql-hive/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox="-0.41 0.445 472.812 499.811" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d="M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z" fill=url(#paint3_linear_1677_11483) /><path d="M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z" fill=url(#paint4_linear_1677_11483) /><path d="M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d="M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z" fill=black /></mask><path d="M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z" fill=url(#paint0_linear_1677_11483) /><path d="M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z" fill=url(#paint1_linear_1677_11483) /><path d="M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d="M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1><p>Version: 5.15.1</p></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? 👀</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  landingPage: false
})
          </code>
        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  graphqlEndpoint: '__REQUEST_PATH__',
})
          </code>
        </pre></section></main></body></html>`, ed = function(e) {
  return new e.fetchAPI.Response(Zf.replace(/__GRAPHIQL_LINK__/g, e.graphqlEndpoint).replace(/__REQUEST_PATH__/g, e.url.pathname), {
    status: 200,
    statusText: "OK",
    headers: {
      "Content-Type": "text/html"
    }
  });
};
function td(t) {
  let e;
  function n({ URLPattern: i }) {
    return e ||= new i({
      pathname: t.graphqlEndpoint
    }), e;
  }
  const r = t.landingPageRenderer || ed;
  return {
    onRequest({ request: i, fetchAPI: s, endResponse: o, url: a }) {
      if (!i.url.endsWith(t.graphqlEndpoint) && !i.url.endsWith(`${t.graphqlEndpoint}/`) && a.pathname !== t.graphqlEndpoint && a.pathname !== `${t.graphqlEndpoint}/` && !n(s).test(a)) {
        if (t.showLandingPage === !0 && i.method === "GET" && i.headers?.get("accept")?.includes("text/html")) {
          const l = r({
            request: i,
            fetchAPI: s,
            url: a,
            graphqlEndpoint: t.graphqlEndpoint,
            get urlPattern() {
              return n(s);
            }
          });
          if (q(l))
            return l.then(o);
          o(l);
          return;
        }
        o(new s.Response("", {
          status: 404,
          statusText: "Not Found"
        }));
      }
    }
  };
}
function ir({ request: t, result: e, fetchAPI: n, onResultProcessHooks: r, serverContext: i }) {
  let s;
  const o = [];
  let a = "*/*";
  return A(() => oe(r, (l) => l({
    request: t,
    acceptableMediaTypes: o,
    result: e,
    setResult(u) {
      e = u;
    },
    resultProcessor: s,
    setResultProcessor(u, c) {
      s = u, a = c;
    },
    serverContext: i
  })), () => s ? s(e, n, a) : new n.Response(null, {
    status: 406,
    statusText: "Not Acceptable",
    headers: {
      accept: o.join("; charset=utf-8, ")
    }
  }));
}
function nd({ params: t, enveloped: e }) {
  const n = e.parse(t.query), r = e.validate(e.schema, n);
  return r.length > 0 ? { errors: r } : A(() => e.contextFactory(), (i) => {
    const s = {
      schema: e.schema,
      document: n,
      contextValue: i,
      variableValues: t.variables,
      operationName: t.operationName
    };
    return (kr(n, t.operationName)?.operation === "subscription" ? e.subscribe : e.execute)(s);
  });
}
function Mi(t) {
  return it(t) ? t.toJSON() : t instanceof Error ? {
    message: t.message,
    stack: t.stack,
    cause: t.cause
  } : t;
}
const rd = (t, e, n = globalThis.process?.env?.NODE_ENV === "development") => {
  if ($r(t))
    return t;
  const r = {
    code: "INTERNAL_SERVER_ERROR",
    unexpected: !0
  }, i = {
    extensions: r
  };
  return it(t) ? (i.nodes = t.nodes, i.source = t.source, i.positions = t.positions, i.path = t.path, n && t.originalError && (r.originalError = Mi(t.originalError)), t.extensions?.http && (r.http = t.extensions.http)) : n && (r.originalError = Mi(t)), C(e, i);
};
class id {
  /**
   * Instance of envelop
   */
  getEnveloped;
  logger;
  graphqlEndpoint;
  fetchAPI;
  plugins;
  instrumentation;
  onRequestParseHooks;
  onParamsHooks;
  onExecutionResultHooks;
  onResultProcessHooks;
  maskedErrorsOpts;
  id;
  version = "5.15.1";
  constructor(e) {
    if (this.id = e?.id ?? "yoga", this.fetchAPI = {
      ...Js
    }, e?.fetchAPI)
      for (const l in e.fetchAPI)
        e.fetchAPI[l] && (this.fetchAPI[l] = e.fetchAPI[l]);
    const n = e?.logging == null ? !0 : e.logging;
    this.logger = typeof n == "boolean" ? n === !0 ? tr() : tr("silent") : typeof n == "string" ? tr(n) : n;
    const r = typeof e?.maskedErrors == "object" && e.maskedErrors.maskError || rd, i = /* @__PURE__ */ new WeakSet();
    this.maskedErrorsOpts = e?.maskedErrors === !1 ? null : {
      errorMessage: "Unexpected error.",
      ...typeof e?.maskedErrors == "object" ? e.maskedErrors : {},
      maskError: (l, u) => {
        if (i.has(l))
          return l;
        const c = r(l, u, this.maskedErrorsOpts?.isDev);
        return c !== l && this.logger.error(l), i.add(c), c;
      }
    };
    const s = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;
    let o = 0;
    e?.batching && (typeof e.batching == "boolean" ? o = 10 : o = e.batching.limit ?? 10), this.graphqlEndpoint = e?.graphqlEndpoint || "/graphql";
    const a = this.graphqlEndpoint;
    this.plugins = [
      Ql({
        parse: Ko,
        validate: bl,
        execute: Ri,
        subscribe: Ri,
        specifiedRules: Es
      }),
      // Use the schema provided by the user
      !!e?.schema && Bu(e.schema),
      e?.context != null && Gl((l) => e?.context ? typeof e.context == "function" ? e.context(l) : e.context : {}),
      // Middlewares before processing the incoming HTTP request
      Mf({
        id: this.id,
        logger: this.logger,
        endpoint: e?.healthCheckEndpoint
      }),
      e?.cors !== !1 && df(e?.cors),
      e?.graphiql !== !1 && qu({
        graphqlEndpoint: a,
        options: e?.graphiql,
        render: e?.renderGraphiQL,
        logger: this.logger
      }),
      // Middlewares before the GraphQL execution
      Ft({
        match: yf,
        parse: bf
      }),
      Ft({
        match: Sf,
        parse: If
      }),
      e?.multipart !== !1 && Ft({
        match: _f,
        parse: Nf
      }),
      Ft({
        match: Ef,
        parse: wf
      }),
      Ft({
        match: vf,
        parse: Tf
      }),
      // Middlewares after the GraphQL execution
      Xf(),
      ...e?.plugins ?? [],
      // To make sure those are called at the end
      {
        onPluginInit({ addPlugin: l }) {
          e?.parserAndValidationCache !== !1 && l(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            Bf(!e?.parserAndValidationCache || e?.parserAndValidationCache === !0 ? {} : e?.parserAndValidationCache)
          ), l($f(o)), l(Ff(e?.extraParamNames));
          const u = !!(e?.landingPage ?? !0);
          l(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            td({
              graphqlEndpoint: a,
              showLandingPage: u,
              landingPageRenderer: typeof e?.landingPage == "function" ? e.landingPage : void 0
            })
          ), l(Df()), l(jf()), s && (l({
            onSubscribe() {
              return {
                onSubscribeError({ error: c }) {
                  if (eo(c))
                    throw c;
                }
              };
            }
          }), l(Bl(s))), l(
            // We handle validation errors at the end
            Lf()
          );
        }
      }
    ], this.getEnveloped = Dl({
      plugins: this.plugins
    }), this.plugins = this.getEnveloped._plugins, this.onRequestParseHooks = [], this.onParamsHooks = [], this.onExecutionResultHooks = [], this.onResultProcessHooks = [];
    for (const l of this.plugins)
      l && (l.onYogaInit && l.onYogaInit({
        yoga: this
      }), l.onRequestParse && this.onRequestParseHooks.push(l.onRequestParse), l.onParams && this.onParamsHooks.push(l.onParams), l.onExecutionResult && this.onExecutionResultHooks.push(l.onExecutionResult), l.onResultProcess && this.onResultProcessHooks.push(l.onResultProcess), l.instrumentation && (this.instrumentation = this.instrumentation ? Cr(this.instrumentation, l.instrumentation) : l.instrumentation));
  }
  handleParams = ({ request: e, context: n, params: r }) => {
    const i = n.request === e ? {
      params: r
    } : {
      request: e,
      params: r
    };
    Object.assign(n, i);
    const s = this.getEnveloped(n);
    return this.logger.debug("Processing GraphQL Parameters"), A(() => A(() => nd({ params: r, enveloped: s }), (o) => (this.logger.debug("Processing GraphQL Parameters done."), o), (o) => ({
      errors: gn(o, this.maskedErrorsOpts, this.logger)
    })), (o) => (_e(o) && (o = Sn(o, (a) => a, (a) => {
      if (a.name === "AbortError")
        throw this.logger.debug("Request aborted"), a;
      return {
        errors: gn(a, this.maskedErrorsOpts, this.logger)
      };
    })), o));
  };
  getResultForParams = ({ params: e, request: n }, r) => {
    let i, s = this.handleParams;
    return A(() => oe(this.onParamsHooks, (o) => o({
      params: e,
      request: n,
      setParams(a) {
        e = a;
      },
      paramsHandler: s,
      setParamsHandler(a) {
        s = a;
      },
      setResult(a) {
        i = a;
      },
      fetchAPI: this.fetchAPI,
      context: r
    })), () => A(() => i || s({
      request: n,
      params: e,
      context: r
    }), (o) => A(() => oe(this.onExecutionResultHooks, (a) => a({
      result: o,
      setResult(l) {
        o = l;
      },
      request: n,
      context: r
    })), () => o)));
  };
  parseRequest = (e, n) => {
    let r = new Proxy({}, {
      get: (o, a, l) => (r = new this.fetchAPI.URL(e.url, "http://localhost"), Reflect.get(r, a, r))
    }), i;
    const s = [];
    return A(() => oe(this.onRequestParseHooks, (o) => A(() => o({
      request: e,
      url: r,
      requestParser: i,
      serverContext: n,
      setRequestParser(a) {
        i = a;
      }
    }), (a) => a?.onRequestParseDone), s), () => (this.logger.debug("Parsing request to extract GraphQL parameters"), i ? A(() => i(e), (o) => A(() => oe(s, (a) => a({
      requestParserResult: o,
      setRequestParserResult(l) {
        o = l;
      }
    })), () => ({
      requestParserResult: o
    }))) : {
      response: new this.fetchAPI.Response(null, {
        status: 415,
        statusText: "Unsupported Media Type"
      })
    }));
  };
  handle = (e, n) => {
    const r = this.instrumentation && In({ request: e }), i = this.instrumentation?.requestParse ? r.asyncFn(this.instrumentation?.requestParse, this.parseRequest) : this.parseRequest;
    return Fr(G().then(() => i(e, n)).then(({ response: s, requestParserResult: o }) => {
      if (s)
        return s;
      const a = this.instrumentation?.operation ? (l, u) => In({ context: u, request: l.request }).asyncFn(this.instrumentation?.operation, this.getResultForParams)(l, u) : this.getResultForParams;
      return A(() => Array.isArray(o) ? Promise.all(o.map((l) => a({
        params: l,
        request: e
      }, Object.create(n)))) : a({
        params: o,
        request: e
      }, n), (l) => (this.instrumentation?.resultProcess ? r.asyncFn(this.instrumentation.resultProcess, ir) : ir)({
        request: e,
        result: l,
        fetchAPI: this.fetchAPI,
        onResultProcessHooks: this.onResultProcessHooks,
        serverContext: n
      }));
    }).catch((s) => {
      const a = {
        errors: gn(s, this.maskedErrorsOpts, this.logger)
      };
      return ir({
        request: e,
        result: a,
        fetchAPI: this.fetchAPI,
        onResultProcessHooks: this.onResultProcessHooks,
        serverContext: n
      });
    }));
  };
}
function sd(t) {
  const e = new id(t);
  return uf(e, {
    fetchAPI: e.fetchAPI,
    plugins: e.plugins,
    disposeOnProcessTerminate: t.disposeOnProcessTerminate
  });
}
/*!
 * allof-merge v0.6.7
 * Copyright (C) 2012-2025 Damir Yusipov
 * Date: Sun, 17 Aug 2025 19:54:52 GMT
 */
function Wt(t, e) {
  var n = {};
  for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var i = 0;
    for (r = Object.getOwnPropertySymbols(t); i < r.length; i++) e.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[i]) && (n[r[i]] = t[r[i]]);
  }
  return n;
}
function od(t, e) {
  var n = {};
  for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var i = 0;
    for (r = Object.getOwnPropertySymbols(t); i < r.length; i++) e.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[i]) && (n[r[i]] = t[r[i]]);
  }
  return n;
}
const ad = (t = {}, e, n, r) => {
  const i = `/${e}`, s = typeof t["/**"] == "function" ? t["/**"]({ key: e, path: n, value: r }) : t["/**"], o = typeof t["/*"] == "function" ? t["/*"]({ key: e, path: n, value: r }) : t["/*"];
  let a = {};
  if (i in t) a = t[i];
  else if (!s && !o) return;
  return a = typeof a == "function" ? a({ key: e, path: n, value: r }) : a, o && (a = Object.assign(Object.assign({}, o), a)), s ? Object.assign(Object.assign({ "/**": t["/**"] }, s), a) : a;
}, oo = (t) => {
  const e = {}, n = t.reduce((r, i) => (Object.keys(i).forEach((s) => r.add(s)), r), /* @__PURE__ */ new Set());
  for (const r of n.keys()) {
    const i = t.filter((s) => r in s);
    if (i.length !== 1) {
      if (r.charAt(0) !== "/") throw new Error(`Cannot merge rules. Duplicate key: ${r}. Rules should not have same Rule key`);
      e[r] = (s, o) => {
        const a = i.map((l) => typeof l[r] == "function" ? l[r](s, o) : l[r]);
        return oo(a);
      };
    } else e[r] = i[0][r];
  }
  return e;
}, xe = (t) => typeof t == "object" && t !== null, sr = (t) => Array.isArray(t), ld = (t, e, n = {}) => {
  var r, i;
  e = sr(e) ? e : [e];
  const s = sr(n.rules) ? oo(n.rules) : n.rules, o = [{ data: t, state: n.state, path: [], keys: [], keyIndex: -1, rules: s }];
  for (; o.length > 0; ) {
    const a = o[o.length - 1];
    if (a.keyIndex >= a.keys.length) {
      for (; !((r = a.hooks) === null || r === void 0) && r.length; ) a.hooks.pop()();
      o.pop();
      continue;
    }
    const l = a.keys[a.keyIndex++], [u, c, f] = o.length > 1 ? [a.data[l], [...a.path, l], ad(a.rules, l, [...a.path, l], a.data[l])] : [a.data, a.path, s];
    let d = { value: u, path: c, key: l, state: a.state, rules: f };
    const h = [];
    for (const g of e) {
      if (!g || typeof g != "function") continue;
      const T = (i = g(d)) !== null && i !== void 0 ? i : {}, { terminate: F, done: w, exitHook: D } = T, E = od(T, ["terminate", "done", "exitHook"]);
      if (F) return;
      if (D && h.push(D), d = Object.assign(Object.assign({}, d), E), w) {
        d = null;
        break;
      }
    }
    if (d && xe(d.value)) {
      const g = sr(d.value) ? [...d.value.keys()] : Object.keys(d.value);
      o.push({ hooks: h, state: d.state, data: d.value, path: c, keys: g, keyIndex: 0, rules: d.rules });
    } else for (; h.length; ) h.pop()();
  }
}, ud = () => {
  const t = /* @__PURE__ */ new WeakMap();
  let e;
  return [({ value: n }) => {
    e = n;
  }, ({ value: n, path: r, key: i, state: s }) => {
    if (i = r.length ? i : "#", xe(e) && xe(n)) {
      if (t.has(e)) return s.node[i] = t.get(e), { done: !0 };
      const o = Array.isArray(n) ? [] : {};
      s.node[i] = o, t.set(e, o);
    } else s.node[i] = n;
    return { value: n, state: Object.assign(Object.assign({}, s), { node: s.node[i] }) };
  }];
};
class ao extends Map {
  add(e, n) {
    const r = this.get(e);
    return r ? r.push(n) : this.set(e, [n]), this;
  }
}
const cd = (t, e) => {
  const n = {};
  for (const r of e) r in t && (n[r] = t[r], delete t[r]);
  return n;
}, lo = (t, e) => {
  if (Array.isArray(t) && Array.isArray(e)) return [...t, ...e];
  if (xe(t) && xe(e)) {
    const n = Object.assign({}, t);
    for (const r of Object.keys(e)) n[r] = lo(n[r], e[r]);
    return n;
  }
  return e;
}, vr = (t) => t && t.$ref && typeof t.$ref == "string", fd = (t) => t && t.anyOf && Array.isArray(t.anyOf), dd = (t) => t && t.oneOf && Array.isArray(t.oneOf), uo = (t, e = "") => {
  const [n = e, r] = t.split("#"), i = r && r !== "/" ? r : "";
  return { filePath: n, pointer: i, normalized: pd(n, i), jsonPath: fo(i) };
}, pd = (t, e) => t ? `${t}${e ? "#" + e : ""}` : e ? `#${e}` : "#", co = (t, e, n = [e]) => {
  if (!xe(t)) return;
  let r = t;
  const i = fo(e);
  for (const s of i) if (Array.isArray(r) && r.length > +s) r = r[+s];
  else if (xe(r) && s in r) r = r[s];
  else {
    if (!vr(r)) return;
    {
      const o = uo(r.$ref);
      r = o.filePath || n.includes(o.pointer) ? void 0 : co(t, o.pointer, [...n, o.pointer]);
    }
  }
  return r;
}, Fn = { slash: /\//g, tilde: /~/g, escapedSlash: /~1/g, escapedTilde: /~0/g }, fo = (t) => t.split("/").map((e) => decodeURIComponent(e.replace(Fn.escapedSlash, "/").replace(Fn.escapedTilde, "~"))).slice(1), Ur = (t) => t.length ? "/" + t.map((e) => encodeURIComponent(String(e).replace(Fn.tilde, "~0").replace(Fn.slash, "~1"))).join("/") : "", hd = (t, e) => JSON.stringify(t) == JSON.stringify(e), gd = (t) => {
  let e = 1;
  for (; t * e % 1 != 0; ) e *= 10;
  return e;
};
function md(t) {
  const e = t.reduce((n, r) => Math.max(n, gd(r)), 0);
  return t.reduce((n, r) => Math.round(n * e * r * e / po(n * e, r * e)) / e);
}
function po(t, e) {
  return e === 0 ? t : po(e, t % e);
}
const ho = (t) => {
  if (t.length === 0) return [[]];
  const e = t[0], n = t.slice(1), r = ho(n), i = [];
  for (const s of e) for (const o of r) i.push([s, ...o]);
  return i;
}, yd = (t) => {
  const e = [];
  for (const n of t) {
    if (!("properties" in n)) continue;
    const r = new Set(Object.keys(n.properties)), i = new ao();
    for (const o of r.values()) for (const a of t) if (!(a == n || a.properties && o in a.properties)) if ("patternProperties" in a && a.patternProperties) for (const l of Object.keys(a.patternProperties)) new RegExp(l).test(o) || r.delete(o);
    else "additionalProperties" in a && (a.additionalProperties === !1 ? r.delete(o) : typeof a.additionalProperties == "object" && i.add(o, a.additionalProperties));
    if (!r.size) continue;
    const s = {};
    for (const o of r.values()) i.has(o) ? s[o] = { allOf: [n.properties[o], ...i.get(o)] } : s[o] = n.properties[o];
    e.push(s);
  }
  return e;
}, bd = (t) => {
  const e = [];
  for (const n of t) {
    if (!("patternProperties" in n)) continue;
    const r = new Set(Object.keys(n.patternProperties));
    for (const s of t) if (s != n && "additionalProperties" in s && !s.additionalProperties) for (const o of r.values()) s.patternProperties && o in s.patternProperties || r.delete(o);
    if (!r.size) continue;
    const i = {};
    for (const s of r.values()) i[s] = n.patternProperties[s];
    e.push(i);
  }
  return e;
}, Ui = (t) => {
  const e = {}, n = Vr(t);
  for (const [r, i] of Object.entries(n)) i.includes(!1) ? e[r] = !1 : e[r] = i.length > 1 ? { allOf: i } : i[0];
  return e;
}, vd = (t, e) => !!t.reduce((n, r) => n && r === !0, !0) || Zt(t, e), Td = () => "Could not merge values, they are probably incompatible", Ed = (t) => `Merge rule not found for key: ${t}`, Vr = (t) => {
  const e = {};
  for (const n of t) for (const r of Object.keys(n)) Array.isArray(e[r]) ? e[r].push(n[r]) : e[r] = [n[r]];
  return e;
}, Zt = (t, e) => {
  if (t.includes(!1)) return !1;
  const n = {}, r = Vr(t);
  "properties" in r && (r.properties = yd(t)), "patternProperties" in r && (r.patternProperties = bd(t));
  for (let [i, s] of Object.entries(r)) {
    if (!s.length) continue;
    const o = e.mergeRules;
    let a = `/${i}` in o ? o[`/${i}`] : o["/?"];
    a = a && !("$" in a) && "/" in a ? a["/"] : a, a = typeof a == "function" ? a() : a;
    const l = a && "$" in a ? a.$ : void 0;
    if (!l) throw new Error(Ed(i));
    const u = s.length > 1 ? l(s, Object.assign(Object.assign({}, e), { allOfItems: t })) : s[0];
    u === void 0 ? e.mergeError(s) : n[i] = u;
  }
  return Object.keys(n).length ? n : void 0;
}, Ie = (t) => t[t.length - 1], ze = (t) => t.reduce((e, n) => e || n, !1), Ct = (t) => Math.min(...t), xt = (t) => Math.max(...t), wd = (t) => t.length > 1 ? t.reduce((e, n) => `${e}(?=${n})`, "") : t[0], go = ([t, ...e]) => e.reduce((n, r) => n.filter((i) => r.includes(i)), t), Sd = ([t, ...e]) => e.find((n) => !hd(n, t)) ? void 0 : t, ge = ([t, ...e]) => e.reduce((n, r) => lo(n, r), t), qt = (t) => ho(t).map((e) => ({ allOf: e })), Id = (t) => ({ anyOf: t }), Od = (t) => md(t), _d = (t, e) => {
  const n = t.map((i) => i.map((s) => JSON.stringify(s))), r = go(n).map((i) => JSON.parse(i)).sort();
  return r.length || e.mergeError(t), r;
}, Nd = (t, e) => {
  const n = t.map((i) => Array.isArray(i) ? i : [i]), r = go(n);
  return r.length === 1 ? r[0] : r.length ? r : void 0;
}, mo = (t) => {
  const e = /* @__PURE__ */ new Set();
  for (const n of t) for (const r of n) e.add(r);
  return Array.from(e).sort();
}, Rd = (t, e) => {
  const n = {}, r = Vr(t);
  for (const [i, s] of Object.entries(r))
    if (s.reduce((o, a) => o && Array.isArray(a), !0)) n[i] = mo(s);
    else {
      const o = s.map((a) => Array.isArray(a) ? { required: a } : a);
      n[i] = o.length > 1 ? { allOf: o } : o[0];
    }
  return n;
}, yo = (t, e) => {
  if (!t.reduce((l, u) => Array.isArray(u) || l, !1)) return Zt(t, e);
  const n = [];
  let r = 1 / 0, i = 0;
  const s = new ao();
  for (const l of e.allOfItems) "additionalItems" in l && l.additionalItems && "items" in l && Array.isArray(l.items) && s.add(l.items.length, l.additionalItems), "items" in l && (n.push(l.items), Array.isArray(l.items) && (i = Math.max(i, l.items.length), "additionalItems" in l && l.additionalItems === !1 && (r = Math.min(r, l.items.length))));
  const o = Math.min(i, r), a = [...Array(o)].map(() => ({ allOf: [] }));
  for (const l of n) if (Array.isArray(l)) for (let u = 0; u < o; u++) {
    const c = [];
    for (let f = 0; f <= u; f++) s.has(f) && c.push(...s.get(f));
    u < l.length ? a[u].allOf.push(c.length ? Object.assign(Object.assign({}, l[u]), { allOf: c }) : l[u]) : a[u].allOf.push(!c.length || { allOf: c });
  }
  else a.forEach(({ allOf: u }) => u.push(l));
  return a;
}, Ad = (t, e) => {
  const n = [], r = [];
  for (const i of e.allOfItems) "items" in i && !Array.isArray(i.items) && r.push(i.items), "additionalItems" in i && "items" in i && Array.isArray(i.items) && n.push(i.additionalItems);
  return r.length && n.forEach((i) => i.allOf = r), Zt(n, e);
}, W = (t = "draft-06", e = {}) => Object.assign(Object.assign(Object.assign(Object.assign({ "/maximum": { $: Ct }, "/exclusiveMaximum": { $: ze }, "/minimum": { $: xt }, "/exclusiveMinimum": { $: ze }, "/maxLength": { $: Ct }, "/minLength": { $: xt }, "/maxItems": { $: Ct }, "/minItems": { $: xt }, "/uniqueItems": { $: ze }, "/maxProperties": { $: Ct }, "/minProperties": { $: xt }, "/required": { $: mo }, "/multipleOf": { $: Od }, "/enum": { $: _d }, "/type": { $: Nd }, "/allOf": { "/*": () => W(t, e), $: qt }, "/not": { $: Id }, "/oneOf": { "/*": () => W(t, e), $: qt, sibling: ["definitions", "$defs", "$id", "$schema"] }, "/anyOf": { "/*": () => W(t, e), $: qt, sibling: ["definitions", "$defs", "$id", "$schema"] }, "/properties": { "/*": () => W(t, e), $: Ui }, "/items": () => Object.assign(Object.assign({}, W(t, e)), { $: yo, "/*": ({ key: n }) => typeof n == "number" ? W(t, e) : {} }), "/additionalProperties": () => Object.assign(Object.assign({}, W(t, e)), { $: vd }), "/additionalItems": () => Object.assign(Object.assign({}, W(t, e)), { $: Ad }), "/patternProperties": { "/*": () => W(t, e), $: Ui }, "/pattern": { $: wd }, "/readOnly": { $: ze }, "/writeOnly": { $: ze }, "/example": { $: ge }, "/examples": { $: ge }, "/deprecated": { $: ze } }, t !== "draft-04" ? { "/propertyNames": () => W(t, e), "/contains": () => W(t, e), "/dependencies": { "/*": () => W(t, e), $: Rd }, "/const": { $: Sd }, "/exclusiveMaximum": { $: Ct }, "/exclusiveMinimum": { $: xt }, "/$defs": { "/*": () => W(t, e), $: ge } } : {}), { "/definitions": { "/*": () => W(t, e), $: ge }, "/xml": { $: ge }, "/externalDocs": { $: Ie }, "/description": { $: Ie }, "/title": { $: Ie }, "/format": { $: Ie }, "/default": { $: Ie }, "/?": { $: Ie } }), e), { $: Zt }), Bt = (t) => W(t, { "/discriminator": { $: ge }, "/oneOf": { "/*": () => Bt(t), $: qt, sibling: ["discriminator"] }, "/anyOf": { "/*": () => Bt(t), $: qt, sibling: ["discriminator"] } }), Hn = (t) => t === "3.0.x" ? Object.assign(Object.assign({}, Bt("draft-04")), { "/items": ({ key: e }) => Object.assign(Object.assign({}, Bt("draft-04")), { $: yo }) }) : Bt("draft-06"), et = (t) => ({ "/*": { "/schema": Hn(t) } }), Vi = (t) => ({ "/content": { "/*": { "/schema": Hn(t), "/encoding": { "/headers": et(t) } } } }), qi = (t) => ({ "/*": { "/headers": et(t), "/content": { "/*": { "/schema": Hn(t), "/encoding": { "/headers": et(t) } } } } }), kd = (t = "3.0.x") => ({ "/paths": { "/*": { "/*": { "/parameters": et(t), "/requestBody": Vi(t), "/responses": qi(t) }, "/parameters": et(t) } }, "/components": { "/schemas": { "/*": Hn(t) }, "/responses": qi(t), "/parameters": et(t), "/requestBodies": { "/*": Vi(t) }, "/headers": et(t) } }), Ye = W("draft-06", { "/args": () => Ye, "/nullable": { $: ze }, "/specifiedByURL": { $: Ie }, "/values": { $: ge, "/*": { $: ge, "/description": { $: Ie }, "/deprecated": { $: Ie, "/reason": { $: Ie } } } }, "/interfaces": { $: ge, "/*": { $: ge } }, "/directives": { $: ge, "/*": () => Object.assign(Object.assign({}, Ye), { "/meta": { $: ge } }) } }), Fd = { "/queries": { "/*": () => Ye }, "/mutations": { "/*": () => Ye }, "/subscriptions": { "/*": () => Ye }, "/components": { "/*": { "/*": Ye }, "/directives": { "/*": { "/args": () => Ye } } } }, Bi = (t, e, n) => {
  const r = n.sibling || [], i = t, s = e, o = i[s], a = Wt(i, [typeof s == "symbol" ? s : s + ""]), l = cd(a, r);
  return Object.keys(a).length ? Object.assign({ [e]: o.map((u) => ({ allOf: [a, u] })) }, l) : t;
}, bo = (t, e, n, r) => {
  const i = [], s = Ur(e), o = [], a = { pointer: s, data: "", refs: [] };
  for (const u of t) if (vr(u) && !o.includes(u.$ref)) {
    a.data === "" && (a.data = JSON.stringify(t));
    const { $ref: c } = u, f = Wt(u, ["$ref"]), { filePath: d, normalized: h, pointer: g } = uo(c);
    if (s === g) continue;
    const T = r.find((w) => w.refs.includes(u.$ref) && w.data === a.data && g !== w.pointer);
    if (T) return { allOfItems: [{ $ref: `#${T.pointer}` }], brokenRefs: o };
    a.refs.push(h);
    const F = d ? void 0 : co(n, g);
    F === void 0 ? (o.push(h), i.push(u)) : i.push(F), Object.keys(f).length && i.push(f);
  } else i.push(u);
  a.refs.length && r.push(a);
  const l = vo(i);
  return l.find((u) => vr(u) && !o.includes(u.$ref)) ? bo(l, e, n, r) : { allOfItems: l, brokenRefs: o };
}, vo = (t) => {
  const e = [];
  for (const n of t) if (xe(n)) if (n.allOf && Array.isArray(n.allOf)) {
    const { allOf: r } = n, i = Wt(n, ["allOf"]), s = Object.keys(i).length ? [...r, i] : r;
    e.push(...vo(s));
  } else e.push(n);
  return e;
}, Cd = (t) => {
  if (typeof t != "object" || !t) return W();
  if ("openapi" in t && typeof t.openapi == "string" && /3.+/.test(t.openapi)) {
    const e = t.openapi.startsWith("3.1") ? "3.1.x" : "3.0.x";
    return kd(e);
  }
  return "graphapi" in t && typeof t.graphapi == "string" ? Fd : W();
}, xd = (t, e) => {
  var n;
  const r = (n = void 0) !== null && n !== void 0 ? n : Cd(t);
  return ((i, s = [], o = {}) => {
    var a;
    s = Array.isArray(s) ? s : [s];
    const l = { "#": void 0 }, u = Object.assign({ state: Object.assign(Object.assign({}, (a = o.state) !== null && a !== void 0 ? a : {}), { root: l, node: l }) }, o.rules ? { rules: o.rules } : {}), [c, f] = ud();
    return ld(i, [c, ...s, f], u), l["#"];
  })(t, Dd(e), { rules: r });
}, Dd = (t) => {
  const e = /* @__PURE__ */ new Map();
  let n;
  const r = [];
  return ({ value: i, key: s, path: o, rules: a, state: l }) => {
    var u;
    o.length || (n = i);
    const c = (D) => {
      var E;
      const _ = Ld(o);
      _ ? e.set(..._) : (E = void 0) === null || E === void 0 || E.call(t, Td(), o, D);
    }, f = () => {
      const { node: D } = l, E = Ur(o);
      if (e.has(E)) {
        const _ = e.get(E), S = D[s];
        Array.isArray(S) && (S.length < 2 && c(i?.allOf || []), S.splice(_, 1));
      }
    };
    if (!xe(i) || Array.isArray(i)) return { exitHook: f };
    if (!((D) => !!D && D["/allOf"] && "$" in D["/allOf"])(a)) return { exitHook: f };
    const { allOf: d } = i, h = Wt(i, ["allOf"]), g = [];
    if (Array.isArray(d) && g.push(...d), g.length) Object.keys(h).length && g.push(h);
    else {
      const { $ref: D } = h;
      Wt(h, ["$ref"]);
    }
    if (!g.length) return { value: h, exitHook: f };
    const { allOfItems: T, brokenRefs: F } = bo(g, o, n, r);
    if (F.length) {
      for (const D of F) (u = void 0) === null || u === void 0 || u.call(t, "Cannot resolve $ref", o, D);
      return { value: { allOf: T }, exitHook: f };
    }
    if (T.length < 2) return { value: T.length ? T[0] : {}, exitHook: f };
    const w = Zt(T, { allOfItems: T, mergeRules: a, mergeError: c });
    return t?.mergeCombinarySibling && fd(w) ? { value: Bi(w, "anyOf", a["/anyOf"]), exitHook: f } : t?.mergeCombinarySibling && dd(w) ? { value: Bi(w, "oneOf", a["/oneOf"]), exitHook: f } : { value: w, exitHook: f };
  };
}, Ld = (t) => {
  for (let e = t.length - 2; e >= 0; e--) if (t[e] === "anyOf" || t[e] === "oneOf") {
    const n = t.slice(0, e + 1);
    return [Ur(n), t[e + 1]];
  }
};
var ht = /* @__PURE__ */ jo(), or = {}, Gi;
function $d() {
  return Gi || (Gi = 1, function(t) {
    t.__esModule = !0, t.OpenAPIV2 = t.OpenAPIV3 = void 0, function(e) {
      (function(n) {
        n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch", n.TRACE = "trace";
      })(e.HttpMethods || (e.HttpMethods = {}));
    }(t.OpenAPIV3 || (t.OpenAPIV3 = {})), function(e) {
      (function(n) {
        n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch";
      })(e.HttpMethods || (e.HttpMethods = {}));
    }(t.OpenAPIV2 || (t.OpenAPIV2 = {}));
  }(or)), or;
}
var Pd = $d();
const ar = /* @__PURE__ */ new Map(), jd = (t, e) => {
  ar.has(t) || ar.set(t, /* @__PURE__ */ new Map());
  const n = ar.get(t);
  if (n?.has(e))
    return n.get(e);
  const r = e.split("/").slice(1);
  let i = t;
  for (const s of r)
    (!i || typeof i != "object") && (i = null), i = i[s] ?? null;
  return n?.set(e, i), i;
}, lr = /* @__PURE__ */ new Map(), Md = (t) => t !== null && typeof t == "object", Ud = async (t, e = []) => {
  if (lr.has(t))
    return lr.get(t);
  const n = structuredClone(t), r = /* @__PURE__ */ new Set(), i = async (o, a) => {
    if (Md(o)) {
      if (r.has(o))
        return Mo;
      if (r.add(o), Array.isArray(o))
        for (let l = 0; l < o.length; l++)
          o[l] = await i(o[l]);
      else {
        if ("$ref" in o && typeof o.$ref == "string") {
          o.__$ref = o.$ref;
          for (const u of e) {
            const c = await u(o.$ref);
            if (c) return await i(c);
          }
          const l = await jd(n, o.$ref);
          return await i(l);
        }
        for (const l in o)
          o[l] = await i(o[l]);
      }
      r.delete(o);
    }
    return o;
  }, s = await i(n);
  return lr.set(t, s), s;
}, Vd = (t) => (t.openapi?.startsWith("3.0") && (t.openapi = "3.1.1"), t = Le(t, (e) => (typeof e.type < "u" && e.nullable === !0 && (e.type = ["null", e.type], delete e.nullable), e)), t = Le(t, (e) => (e.exclusiveMinimum === !0 ? (e.exclusiveMinimum = e.minimum, delete e.minimum) : e.exclusiveMinimum === !1 && delete e.exclusiveMinimum, e.exclusiveMaximum === !0 ? (e.exclusiveMaximum = e.maximum, delete e.maximum) : e.exclusiveMaximum === !1 && delete e.exclusiveMaximum, e)), t = Le(t, (e, n) => (e.example !== void 0 && (qd(n ?? []) ? e.examples = [e.example] : e.examples = {
  default: {
    value: e.example
  }
}, delete e.example), e)), t = Le(t, (e, n) => {
  if (e.type === "object" && e.properties !== void 0 && n?.slice(0, -1)?.some((s, o) => s === "content" && n?.[o + 1] === "multipart/form-data")) {
    const s = Object.entries(e.properties);
    for (const [, o] of s)
      typeof o == "object" && o.type === "string" && o.format === "binary" && (o.contentMediaType = "application/octet-stream", delete o.format);
  }
  return e;
}), t = Le(t, (e, n) => n?.includes("content") && n.includes("application/octet-stream") ? {} : e.type === "string" && e.format === "binary" ? {
  type: "string",
  contentMediaType: "application/octet-stream"
} : e), t = Le(t, (e) => {
  if (!(e.type === "string" && e.format === "binary"))
    return e;
}), t = Le(t, (e) => e.type === "string" && e.format === "base64" ? {
  type: "string",
  contentEncoding: "base64"
} : e), t = Le(t, (e, n) => e.type === "string" && e.format === "byte" ? {
  type: "string",
  contentEncoding: "base64",
  contentMediaType: n?.slice(0, -1)?.find(
    (s, o) => n?.[o - 1] === "content"
  )
} : e), t);
function qd(t) {
  return [
    ["components", "schemas"],
    "properties",
    "items",
    "allOf",
    "anyOf",
    "oneOf",
    "not",
    "additionalProperties"
  ].some((n) => Array.isArray(n) ? n.every((r, i) => t[i] === r) : t.includes(n)) || t.includes("schema") || t.some((n) => n.endsWith("Schema"));
}
const Bd = Object.values(Pd.OpenAPIV3.HttpMethods), Gd = async (t) => {
  if (typeof t == "string") {
    if (t.trim().startsWith("{"))
      try {
        return JSON.parse(t);
      } catch (r) {
        throw new ht.GraphQLError("Invalid JSON schema", {
          originalError: r
        });
      }
    if (t.includes("://")) {
      let r;
      try {
        r = await fetch(t, {
          cache: "force-cache"
        });
      } catch (s) {
        throw new ht.GraphQLError("Failed to fetch schema", {
          originalError: s
        });
      }
      if (!r.ok)
        throw new ht.GraphQLError(
          `Failed to fetch schema: ${r.statusText}`
        );
      const i = await r.text();
      try {
        return i.trim().startsWith("{") ? JSON.parse(i) : (await import("./index-nGbmHh_A.js")).parse(i);
      } catch (s) {
        throw new ht.GraphQLError("Fetched invalid schema", {
          originalError: s
        });
      }
    }
    const n = (await import("./index-nGbmHh_A.js")).parse(t);
    if (typeof n == "object") return n;
  }
  if (typeof t == "object") return t;
  throw new ht.GraphQLError(`Unsupported schema input: ${t}`);
}, Qd = async (t) => {
  const e = await Gd(t);
  if (!e.openapi)
    throw new ht.GraphQLError("OpenAPI version is not defined");
  const n = await Ud(e), r = Vd(n);
  return xd(r);
}, Hd = (t, e) => {
  const n = e.summary || e.operationId || `${e.method}-${e.path}`;
  return t(n);
}, K = new Du({
  defaultFieldNullability: !1
}), Cn = K.addScalarType("JSON", Uo), Be = K.addScalarType("JSONObject", Vo), qr = K.addScalarType("JSONSchema", qo), st = (t) => Object.fromEntries(
  Object.entries(t).filter(([e]) => e.startsWith("x-"))
), Qi = (t, e) => {
  const n = t.tags ?? [], r = new Set(
    Object.values(t.paths ?? {}).flatMap((l) => Object.values(l ?? {})).flatMap((l) => l.tags ?? [])
  ), i = Object.values(t.paths ?? {}).some(
    (l) => Object.values(l ?? {}).some(
      (u) => !u.tags?.length
    )
  ), s = [
    // Keep root tags that are actually used in operations
    ...n.filter((l) => r.has(l.name)).map((l) => ({ ...l, slug: e[l.name] })),
    // Add tags found in operations but not defined in root tags
    ...Array.from(r).filter((l) => !n.some((u) => u.name === l)).map((l) => ({ name: l, slug: e[l] })),
    // Add untagged operations if there are any
    ...i ? [{ name: void 0, slug: void 0 }] : []
  ], o = t["x-tagGroups"] ?? [];
  if (o.length === 0) return s;
  const a = o.flatMap((l) => l.tags);
  return s.sort((l, u) => {
    if (!l.name || !u.name) return 0;
    const c = a.indexOf(l.name), f = a.indexOf(u.name);
    return c === -1 && f === -1 ? 0 : c === -1 ? 1 : f === -1 ? -1 : c - f;
  });
}, Kd = (t, e = []) => {
  const n = Bo(), r = Array.from(
    /* @__PURE__ */ new Set([
      ...t.flatMap((i) => i.tags ?? []),
      ...e.map((i) => i.name)
    ])
  );
  return {
    operations: Object.fromEntries(
      t.map((i) => [
        Tr(i),
        Hd(n, i)
      ])
    ),
    tags: Object.fromEntries(r.map((i) => [i, n(i)]))
  };
}, Tr = (t) => [t.path, t.method, t.operationId, t.summary].filter(Boolean).join("-"), Hi = (t) => Object.entries(t ?? {}).flatMap(
  ([n, r]) => Bd.flatMap((i) => {
    if (!r?.[i]) return [];
    const s = r[i], o = r.parameters ?? [], a = s.parameters ?? [], l = [
      ...o.filter(
        // remove path parameters that are already defined in the operation
        (u) => !a.some(
          (c) => c.name === u.name && c.in === u.in
        )
      ),
      ...a
    ];
    return {
      ...s,
      method: i,
      path: n,
      parameters: l,
      tags: s.tags ?? []
    };
  })
), Gt = K.objectRef("SchemaTag");
Gt.implement({
  fields: (t) => ({
    name: t.exposeString("name", { nullable: !0 }),
    slug: t.exposeString("slug", { nullable: !0 }),
    isUntagged: t.field({ type: "Boolean", resolve: (e) => !e.name }),
    description: t.exposeString("description", { nullable: !0 }),
    operations: t.field({
      type: [wo],
      resolve: (e, n, r) => {
        const i = r.tags.map((s) => s.name);
        return r.operations.filter(
          (s) => e.name ? s.tags?.includes(e.name) : s.tags?.length === 0 || // If none of the tags are present in the root tags, then show them here
          s.tags?.every((o) => !i.includes(o))
        ).map((s) => ({ ...s, parentTag: e.name }));
      }
    }),
    prev: t.field({
      type: Gt,
      nullable: !0,
      resolve: (e, n, r) => {
        const i = r.tags.findIndex((s) => s.slug === e.slug);
        return r.tags[i - 1];
      }
    }),
    next: t.field({
      type: Gt,
      nullable: !0,
      resolve: (e, n, r) => {
        const i = r.tags.findIndex((s) => s.slug === e.slug);
        return r.tags[i + 1];
      }
    }),
    extensions: t.field({
      type: Be,
      resolve: (e) => st(e),
      nullable: !0
    })
  })
});
const Wd = K.objectRef("Server").implement({
  fields: (t) => ({
    url: t.exposeString("url"),
    description: t.exposeString("description", { nullable: !0 })
  })
}), zd = K.objectRef("PathItem").implement({
  fields: (t) => ({
    path: t.exposeString("path"),
    methods: t.exposeStringList("methods")
  })
}), Jd = K.objectRef("TagItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    description: t.exposeString("description", { nullable: !0 }),
    extensions: t.field({
      type: Be,
      resolve: (e) => st(e),
      nullable: !0
    })
  })
}), Yd = K.objectRef("EncodingItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    contentType: t.exposeString("contentType", { nullable: !0 }),
    headers: t.expose("headers", { type: Be, nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 })
  })
}), To = K.objectRef("ExampleItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    value: t.expose("value", { type: Cn, nullable: !0 }),
    externalValue: t.exposeString("externalValue", { nullable: !0 })
  })
}), Xd = K.enumType("ParameterIn", {
  values: ["query", "header", "path", "cookie"]
}), Zd = K.objectRef("ParameterItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    in: t.field({
      type: Xd,
      resolve: (e) => e.in
    }),
    description: t.exposeString("description", { nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 }),
    allowEmptyValue: t.exposeBoolean("allowEmptyValue", { nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 }),
    examples: t.field({
      type: [To],
      resolve: (e) => Object.entries(e.examples ?? {}).map(([n, r]) => ({
        name: n,
        ...typeof r == "string" ? { value: r } : r
      })),
      nullable: !0
    }),
    schema: t.expose("schema", { type: qr, nullable: !0 }),
    extensions: t.field({
      type: Be,
      resolve: (e) => st(e),
      nullable: !0
    })
  })
}), Eo = K.objectRef("MediaTypeObject").implement({
  fields: (t) => ({
    mediaType: t.exposeString("mediaType"),
    schema: t.expose("schema", { type: qr, nullable: !0 }),
    examples: t.expose("examples", { type: [To], nullable: !0 }),
    encoding: t.expose("encoding", { type: [Yd], nullable: !0 })
  })
}), ep = K.objectRef("RequestBodyObject").implement({
  fields: (t) => ({
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [Eo], nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 })
  })
}), tp = K.objectRef("ResponseItem").implement({
  fields: (t) => ({
    statusCode: t.exposeString("statusCode"),
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [Eo], nullable: !0 }),
    headers: t.expose("headers", { type: Cn, nullable: !0 }),
    links: t.expose("links", { type: Cn, nullable: !0 }),
    extensions: t.field({
      type: Be,
      resolve: (e) => st(e),
      nullable: !0
    })
  })
}), wo = K.objectRef("OperationItem").implement({
  fields: (t) => ({
    slug: t.field({
      type: "String",
      resolve: (e, n, r) => {
        const i = r.slugs.operations[Tr(e)];
        if (!i)
          throw new Error(
            `No slug found for operation: ${Tr(e)}`
          );
        return i;
      }
    }),
    path: t.exposeString("path"),
    method: t.exposeString("method"),
    operationId: t.exposeString("operationId", { nullable: !0 }),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    contentTypes: t.stringList({
      resolve: (e) => Object.keys(e.requestBody?.content ?? {})
    }),
    parameters: t.expose("parameters", {
      type: [Zd],
      nullable: !0
    }),
    requestBody: t.field({
      type: ep,
      resolve: (e) => ({
        description: e.requestBody?.description,
        required: e.requestBody?.required,
        content: Object.entries(e.requestBody?.content ?? {}).map(
          ([n, r]) => ({
            mediaType: n,
            schema: r.schema,
            examples: r.examples ? Object.entries(r.examples).map(([i, s]) => ({
              name: i,
              ...typeof s == "string" ? { value: s } : s
            })) : [],
            encoding: Object.entries(r.encoding ?? {}).map(
              ([i, s]) => ({ name: i, ...s })
            )
          })
        )
      }),
      nullable: !0
    }),
    responses: t.field({
      type: [tp],
      resolve: (e) => Object.entries(e.responses ?? {}).map(
        ([n, r]) => ({
          statusCode: n,
          description: r.description,
          content: Object.entries(r.content ?? {}).map(
            ([i, { schema: s, examples: o }]) => ({
              mediaType: i,
              schema: s,
              examples: o ? Object.entries(o).map(([a, l]) => ({
                name: a,
                ...typeof l == "string" ? { value: l } : l
              })) : []
            })
          ),
          headers: r.headers,
          links: r.links
        })
      )
    }),
    tags: t.field({
      type: [Jd],
      resolve: (e, n, r) => e.tags?.map((i) => ({
        name: i,
        description: r.schema.tags?.find((s) => s.name === i)?.description
      })),
      nullable: !0
    }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 }),
    extensions: t.field({
      type: Be,
      resolve: (e) => st(e),
      nullable: !0
    })
  })
}), np = K.objectRef("SchemaItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    schema: t.expose("schema", { type: qr }),
    extensions: t.expose("extensions", {
      type: Be,
      nullable: !0
    })
  })
}), So = K.objectRef("Components");
So.implement({
  fields: (t) => ({
    schemas: t.field({
      type: [np],
      resolve: (e) => Object.entries(e.schemas ?? {}).map(([n, r]) => ({
        name: n,
        schema: r,
        extensions: st(r)
      })),
      nullable: !0
    })
  })
});
const rp = K.objectRef("Schema").implement({
  fields: (t) => ({
    openapi: t.string({ resolve: (e) => e.openapi }),
    url: t.string({
      resolve: (e) => e.servers?.at(0)?.url,
      nullable: !0
    }),
    servers: t.field({
      type: [Wd],
      resolve: (e) => e.servers ?? []
    }),
    title: t.string({ resolve: (e) => e.info.title }),
    version: t.string({ resolve: (e) => e.info.version }),
    description: t.string({
      resolve: (e) => e.info.description,
      nullable: !0
    }),
    summary: t.string({
      resolve: (e) => e.info.summary,
      nullable: !0
    }),
    paths: t.field({
      type: [zd],
      resolve: (e) => Object.entries(e.paths ?? {}).map(([n, r]) => ({
        path: n,
        // biome-ignore lint/style/noNonNullAssertion: value is guaranteed to be defined
        methods: Object.keys(r)
      }))
    }),
    tag: t.field({
      type: Gt,
      args: {
        slug: t.arg.string(),
        name: t.arg.string(),
        untagged: t.arg.boolean()
      },
      nullable: !0,
      resolve: (e, n, r) => {
        if (n.untagged)
          return r.tags.find((i) => i.name === void 0);
        if (n.slug)
          return r.tags.find((i) => i.slug === n.slug);
        if (n.name)
          return r.tags.find((i) => i.name === n.name);
      }
    }),
    tags: t.field({
      type: [Gt],
      resolve: (e, n, r) => r.tags
    }),
    operations: t.field({
      type: [wo],
      args: {
        path: t.arg.string(),
        method: t.arg.string(),
        operationId: t.arg.string(),
        tag: t.arg.string(),
        untagged: t.arg.boolean()
      },
      resolve: (e, n, r) => r.operations.filter((i) => (!n.operationId || i.operationId === n.operationId) && (!n.path || i.path === n.path) && (!n.method || i.method === n.method) && (!n.tag || i.tags?.some((s) => n.tag?.includes(s))) && (!n.untagged || (i.tags ?? []).length === 0))
    }),
    components: t.field({
      type: So,
      resolve: (e) => e.components,
      nullable: !0
    }),
    extensions: t.field({
      type: Be,
      resolve: (e) => st(e),
      nullable: !0
    })
  })
}), ip = K.enumType("SchemaType", {
  values: ["url", "file", "raw"]
});
K.queryType({
  fields: (t) => ({
    schema: t.field({
      type: rp,
      args: {
        type: t.arg({ type: ip, required: !0 }),
        input: t.arg({ type: Cn, required: !0 })
      },
      resolve: async (e, n, r) => {
        if (n.type === "file" && typeof n.input == "string") {
          const i = r.schemaImports?.[n.input];
          if (!i)
            throw new Error(`No schema loader found for path: ${n.input}`);
          const { schema: s, slugs: o } = await i();
          r.schema = s, r.operations = Hi(s.paths), r.slugs = o, r.tags = Qi(s, r.slugs.tags);
        } else
          r.schema = await Qd(n.input), r.operations = Hi(r.schema.paths), r.slugs = Kd(r.operations), r.tags = Qi(r.schema, r.slugs.tags);
        return r.schema;
      }
    })
  })
});
const sp = K.toSchema(), op = (t) => sd({ schema: sp, batching: !0, ...t }), hp = (t) => op({
  context: {
    schemaImports: t.schemaImports
  },
  plugins: [
    Ll({
      logFn: (e, { args: n }) => {
      }
    })
  ]
});
export {
  hp as createServer
};
//# sourceMappingURL=createServer-BA0aitmR.js.map
