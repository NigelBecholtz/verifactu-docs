import { j as o } from "./jsx-runtime-DywqP_6a.js";
import { PublicClientApplication as A, EventType as f } from "@azure/msal-browser";
import { E as I } from "./index-CVfG8Pb4.js";
import { C as T } from "./ClientOnly-E7hGysn1.js";
import { j as S } from "./ZudokuContext-BcqSiygJ.js";
import { C, A as c } from "./errors-ouIp07AW.js";
import { C as k, O as w } from "./OAuthErrorPage-DCjFngGS.js";
import { u as h } from "./hook-BkLXq8pm.js";
const u = "/oauth/callback";
class y extends C {
  msalInstance;
  scopes;
  redirectToAfterSignUp;
  redirectToAfterSignIn;
  redirectToAfterSignOut;
  constructor({
    clientId: e,
    tenantName: t,
    policyName: n,
    scopes: r,
    redirectToAfterSignUp: s,
    redirectToAfterSignIn: a,
    redirectToAfterSignOut: d = "/",
    basePath: m = ""
  }) {
    super(), this.scopes = r ?? ["openid", "profile", "email"], this.redirectToAfterSignUp = s, this.redirectToAfterSignIn = a, this.redirectToAfterSignOut = d;
    const p = `https://${t}.b2clogin.com/${t}.onmicrosoft.com/${n}`, g = S(m, u);
    this.msalInstance = new A({
      auth: {
        clientId: e,
        authority: p,
        redirectUri: g,
        knownAuthorities: [`${t}.b2clogin.com`]
      },
      cache: {
        cacheLocation: "sessionStorage",
        storeAuthStateInCookie: !1
      }
    }), this.msalInstance.initialize().then(async () => {
      this.msalInstance.handleRedirectPromise().then((i) => {
        i && this.handleAuthResponse(i);
      }), this.msalInstance.addEventCallback((i) => {
        i.eventType === f.LOGIN_SUCCESS && this.handleAuthResponse(i.payload);
      });
    });
  }
  handleAuthResponse(e) {
    const { accessToken: t, idToken: n, scopes: r, account: s } = e;
    if (!s)
      throw new c("No account information in response");
    const a = [s.idTokenClaims?.given_name, s.idTokenClaims?.family_name].filter(Boolean).join(" ") || s.username;
    h.getState().setLoggedIn({
      providerData: {
        accessToken: t,
        idToken: n,
        scopes: r,
        account: s
      },
      profile: {
        sub: s.localAccountId,
        email: s.username,
        name: a,
        emailVerified: !0,
        // Azure B2C emails are verified
        pictureUrl: void 0
        // Azure B2C doesn't provide profile pictures by default
      }
    });
  }
  async signUp({ redirectTo: e } = {}) {
    const t = this.redirectToAfterSignUp ?? e ?? "/";
    sessionStorage.setItem("redirect-to", t), await this.msalInstance.loginRedirect({
      scopes: this.scopes,
      prompt: "select_account"
    });
  }
  async signIn({ redirectTo: e } = {}) {
    const t = this.redirectToAfterSignIn ?? e ?? "/";
    sessionStorage.setItem("redirect-to", t), await this.msalInstance.loginRedirect({
      scopes: this.scopes
    });
  }
  async getAccessToken() {
    const e = this.msalInstance.getAllAccounts()[0];
    if (!e)
      throw new c("No active account");
    try {
      return (await this.msalInstance.acquireTokenSilent({
        scopes: this.scopes,
        account: e
      })).accessToken;
    } catch {
      throw await this.msalInstance.acquireTokenRedirect({
        scopes: this.scopes,
        account: e
      }), new c(
        "Token acquisition failed after interactive attempt"
      );
    }
  }
  signRequest = async (e) => {
    const t = await this.getAccessToken();
    return e.headers.set("Authorization", `Bearer ${t}`), e;
  };
  signOut = async () => {
    const e = this.msalInstance.getAllAccounts()[0];
    e && await this.msalInstance.logoutRedirect({
      account: e,
      postLogoutRedirectUri: window.location.origin + this.redirectToAfterSignOut
    }), h.getState().setLoggedOut();
  };
  handleCallback = async () => {
    const e = sessionStorage.getItem("redirect-to") ?? "/";
    return sessionStorage.removeItem("redirect-to"), e;
  };
  getRoutes() {
    return [
      ...super.getRoutes(),
      {
        path: u,
        element: /* @__PURE__ */ o.jsx(T, { children: /* @__PURE__ */ o.jsx(
          I,
          {
            fallbackRender: ({ error: e }) => /* @__PURE__ */ o.jsx(w, { error: e }),
            children: /* @__PURE__ */ o.jsx(k, { handleCallback: this.handleCallback })
          }
        ) })
      }
    ];
  }
}
const B = (l) => new y(l);
export {
  y as AzureB2CAuthPlugin,
  B as default
};
//# sourceMappingURL=zudoku.auth-azureb2c.js.map
