{"version":3,"file":"SchemaView-BYH_AirG.js","sources":["../src/lib/util/groupBy.ts","../src/lib/plugins/openapi/components/ConstValue.tsx","../src/lib/plugins/openapi/components/EnumValues.tsx","../src/lib/plugins/openapi/ParamInfos.tsx","../src/lib/plugins/openapi/schema/AllOfGroup/AllOfGroupConnector.tsx","../src/lib/plugins/openapi/schema/AllOfGroup/AllOfGroupItem.tsx","../src/lib/plugins/openapi/schema/AllOfGroup/AllOfGroupView.tsx","../src/lib/plugins/openapi/schema/SchemaExampleAndDefault.tsx","../src/lib/plugins/openapi/schema/utils.ts","../src/lib/plugins/openapi/schema/SchemaPropertyItem.tsx","../src/lib/plugins/openapi/schema/union-helpers.ts","../src/lib/plugins/openapi/schema/UnionView.tsx","../src/lib/plugins/openapi/schema/SchemaView.tsx"],"sourcesContent":["// biome-ignore-all lint/suspicious/noExplicitAny: Allow any type\nexport const groupBy = <\n  T extends Record<PropertyKey, any>,\n  KeySelector extends (item: T) => PropertyKey,\n>(\n  arr: T[],\n  keySelector: KeySelector,\n): Partial<Record<ReturnType<KeySelector>, T[]>> => {\n  return arr.reduce(\n    (accumulator, val) => {\n      const groupedKey = keySelector(val) as ReturnType<KeySelector>;\n      if (!accumulator[groupedKey]) {\n        accumulator[groupedKey] = [];\n      }\n      accumulator[groupedKey].push(val);\n      return accumulator;\n    },\n    {} as Record<ReturnType<KeySelector>, T[]>,\n  );\n};\n","import type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { SelectOnClick } from \"./SelectOnClick.js\";\n\nexport const ConstValue = ({\n  schema,\n  hideDescription = false,\n}: {\n  schema: SchemaObject;\n  hideDescription?: boolean;\n}) => {\n  return (\n    <div className=\"flex flex-col gap-1 text-xs\">\n      <div>\n        <span className=\"text-muted-foreground\">Const value: </span>\n        <SelectOnClick className=\"border rounded px-1 font-mono\">\n          {schema.const}\n        </SelectOnClick>\n        {!hideDescription && schema.description && (\n          <div className=\"text-muted-foreground\">{schema.description}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"zudoku/ui/Button.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { SelectOnClick } from \"./SelectOnClick.js\";\n\nexport const EnumValues = ({\n  values,\n  className,\n  maxVisibleValues = 8,\n}: {\n  values: Array<string | number>;\n  className?: string;\n  maxVisibleValues?: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!values.length) return null;\n\n  const shouldCollapse = values.length > maxVisibleValues;\n  const visibleValues =\n    shouldCollapse && !isOpen ? values.slice(0, maxVisibleValues) : values;\n\n  return (\n    <div className={cn(\"flex flex-wrap gap-1.5 text-xs\", className)}>\n      <span className=\"text-muted-foreground\">Enum values: </span>\n      {visibleValues.map((value) => (\n        <div key={value}>\n          <SelectOnClick className=\"border rounded-sm px-1 font-mono\">\n            {value}\n          </SelectOnClick>\n        </div>\n      ))}\n      {shouldCollapse && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-fit px-0\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          {isOpen ? (\n            <div className=\"flex items-center gap-1\">\n              <ChevronUpIcon size={12} />\n              <span className=\"text-muted-foreground\">show less</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-1\">\n              <ChevronDownIcon size={12} />\n              <span className=\"text-muted-foreground\">\n                show {values.length - maxVisibleValues} more\n              </span>\n            </div>\n          )}\n        </Button>\n      )}\n    </div>\n  );\n};\n","import { ChevronsLeftRightIcon } from \"lucide-react\";\nimport { isValidElement, useState } from \"react\";\nimport { InlineCode } from \"../../components/InlineCode.js\";\nimport type { SchemaObject } from \"../../oas/parser/index.js\";\nimport { cn } from \"../../util/cn.js\";\n\nconst Pattern = ({ pattern }: { pattern: string }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const isExpandable = pattern.length > 20;\n  const shortPattern = isExpandable ? `${pattern.slice(0, 20)}â€¦` : pattern;\n\n  return (\n    <InlineCode\n      className={cn(\"text-xs\", isExpandable && \"cursor-pointer\")}\n      onClick={() => setIsExpanded(!isExpanded)}\n      selectOnClick={false}\n    >\n      {isExpanded ? pattern : shortPattern}\n      {isExpandable && (\n        <button type=\"button\" className=\"p-1 translate-y-[2px]\">\n          {!isExpanded && <ChevronsLeftRightIcon size={12} />}\n        </button>\n      )}\n    </InlineCode>\n  );\n};\n\nconst getSchemaInfos = (schema?: SchemaObject) => {\n  if (!schema) return [];\n\n  return [\n    schema.type === \"array\" && schema.items.type\n      ? Array.isArray(schema.items.type)\n        ? `(${schema.items.type.join(\" | \")})[]`\n        : `${schema.items.type}[]`\n      : Array.isArray(schema.type)\n        ? schema.type.join(\" | \")\n        : schema.type,\n\n    schema.enum && \"enum\",\n    schema.const && \"const\",\n    schema.format,\n    schema.minimum !== undefined && `min: ${schema.minimum}`,\n    schema.maximum !== undefined && `max: ${schema.maximum}`,\n    schema.minLength !== undefined && `minLength: ${schema.minLength}`,\n    schema.maxLength !== undefined && `maxLength: ${schema.maxLength}`,\n    schema.minItems !== undefined && `minItems: ${schema.minItems}`,\n    schema.maxItems !== undefined && `maxItems: ${schema.maxItems}`,\n    schema.minProperties !== undefined && `minProps: ${schema.minProperties}`,\n    schema.maxProperties !== undefined && `maxProps: ${schema.maxProperties}`,\n    schema.uniqueItems && \"unique\",\n    schema.readOnly && \"readOnly\",\n    schema.writeOnly && \"writeOnly\",\n    schema.deprecated && \"deprecated\",\n    schema.pattern && (\n      <>\n        pattern: <Pattern pattern={schema.pattern} />\n      </>\n    ),\n  ];\n};\n\nexport const ParamInfos = ({\n  schema,\n  extraItems = [],\n  className,\n}: {\n  schema?: SchemaObject;\n  extraItems?: unknown[];\n  className?: string;\n}) => {\n  const filteredItems = [...getSchemaInfos(schema), ...extraItems].flatMap(\n    (item) => (typeof item === \"string\" || isValidElement(item) ? item : []),\n  );\n\n  return (\n    <span className={className}>\n      {filteredItems.map((item, index) => (\n        // biome-ignore lint/suspicious/noArrayIndexKey: index should be stable\n        <span className=\"text-muted-foreground\" key={index}>\n          {item}\n          {index < filteredItems.length - 1 && (\n            <span className=\"text-muted-foreground/50\">\n              &nbsp;&middot;&nbsp;\n            </span>\n          )}\n        </span>\n      ))}\n    </span>\n  );\n};\n","import { ChevronDownIcon, CircleFadingPlusIcon } from \"lucide-react\";\nimport { cn } from \"../../../../util/cn.js\";\n\nexport const AllOfGroupConnector = ({\n  isOpen,\n  className,\n  schemeName,\n}: {\n  isOpen: boolean;\n  className?: string;\n  schemeName?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"text-green-500 dark:text-green-300/60\",\n        \"relative text-sm flex py-2\",\n        \"before:border-l before:absolute before:-top-2 before:-bottom-2 before:border-border before:border-dashed before:content-['']\",\n        className,\n      )}\n    >\n      <div className=\"-translate-x-[7px] flex gap-1 items-center\">\n        <CircleFadingPlusIcon size={16} className=\"fill-card\" />\n        <div\n          className={cn(\n            \"translate-y-px mx-px opacity-0 group-hover:opacity-100 transition\",\n            !isOpen && \"-rotate-90\",\n          )}\n        >\n          <ChevronDownIcon size={16} />\n        </div>\n        <span className=\"text-sm text-foreground\">{schemeName}</span>\n      </div>\n    </div>\n  );\n};\n","import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { useState } from \"react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { SchemaView } from \"../SchemaView.js\";\nimport { AllOfGroupConnector } from \"./AllOfGroupConnector.js\";\n\nexport const AllOfGroupItem = (props: { schema: SchemaObject }) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <Collapsible.Root\n      open={isOpen}\n      onOpenChange={() => setIsOpen((prev) => !prev)}\n      className=\"group\"\n    >\n      <Collapsible.Trigger>\n        <AllOfGroupConnector isOpen={isOpen} schemeName={props.schema.title} />\n      </Collapsible.Trigger>\n      {!isOpen && <div className=\"wavy-line bg-border translate-y-1\" />}\n      <Collapsible.Content>\n        <SchemaView schema={props.schema} />\n      </Collapsible.Content>\n    </Collapsible.Root>\n  );\n};\n","import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { SquareMinusIcon, SquarePlusIcon } from \"lucide-react\";\nimport { useCallback, useState } from \"react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { Card } from \"../../../../ui/Card.js\";\nimport { AllOfGroupItem } from \"./AllOfGroupItem.js\";\n\nexport const AllOfGroupView = ({\n  schema,\n  cardHeader,\n}: {\n  schema: SchemaObject;\n  cardHeader?: React.ReactNode;\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const toggleOpen = useCallback(() => setIsOpen((prev) => !prev), []);\n\n  if (!schema.allOf) return null;\n\n  return (\n    <Collapsible.Root open={isOpen} onOpenChange={toggleOpen} asChild>\n      <Card className=\"overflow-hidden\">\n        {cardHeader}\n        <Collapsible.Trigger className=\"flex gap-2 items-center py-2 px-6 w-full text-sm text-muted-foreground -translate-x-1.5\">\n          {isOpen ? (\n            <SquareMinusIcon size={14} />\n          ) : (\n            <SquarePlusIcon size={14} />\n          )}\n          <span>All of</span>\n        </Collapsible.Trigger>\n\n        <Collapsible.Content className=\"pb-4 px-6\">\n          {schema.allOf.map((subSchema, index) => (\n            // biome-ignore lint/suspicious/noArrayIndexKey: Index needed for key\n            <AllOfGroupItem key={index} schema={subSchema} />\n          ))}\n        </Collapsible.Content>\n      </Card>\n    </Collapsible.Root>\n  );\n};\n","import type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { SelectOnClick } from \"../components/SelectOnClick.js\";\n\nexport const SchemaExampleAndDefault = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}) => {\n  const example = schema.examples?.at(0);\n  const defaultValue = schema.default;\n\n  if (example === undefined && defaultValue === undefined) return null;\n\n  return (\n    <div className=\"flex flex-col gap-1 text-xs\">\n      {example !== undefined && (\n        <div>\n          <span className=\"text-muted-foreground\">Example: </span>\n          <SelectOnClick className=\"border rounded-sm px-1 font-mono\">\n            {typeof example === \"object\" || typeof example === \"boolean\"\n              ? JSON.stringify(example)\n              : example}\n          </SelectOnClick>\n        </div>\n      )}\n      {defaultValue !== undefined && (\n        <div>\n          <span className=\"text-muted-foreground\">Default: </span>\n          <SelectOnClick className=\"border rounded-sm px-1 font-mono\">\n            {typeof defaultValue === \"object\" ||\n            typeof defaultValue === \"boolean\"\n              ? JSON.stringify(defaultValue)\n              : defaultValue}\n          </SelectOnClick>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { CIRCULAR_REF } from \"../../../oas/graphql/circular.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\n\nexport const isBasicType = (\n  type: unknown,\n): type is \"string\" | \"number\" | \"boolean\" | \"integer\" | \"null\" =>\n  (typeof type === \"string\" &&\n    [\"string\", \"number\", \"boolean\", \"integer\", \"null\"].includes(type)) ||\n  (Array.isArray(type) && type.every(isBasicType));\n\nexport const isArrayType = (value: SchemaObject) =>\n  value.type === \"array\" ||\n  // schema.type might be an array of types, so we need to check if \"array\" is one of them\n  (Array.isArray(value.type) && value.type.includes(\"array\"));\n\nexport const isComplexType = (value?: SchemaObject) =>\n  value &&\n  ((value.type === \"object\" &&\n    Object.keys(value.properties ?? {}).length > 0) ||\n    (value.type === \"array\" &&\n      typeof value.items === \"object\" &&\n      (!value.items.type || value.items.type === \"object\")));\n\nexport const isCircularRef = (schema: unknown): schema is string =>\n  typeof schema === \"string\" && schema.startsWith(CIRCULAR_REF);\n\nexport const isArrayCircularRef = (\n  schema: SchemaObject,\n): schema is SchemaObject & { items: SchemaObject } =>\n  isArrayType(schema) && \"items\" in schema && isCircularRef(schema.items);\n\nexport const extractCircularRefInfo = (\n  ref?: string | SchemaObject,\n): string | undefined =>\n  typeof ref === \"string\" ? ref.split(\":\")[1] : undefined;\n","import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { MinusIcon, PlusIcon, RefreshCcwDotIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { InlineCode } from \"../../../components/InlineCode.js\";\nimport { Markdown } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Button } from \"../../../ui/Button.js\";\nimport { ConstValue } from \"../components/ConstValue.js\";\nimport { EnumValues } from \"../components/EnumValues.js\";\nimport { SelectOnClick } from \"../components/SelectOnClick.js\";\nimport { ParamInfos } from \"../ParamInfos.js\";\nimport { AllOfGroupView } from \"./AllOfGroup/AllOfGroupView.js\";\nimport { SchemaExampleAndDefault } from \"./SchemaExampleAndDefault.js\";\nimport { SchemaView } from \"./SchemaView.js\";\nimport {\n  extractCircularRefInfo,\n  isArrayCircularRef,\n  isArrayType,\n  isCircularRef,\n  isComplexType,\n} from \"./utils.js\";\n\nconst RecursiveIndicator = ({ circularProp }: { circularProp?: string }) => (\n  <InlineCode\n    className=\"inline-flex items-center gap-1.5 italic text-xs translate-y-0.5\"\n    selectOnClick={false}\n  >\n    <RefreshCcwDotIcon size={13} />\n    <span>{circularProp ? `${circularProp} (circular)` : \"circular\"}</span>\n  </InlineCode>\n);\n\nexport const SchemaPropertyItem = ({\n  name,\n  schema,\n  group,\n  defaultOpen = false,\n  showCollapseButton = true,\n}: {\n  name: string;\n  schema: SchemaObject;\n  group: \"required\" | \"optional\" | \"deprecated\";\n  defaultOpen?: boolean;\n  showCollapseButton?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  if (isCircularRef(schema)) {\n    return (\n      <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n        <div className=\"flex flex-col gap-2.5 justify-between text-sm\">\n          <div className=\"space-x-2 rtl:space-x-reverse\">\n            <code>{name}</code>\n            <ParamInfos\n              schema={schema}\n              extraItems={[<RecursiveIndicator key=\"circular-ref\" />]}\n            />\n          </div>\n          <SchemaExampleAndDefault schema={schema} />\n        </div>\n      </li>\n    );\n  }\n\n  const isCollapsible = Boolean(\n    (schema.allOf ||\n      schema.anyOf ||\n      schema.oneOf ||\n      isComplexType(schema) ||\n      (isArrayType(schema) &&\n        \"items\" in schema &&\n        isComplexType(schema.items)) ||\n      schema.additionalProperties) &&\n      !isArrayCircularRef(schema),\n  );\n\n  return (\n    <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n      <div className=\"flex flex-col gap-2.5 justify-between text-sm\">\n        <div className=\"space-x-2 rtl:space-x-reverse\">\n          <SelectOnClick asChild>\n            <code>{name}</code>\n          </SelectOnClick>\n          <ParamInfos\n            schema={schema}\n            extraItems={[\n              group !== \"optional\" && (\n                <span className=\"text-primary\">required</span>\n              ),\n              isArrayCircularRef(schema) && (\n                <RecursiveIndicator\n                  circularProp={extractCircularRefInfo(schema.items)}\n                />\n              ),\n            ]}\n          />\n        </div>\n        {schema.description && (\n          <Markdown\n            className=\"text-sm leading-normal\"\n            content={schema.description}\n          />\n        )}\n        {schema.type === \"array\" && \"items\" in schema && schema.items.enum && (\n          <EnumValues values={schema.items.enum} />\n        )}\n        {schema.const && <ConstValue schema={schema} hideDescription />}\n        {schema.enum && <EnumValues values={schema.enum} />}\n        <SchemaExampleAndDefault schema={schema} />\n\n        {isCollapsible && (\n          <Collapsible.Root\n            defaultOpen={defaultOpen}\n            open={isOpen}\n            onOpenChange={() => setIsOpen(!isOpen)}\n          >\n            {showCollapseButton && (\n              <Collapsible.Trigger asChild>\n                <Button variant=\"expand\" size=\"sm\">\n                  {isOpen ? <MinusIcon size={12} /> : <PlusIcon size={12} />}\n                  {!isOpen ? \"Show properties\" : \"Hide properties\"}\n                </Button>\n              </Collapsible.Trigger>\n            )}\n            <Collapsible.Content>\n              <div className=\"mt-2\">\n                {schema.allOf ? (\n                  <AllOfGroupView schema={schema} />\n                ) : schema.anyOf || schema.oneOf || schema.type === \"object\" ? (\n                  <SchemaView schema={schema} />\n                ) : isArrayType(schema) && \"items\" in schema ? (\n                  <SchemaView schema={schema.items} />\n                ) : null}\n              </div>\n            </Collapsible.Content>\n          </Collapsible.Root>\n        )}\n      </div>\n    </li>\n  );\n};\n","import type { SchemaObject } from \"../../../oas/parser/index.js\";\n\nexport type FieldSignature = {\n  type?: SchemaObject[\"type\"];\n  const?: unknown;\n  enum?: unknown[];\n  format?: string;\n  pattern?: string;\n  minimum?: number;\n  maximum?: number;\n  exclusiveMinimum?: boolean | number;\n  exclusiveMaximum?: boolean | number;\n  minLength?: number;\n  maxLength?: number;\n  minItems?: number;\n  maxItems?: number;\n  itemsType?: string | string[];\n  additionalProps?: \"true\" | \"false\" | \"schema\";\n};\n\nexport type FieldDoc = {\n  name: string;\n  humanType: string;\n  description?: string;\n  requiredInAll: boolean;\n};\n\nexport const unionVariants = (schema: SchemaObject): SchemaObject[] => {\n  const variants = (schema.oneOf ?? schema.anyOf ?? []) as SchemaObject[];\n\n  // If parent schema has properties that variants don't, merge them\n  // This handles the pattern where anyOf/oneOf is used just for required field combinations\n  if (schema.properties && Object.keys(schema.properties).length > 0) {\n    return variants.map((variant) => {\n      // If variant doesn't define its own properties or type, inherit from parent\n      const shouldInherit =\n        !variant.properties &&\n        !variant.type &&\n        !variant.allOf &&\n        !variant.oneOf &&\n        !variant.anyOf;\n\n      if (shouldInherit) {\n        return {\n          ...variant,\n          type: \"object\" as const,\n          properties: schema.properties,\n          required: variant.required ?? schema.required,\n        };\n      }\n\n      return variant;\n    });\n  }\n\n  return variants;\n};\n\nexport const decideExclusivity = (\n  schema: SchemaObject,\n): \"exactly-one\" | \"at-least-one\" => {\n  if (Array.isArray(schema.oneOf)) return \"exactly-one\";\n\n  const discriminator = schema.discriminator?.propertyName;\n  if (!discriminator) return \"at-least-one\";\n\n  const variants = unionVariants(schema);\n  const seen = new Set<string>();\n\n  for (const variant of variants) {\n    const prop = variant.properties?.[discriminator];\n\n    const value =\n      prop?.const ??\n      (Array.isArray(prop?.enum) && prop.enum.length === 1\n        ? String(prop.enum[0])\n        : undefined);\n\n    if (value == null || seen.has(String(value))) return \"at-least-one\";\n    seen.add(String(value));\n  }\n\n  return \"exactly-one\";\n};\n\nexport const labelForVariant = (index: number, variant: SchemaObject) =>\n  variant.title?.trim() || `Variant ${index + 1}`;\n\nexport const quickGuards = (variant: SchemaObject, root?: SchemaObject) => {\n  const guards: string[] = [];\n\n  if (variant.type) {\n    guards.push(\n      `type = ${Array.isArray(variant.type) ? variant.type.join(\"|\") : variant.type}`,\n    );\n  }\n\n  const discriminator = root?.discriminator?.propertyName;\n  if (discriminator) {\n    const discriminatorProp = variant.properties?.[discriminator] as\n      | SchemaObject\n      | undefined;\n\n    const discriminatorValue =\n      discriminatorProp?.const ??\n      (Array.isArray(discriminatorProp?.enum) &&\n      discriminatorProp.enum.length === 1\n        ? discriminatorProp.enum[0]\n        : undefined);\n\n    if (discriminatorValue !== undefined) {\n      guards.push(`${discriminator}=${JSON.stringify(discriminatorValue)}`);\n    }\n  }\n\n  const required = (variant.required ?? []).filter((k) => k !== discriminator);\n  if (required.length) {\n    const head = required.slice(0, 3).join(\", \");\n    const more = required.length > 3 ? ` +${required.length - 3} more` : \"\";\n    guards.push(`requires: ${head}${more}`);\n  }\n\n  return guards;\n};\n","import { useState } from \"react\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Badge } from \"../../../ui/Badge.js\";\nimport { Card } from \"../../../ui/Card.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { SchemaView } from \"./SchemaView.js\";\nimport {\n  decideExclusivity,\n  labelForVariant,\n  quickGuards,\n  unionVariants,\n} from \"./union-helpers.js\";\n\nconst DecisionTable = ({\n  variants,\n  schema,\n  selectedVariant,\n  onSelectVariant,\n}: {\n  variants: SchemaObject[];\n  schema: SchemaObject;\n  selectedVariant: string;\n  onSelectVariant: (label: string) => void;\n}) => {\n  const rows = variants.map((v, i) => ({\n    label: labelForVariant(i, v),\n    guards: quickGuards(v, schema),\n  }));\n\n  return (\n    <div className=\"flex flex-col gap-2 text-sm\">\n      <h4 className=\"font-medium\">Decision Table</h4>\n      <div className=\"border rounded-md overflow-hidden\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b bg-muted/50\">\n              <th className=\"text-left p-2 font-medium\">Variant</th>\n              <th className=\"text-left p-2 font-medium\">Matching Criteria</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y\">\n            {rows.map((row) => (\n              <tr key={row.label} className=\"hover:bg-muted/30\">\n                <td className=\"p-2 font-medium\">\n                  <button\n                    type=\"button\"\n                    className={cn(\n                      \"hover:underline\",\n                      selectedVariant === row.label && \"text-primary\",\n                    )}\n                    onClick={() => onSelectVariant(row.label)}\n                  >\n                    {row.label}\n                  </button>\n                </td>\n                <td className=\"p-2 text-muted-foreground text-xs\">\n                  {row.guards.length > 0\n                    ? row.guards.join(\" Â· \")\n                    : \"No specific criteria\"}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nconst VariantPanel = ({ variant }: { variant: SchemaObject }) => {\n  return (\n    <div className=\"space-y-2\">\n      {variant.description && (\n        <p className=\"text-sm text-muted-foreground\">{variant.description}</p>\n      )}\n      <SchemaView schema={variant} />\n    </div>\n  );\n};\n\nexport const UnionView = ({\n  schema,\n  cardHeader,\n}: {\n  schema: SchemaObject;\n  cardHeader?: React.ReactNode;\n}) => {\n  const mode = Array.isArray(schema.oneOf)\n    ? \"oneOf\"\n    : Array.isArray(schema.anyOf)\n      ? \"anyOf\"\n      : undefined;\n\n  const variants = mode ? unionVariants(schema) : [];\n  const [selectedVariant, setSelectedVariant] = useState(() =>\n    variants[0] ? labelForVariant(0, variants[0]) : \"\",\n  );\n\n  if (!mode) return null;\n\n  const exclusivity = decideExclusivity(schema);\n\n  const semanticsMessage =\n    exclusivity === \"exactly-one\" ? (\n      <>\n        Exactly one variant <b>must match</b>.\n      </>\n    ) : (\n      <>\n        At least one variant <b>must match</b>. Multiple variants{\" \"}\n        <i>may match</i> simultaneously.\n      </>\n    );\n\n  const currentVariantIndex = variants.findIndex(\n    (v, i) => labelForVariant(i, v) === selectedVariant,\n  );\n  const currentVariant =\n    currentVariantIndex >= 0 ? variants[currentVariantIndex] : null;\n\n  return (\n    <Card className=\"overflow-hidden text-sm\">\n      {cardHeader}\n      <div className=\"flex flex-col gap-4 p-4\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\">{mode}</Badge>\n          <div className=\"flex-1 p-2\">\n            <span className=\"text-sm\">{semanticsMessage}</span>\n          </div>\n        </div>\n\n        <DecisionTable\n          variants={variants}\n          schema={schema}\n          selectedVariant={selectedVariant}\n          onSelectVariant={setSelectedVariant}\n        />\n        <strong>Properties for {selectedVariant}:</strong>\n        {currentVariant && <VariantPanel variant={currentVariant} />}\n      </div>\n    </Card>\n  );\n};\n","import { InfoIcon } from \"lucide-react\";\nimport { Markdown } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Card } from \"../../../ui/Card.js\";\nimport { groupBy } from \"../../../util/groupBy.js\";\nimport { ConstValue } from \"../components/ConstValue.js\";\nimport { EnumValues } from \"../components/EnumValues.js\";\nimport { ParamInfos } from \"../ParamInfos.js\";\nimport { AllOfGroupView } from \"./AllOfGroup/AllOfGroupView.js\";\nimport { SchemaExampleAndDefault } from \"./SchemaExampleAndDefault.js\";\nimport { SchemaPropertyItem } from \"./SchemaPropertyItem.js\";\nimport { UnionView } from \"./UnionView.js\";\nimport { isBasicType } from \"./utils.js\";\n\nconst renderMarkdown = (content?: string) =>\n  content && (\n    <Markdown\n      className=\"text-sm leading-normal line-clamp-4\"\n      content={content}\n    />\n  );\n\nconst renderBasicSchema = (\n  schema: SchemaObject,\n  cardHeader?: React.ReactNode,\n) => (\n  <Card className=\"overflow-hidden\">\n    {cardHeader}\n    <div className=\"p-4 space-y-2\">\n      <span className=\"text-sm text-muted-foreground\">\n        <ParamInfos schema={schema} />\n      </span>\n      {schema.enum && <EnumValues values={schema.enum} />}\n      {renderMarkdown(schema.description)}\n      <SchemaExampleAndDefault schema={schema} />\n    </div>\n  </Card>\n);\n\nexport const SchemaView = ({\n  schema,\n  defaultOpen = false,\n  cardHeader,\n  embedded,\n}: {\n  schema?: SchemaObject | null;\n  defaultOpen?: boolean;\n  cardHeader?: React.ReactNode;\n  embedded?: boolean;\n}) => {\n  if (!schema || Object.keys(schema).length === 0) {\n    return (\n      <Card className=\"overflow-hidden\">\n        {cardHeader}\n        <div className=\"text-sm text-muted-foreground italic p-4\">\n          No data returned\n        </div>\n      </Card>\n    );\n  }\n\n  if (schema.const) {\n    return <ConstValue schema={schema} />;\n  }\n\n  if (Array.isArray(schema.oneOf) || Array.isArray(schema.anyOf)) {\n    return <UnionView schema={schema} cardHeader={cardHeader} />;\n  }\n\n  if (Array.isArray(schema.allOf)) {\n    return <AllOfGroupView schema={schema} cardHeader={cardHeader} />;\n  }\n\n  if (isBasicType(schema.type)) {\n    return renderBasicSchema(schema, cardHeader);\n  }\n\n  if (schema.type === \"array\" && typeof schema.items === \"object\") {\n    return <SchemaView schema={schema.items} cardHeader={cardHeader} />;\n  }\n\n  if (schema.type === \"object\") {\n    const groupedProperties = groupBy(\n      Object.entries(schema.properties ?? {}),\n      ([propertyName, property]) => {\n        return property.deprecated\n          ? \"deprecated\"\n          : schema.required?.includes(propertyName)\n            ? \"required\"\n            : \"optional\";\n      },\n    );\n    const groupNames = [\"required\", \"optional\", \"deprecated\"] as const;\n\n    const additionalProperties =\n      typeof schema.additionalProperties === \"object\" ? (\n        <SchemaView schema={schema.additionalProperties} embedded />\n      ) : schema.additionalProperties === true ? (\n        <div className=\"text-sm p-4 bg-border/20 hover:bg-border/30 flex items-center gap-1\">\n          <span>Additional properties are allowed</span>\n          <a\n            className=\"p-0.5 -m-0.5\"\n            href=\"https://swagger.io/docs/specification/v3_0/data-models/dictionaries/\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <InfoIcon size={14} />\n          </a>\n        </div>\n      ) : null;\n\n    const Component = embedded ? \"div\" : Card;\n\n    return (\n      <Component className=\"divide-y overflow-hidden\">\n        {cardHeader}\n        {groupNames.map(\n          (group) =>\n            groupedProperties[group] && (\n              <ul key={group} className=\"divide-y\">\n                {groupedProperties[group].map(([name, schema]) => (\n                  <SchemaPropertyItem\n                    key={name}\n                    name={name}\n                    schema={schema}\n                    group={group}\n                    defaultOpen={defaultOpen}\n                  />\n                ))}\n              </ul>\n            ),\n        )}\n        {additionalProperties}\n      </Component>\n    );\n  }\n\n  return null;\n};\n"],"names":["groupBy","arr","keySelector","accumulator","val","groupedKey","ConstValue","schema","hideDescription","jsx","SelectOnClick","EnumValues","values","className","maxVisibleValues","isOpen","setIsOpen","useState","shouldCollapse","visibleValues","cn","value","Button","jsxs","ChevronUpIcon","ChevronDownIcon","Pattern","pattern","isExpanded","setIsExpanded","isExpandable","shortPattern","InlineCode","ChevronsLeftRightIcon","getSchemaInfos","Fragment","ParamInfos","extraItems","filteredItems","item","isValidElement","index","AllOfGroupConnector","schemeName","CircleFadingPlusIcon","AllOfGroupItem","props","Collapsible","prev","SchemaView","AllOfGroupView","cardHeader","toggleOpen","useCallback","Card","SquareMinusIcon","SquarePlusIcon","subSchema","SchemaExampleAndDefault","example","defaultValue","isBasicType","type","isArrayType","isComplexType","isCircularRef","CIRCULAR_REF","isArrayCircularRef","extractCircularRefInfo","ref","RecursiveIndicator","circularProp","RefreshCcwDotIcon","SchemaPropertyItem","name","group","defaultOpen","showCollapseButton","isCollapsible","Markdown","MinusIcon","PlusIcon","unionVariants","variants","variant","decideExclusivity","discriminator","seen","prop","labelForVariant","quickGuards","root","guards","discriminatorProp","discriminatorValue","required","k","head","more","DecisionTable","selectedVariant","onSelectVariant","rows","v","i","row","VariantPanel","UnionView","mode","setSelectedVariant","semanticsMessage","currentVariantIndex","currentVariant","Badge","renderMarkdown","content","renderBasicSchema","embedded","groupedProperties","propertyName","property","groupNames","additionalProperties","InfoIcon","Component"],"mappings":"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"}