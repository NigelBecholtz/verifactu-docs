{"version":3,"file":"removeParameters.js","sources":["../../src/lib/plugins/openapi/processors/removeParameters.ts"],"sourcesContent":["import type { ProcessorArg } from \"../../../../config/validators/BuildSchema.js\";\nimport type { OpenAPIDocument } from \"../../../oas/parser/index.js\";\nimport { type RecordAny, traverse } from \"./traverse.js\";\n\ninterface RemoveParametersOptions {\n  // Names of parameters to remove\n  names?: string[];\n  // Specific locations to remove parameters from ('query', 'header', 'path', 'cookie')\n  in?: string[];\n  // Custom filter function\n  shouldRemove?: ({ parameter }: { parameter: RecordAny }) => boolean;\n}\n\nexport const removeParameters =\n  ({ names, in: locations, shouldRemove }: RemoveParametersOptions = {}) =>\n  ({ schema }: ProcessorArg) =>\n    traverse(schema, (spec) => {\n      // Helper function to filter parameters\n      const filterParameters = (parameters: RecordAny[]) =>\n        parameters.filter((p) => {\n          if (names?.includes(p.name)) return false;\n          if (locations?.includes(p.in)) return false;\n          if (shouldRemove?.({ parameter: p })) return false;\n          return true;\n        });\n\n      // Handle components.parameters\n      if (spec.components?.parameters) {\n        spec = {\n          ...spec,\n          components: {\n            ...spec.components,\n            parameters: Object.fromEntries(\n              Object.entries(spec.components.parameters).filter(\n                ([_, param]) => {\n                  const p = param as RecordAny;\n                  if (p.$ref) return true; // Skip references\n                  return (\n                    !names?.includes(p.name) &&\n                    !locations?.includes(p.in) &&\n                    !shouldRemove?.({ parameter: p })\n                  );\n                },\n              ),\n            ),\n          },\n        };\n      }\n\n      // Handle paths\n      if (spec.paths) {\n        const updatedPaths: RecordAny = {};\n\n        for (const [path, pathItem] of Object.entries(spec.paths)) {\n          if (typeof pathItem !== \"object\" || pathItem === null) {\n            updatedPaths[path] = pathItem;\n            continue;\n          }\n\n          let updatedPathItem = { ...pathItem };\n\n          // Handle path-level parameters\n          if (\n            \"parameters\" in updatedPathItem &&\n            Array.isArray(updatedPathItem.parameters)\n          ) {\n            updatedPathItem.parameters = filterParameters(\n              updatedPathItem.parameters,\n            );\n          }\n\n          // Handle operation-level parameters\n          for (const method of Object.keys(updatedPathItem)) {\n            const pathItemWithMethods = updatedPathItem as Record<\n              string,\n              RecordAny\n            >;\n\n            if (\n              method === \"parameters\" ||\n              typeof pathItemWithMethods[method] !== \"object\"\n            ) {\n              continue;\n            }\n\n            const operation = pathItemWithMethods[method];\n            if (Array.isArray(operation.parameters)) {\n              pathItemWithMethods[method] = {\n                ...operation,\n                parameters: filterParameters(operation.parameters),\n              };\n              updatedPathItem = pathItemWithMethods;\n            }\n          }\n\n          updatedPaths[path] = updatedPathItem;\n        }\n\n        spec = { ...spec, paths: updatedPaths };\n      }\n\n      return spec;\n    }) as OpenAPIDocument;\n"],"names":["removeParameters","names","locations","shouldRemove","schema","traverse","spec","filterParameters","parameters","p","_","param","updatedPaths","path","pathItem","updatedPathItem","method","pathItemWithMethods","operation"],"mappings":";AAaO,MAAMA,IACX,CAAC,EAAE,OAAAC,GAAO,IAAIC,GAAW,cAAAC,EAAA,IAA0C,OACnE,CAAC,EAAE,QAAAC,EAAA,MACDC,EAASD,GAAQ,CAACE,MAAS;AAEzB,QAAMC,IAAmB,CAACC,MACxBA,EAAW,OAAO,CAACC,MACb,EAAAR,GAAO,SAASQ,EAAE,IAAI,KACtBP,GAAW,SAASO,EAAE,EAAE,KACxBN,IAAe,EAAE,WAAWM,EAAA,CAAG,EAEpC;AA0BH,MAvBIH,EAAK,YAAY,eACnBA,IAAO;AAAA,IACL,GAAGA;AAAA,IACH,YAAY;AAAA,MACV,GAAGA,EAAK;AAAA,MACR,YAAY,OAAO;AAAA,QACjB,OAAO,QAAQA,EAAK,WAAW,UAAU,EAAE;AAAA,UACzC,CAAC,CAACI,GAAGC,CAAK,MAAM;AACd,kBAAMF,IAAIE;AACV,mBAAIF,EAAE,OAAa,KAEjB,CAACR,GAAO,SAASQ,EAAE,IAAI,KACvB,CAACP,GAAW,SAASO,EAAE,EAAE,KACzB,CAACN,IAAe,EAAE,WAAWM,GAAG;AAAA,UAEpC;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,EACF,IAKAH,EAAK,OAAO;AACd,UAAMM,IAA0B,CAAA;AAEhC,eAAW,CAACC,GAAMC,CAAQ,KAAK,OAAO,QAAQR,EAAK,KAAK,GAAG;AACzD,UAAI,OAAOQ,KAAa,YAAYA,MAAa,MAAM;AACrD,QAAAF,EAAaC,CAAI,IAAIC;AACrB;AAAA,MACF;AAEA,UAAIC,IAAkB,EAAE,GAAGD,EAAA;AAG3B,MACE,gBAAgBC,KAChB,MAAM,QAAQA,EAAgB,UAAU,MAExCA,EAAgB,aAAaR;AAAA,QAC3BQ,EAAgB;AAAA,MAAA;AAKpB,iBAAWC,KAAU,OAAO,KAAKD,CAAe,GAAG;AACjD,cAAME,IAAsBF;AAK5B,YACEC,MAAW,gBACX,OAAOC,EAAoBD,CAAM,KAAM;AAEvC;AAGF,cAAME,IAAYD,EAAoBD,CAAM;AAC5C,QAAI,MAAM,QAAQE,EAAU,UAAU,MACpCD,EAAoBD,CAAM,IAAI;AAAA,UAC5B,GAAGE;AAAA,UACH,YAAYX,EAAiBW,EAAU,UAAU;AAAA,QAAA,GAEnDH,IAAkBE;AAAA,MAEtB;AAEA,MAAAL,EAAaC,CAAI,IAAIE;AAAA,IACvB;AAEA,IAAAT,IAAO,EAAE,GAAGA,GAAM,OAAOM,EAAA;AAAA,EAC3B;AAEA,SAAON;AACT,CAAC;"}