import { traverse as d } from "./traverse.js";
const b = ({ paths: o = {}, shouldRemove: s }) => ({ schema: a }) => d(a, (e) => {
  if (!e.paths) return e;
  const n = {};
  for (const [t, r] of Object.entries(e.paths)) {
    const f = e.paths[t];
    if (o[t] !== !0 && !s?.({ path: t, method: !0, operation: f }))
      if (typeof r == "object" && r !== null) {
        const c = Object.fromEntries(
          Object.entries(r).filter(([i]) => {
            const u = e.paths[t][i], h = Array.isArray(o[t]) && o[t].includes(i), p = s?.({
              path: t,
              method: i,
              operation: u
            });
            return !h && !p;
          })
        );
        n[t] = c;
      } else
        n[t] = r;
  }
  return { ...e, paths: n };
});
export {
  b as removePaths
};
//# sourceMappingURL=removePaths.js.map
