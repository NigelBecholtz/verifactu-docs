import { traverse as l } from "./traverse.js";
const d = ({ names: m, in: f, shouldRemove: p } = {}) => ({ schema: c }) => l(c, (e) => {
  const u = (n) => n.filter((r) => !(m?.includes(r.name) || f?.includes(r.in) || p?.({ parameter: r })));
  if (e.components?.parameters && (e = {
    ...e,
    components: {
      ...e.components,
      parameters: Object.fromEntries(
        Object.entries(e.components.parameters).filter(
          ([n, r]) => {
            const t = r;
            return t.$ref ? !0 : !m?.includes(t.name) && !f?.includes(t.in) && !p?.({ parameter: t });
          }
        )
      )
    }
  }), e.paths) {
    const n = {};
    for (const [r, t] of Object.entries(e.paths)) {
      if (typeof t != "object" || t === null) {
        n[r] = t;
        continue;
      }
      let a = { ...t };
      "parameters" in a && Array.isArray(a.parameters) && (a.parameters = u(
        a.parameters
      ));
      for (const s of Object.keys(a)) {
        const o = a;
        if (s === "parameters" || typeof o[s] != "object")
          continue;
        const i = o[s];
        Array.isArray(i.parameters) && (o[s] = {
          ...i,
          parameters: u(i.parameters)
        }, a = o);
      }
      n[r] = a;
    }
    e = { ...e, paths: n };
  }
  return e;
});
export {
  d as removeParameters
};
//# sourceMappingURL=removeParameters.js.map
