{"version":3,"file":"traverse.js","sources":["../../src/lib/util/traverse.ts"],"sourcesContent":["import type { JsonValue, RecordAny } from \"./types.js\";\n\nexport type { RecordAny };\n\nexport const traverse = <T extends JsonValue = RecordAny>(\n  specification: RecordAny,\n  transform: (specification: RecordAny, path?: string[]) => T,\n  path: string[] = [],\n) => {\n  const transformed = transform(specification, path);\n  if (typeof transformed !== \"object\" || transformed === null) {\n    return transformed;\n  }\n\n  const result: RecordAny = Array.isArray(transformed) ? [] : {};\n\n  for (const [key, value] of Object.entries(transformed)) {\n    const currentPath = [...path, key];\n\n    if (Array.isArray(value)) {\n      result[key] = value.map((item, index) =>\n        typeof item === \"object\" && item != null\n          ? traverse(item, transform, [...currentPath, index.toString()])\n          : item,\n      );\n    } else if (typeof value === \"object\" && value != null) {\n      result[key] = traverse(value, transform, currentPath);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n\nexport const traverseAsync = async <T extends JsonValue = RecordAny>(\n  specification: RecordAny,\n  transform: (specification: RecordAny, path?: string[]) => T | Promise<T>,\n  path: string[] = [],\n) => {\n  const transformed = await transform(specification, path);\n  if (typeof transformed !== \"object\" || transformed === null) {\n    return transformed;\n  }\n\n  const result: RecordAny = Array.isArray(transformed) ? [] : {};\n\n  for (const [key, value] of Object.entries(transformed)) {\n    const currentPath = [...path, key];\n\n    if (Array.isArray(value)) {\n      result[key] = await Promise.all(\n        value.map(async (item, index) =>\n          typeof item === \"object\" && item != null\n            ? await traverseAsync(item, transform, [\n                ...currentPath,\n                index.toString(),\n              ])\n            : item,\n        ),\n      );\n    } else if (typeof value === \"object\" && value != null) {\n      result[key] = await traverseAsync(value, transform, currentPath);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n"],"names":["traverse","specification","transform","path","transformed","result","key","value","currentPath","item","index"],"mappings":"AAIO,MAAMA,IAAW,CACtBC,GACAC,GACAC,IAAiB,CAAA,MACd;AACH,QAAMC,IAAcF,EAAUD,GAAeE,CAAI;AACjD,MAAI,OAAOC,KAAgB,YAAYA,MAAgB;AACrD,WAAOA;AAGT,QAAMC,IAAoB,MAAM,QAAQD,CAAW,IAAI,CAAA,IAAK,CAAA;AAE5D,aAAW,CAACE,GAAKC,CAAK,KAAK,OAAO,QAAQH,CAAW,GAAG;AACtD,UAAMI,IAAc,CAAC,GAAGL,GAAMG,CAAG;AAEjC,IAAI,MAAM,QAAQC,CAAK,IACrBF,EAAOC,CAAG,IAAIC,EAAM;AAAA,MAAI,CAACE,GAAMC,MAC7B,OAAOD,KAAS,YAAYA,KAAQ,OAChCT,EAASS,GAAMP,GAAW,CAAC,GAAGM,GAAaE,EAAM,SAAA,CAAU,CAAC,IAC5DD;AAAA,IAAA,IAEG,OAAOF,KAAU,YAAYA,KAAS,OAC/CF,EAAOC,CAAG,IAAIN,EAASO,GAAOL,GAAWM,CAAW,IAEpDH,EAAOC,CAAG,IAAIC;AAAA,EAElB;AAEA,SAAOF;AACT;"}