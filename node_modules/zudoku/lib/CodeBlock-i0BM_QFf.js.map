{"version":3,"file":"CodeBlock-i0BM_QFf.js","sources":["../src/lib/components/LanguageIcon.tsx","../src/lib/ui/CodeBlock.tsx"],"sourcesContent":["import {\n  type ComponentType,\n  type LazyExoticComponent,\n  lazy,\n  Suspense,\n  type SVGProps,\n} from \"react\";\n\ntype Language = {\n  pattern: RegExp;\n  icon: LazyExoticComponent<ComponentType<SVGProps<SVGSVGElement>>>;\n  width?: number;\n};\n\nconst Languages: Record<string, Language> = {\n  typescript: {\n    pattern: /^(ts|typescript)$/,\n    icon: lazy(() => import(\"../assets/language-icons/typescript.js\")),\n    width: 15,\n  },\n  javascript: {\n    pattern: /^(js|javascript)$/,\n    icon: lazy(() => import(\"../assets/language-icons/javascript.js\")),\n  },\n  react: {\n    pattern: /^(react|tsx|jsx)$/,\n    icon: lazy(() => import(\"../assets/language-icons/react.js\")),\n    width: 22,\n  },\n  markdown: {\n    pattern: /^(md|markdown)$/,\n    icon: lazy(() => import(\"../assets/language-icons/markdown.js\")),\n    width: 22,\n  },\n  mdx: {\n    pattern: /^mdx$/,\n    icon: lazy(() => import(\"../assets/language-icons/mdx.js\")),\n    width: 28,\n  },\n  java: {\n    pattern: /^(java)$/,\n    icon: lazy(() => import(\"../assets/language-icons/java.js\")),\n    width: 22,\n  },\n  json: {\n    pattern: /^jsonc?$/,\n    icon: lazy(() => import(\"../assets/language-icons/json.js\")),\n  },\n  yaml: {\n    pattern: /^yaml$/,\n    icon: lazy(() => import(\"../assets/language-icons/yaml.js\")),\n  },\n  toml: {\n    pattern: /^toml$/,\n    icon: lazy(() => import(\"../assets/language-icons/toml.js\")),\n  },\n  shell: {\n    pattern: /^(shell|bash|sh|zsh|term|terminal|ansi)$/,\n    icon: lazy(() => import(\"../assets/language-icons/shell.js\")),\n  },\n  python: {\n    pattern: /^(py|python)$/,\n    icon: lazy(() => import(\"../assets/language-icons/python.js\")),\n  },\n  csharp: {\n    pattern: /^(cs|csharp|vb)$/,\n    icon: lazy(() => import(\"../assets/language-icons/csharp.js\")),\n    width: 20,\n  },\n  rust: {\n    pattern: /^(rs|rust)$/,\n    icon: lazy(() => import(\"../assets/language-icons/rust.js\")),\n    width: 20,\n  },\n  ruby: {\n    pattern: /^(rb|ruby)$/,\n    icon: lazy(() => import(\"../assets/language-icons/ruby.js\")),\n  },\n  php: {\n    pattern: /^php$/,\n    icon: lazy(() => import(\"../assets/language-icons/php.js\")),\n    width: 24,\n  },\n  html: {\n    pattern: /^html?$/,\n    icon: lazy(() => import(\"../assets/language-icons/html.js\")),\n    width: 15,\n  },\n  css: {\n    pattern: /^css$/,\n    icon: lazy(() => import(\"../assets/language-icons/css.js\")),\n  },\n  objectivec: {\n    pattern: /^(objc|objectivec)$/,\n    icon: lazy(() => import(\"../assets/language-icons/objectivec.js\")),\n    width: 16,\n  },\n  swift: {\n    pattern: /^swift$/,\n    icon: lazy(() => import(\"../assets/language-icons/swift.js\")),\n  },\n  go: {\n    pattern: /^go$/,\n    icon: lazy(() => import(\"../assets/language-icons/go.js\")),\n    width: 28,\n  },\n  xml: {\n    pattern: /^xml$/,\n    icon: lazy(() => import(\"../assets/language-icons/xml.js\")),\n  },\n  kotlin: {\n    pattern: /^(kt|kotlin)$/,\n    icon: lazy(() => import(\"../assets/language-icons/kotlin.js\")),\n    width: 14,\n  },\n  graphql: {\n    pattern: /^(gql|graphql)$/,\n    icon: lazy(() => import(\"../assets/language-icons/graphql.js\")),\n  },\n};\n\nexport const LanguageIcon = ({ language }: { language?: string }) => {\n  if (!language) return null;\n\n  const Lang = Object.values(Languages).find((l) => l.pattern.test(language));\n\n  if (!Lang) return null;\n\n  const size = Lang.width ?? 18;\n\n  return (\n    <Suspense fallback={<div style={{ width: size, height: \"1em\" }} />}>\n      <Lang.icon className=\"h-auto\" style={{ width: size }} />\n    </Suspense>\n  );\n};\n","import { CheckIcon, CopyIcon } from \"lucide-react\";\nimport { type ReactNode, useRef } from \"react\";\nimport { LanguageIcon } from \"../components/LanguageIcon.js\";\nimport { cn } from \"../util/cn.js\";\nimport { useCopyToClipboard } from \"../util/useCopyToClipboard.js\";\n\nexport type CodeBlockProps = {\n  className?: string;\n  noBackground?: boolean;\n  wrapLines?: boolean;\n  showLanguageIndicator?: boolean;\n  language?: string;\n  title?: string;\n  children?: ReactNode;\n  code?: ReactNode;\n  showCopy?: \"hover\" | \"always\" | \"never\";\n  disabled?: boolean;\n  showLineNumbers?: boolean;\n};\n\nexport const CodeBlock = ({\n  children,\n  title = \"Code\",\n  language,\n  showCopy = \"hover\",\n  showLanguageIndicator,\n  showLineNumbers,\n  ...props\n}: CodeBlockProps) => {\n  const [isCopied, copyToClipboard] = useCopyToClipboard();\n  const ref = useRef<HTMLDivElement>(null);\n\n  if (!children) return null;\n\n  return (\n    <div\n      className={cn(\n        \"border code-block-wrapper relative group rounded-md overflow-hidden\",\n        showLineNumbers && \"line-numbers\",\n        props.className,\n      )}\n    >\n      <div className=\"border-b flex items-center h-10 font-sans bg-black/2\">\n        <div className=\"flex items-center gap-1.5 flex-1 text-sm w-full px-3\">\n          <LanguageIcon language={language} />\n          {title}\n        </div>{\" \"}\n        {showCopy !== \"never\" && (\n          <button\n            type=\"button\"\n            aria-label=\"Copy code\"\n            title=\"Copy code\"\n            className={cn(\n              \"transition px-2 py-2 mx-1 rounded-sm\",\n              !isCopied && \"hover:bg-accent hover:brightness-95\",\n            )}\n            disabled={isCopied}\n            onClick={() => {\n              if (!ref.current?.textContent) return;\n\n              copyToClipboard(ref.current.textContent);\n            }}\n          >\n            {isCopied ? (\n              <CheckIcon className=\"text-emerald-600\" size={14} />\n            ) : (\n              <CopyIcon size={14} />\n            )}\n          </button>\n        )}\n      </div>\n      <div\n        className=\"code-block text-sm not-prose scrollbar [&_code]:px-3 [&_code]:py-2\"\n        ref={ref}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n"],"names":["Languages","lazy","LanguageIcon","language","Lang","l","size","jsx","Suspense","CodeBlock","children","title","showCopy","showLanguageIndicator","showLineNumbers","props","isCopied","copyToClipboard","useCopyToClipboard","ref","useRef","jsxs","cn","CheckIcon","CopyIcon"],"mappings":"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"}