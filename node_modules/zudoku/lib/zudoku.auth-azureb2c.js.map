{"version":3,"file":"zudoku.auth-azureb2c.js","sources":["../src/lib/authentication/providers/azureb2c.tsx"],"sourcesContent":["import type { AuthenticationResult, EventMessage } from \"@azure/msal-browser\";\nimport { EventType, PublicClientApplication } from \"@azure/msal-browser\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport type { AzureB2CAuthenticationConfig } from \"../../../config/config.js\";\nimport { ClientOnly } from \"../../components/ClientOnly.js\";\nimport { joinUrl } from \"../../util/joinUrl.js\";\nimport { CoreAuthenticationPlugin } from \"../AuthenticationPlugin.js\";\nimport type {\n  AuthenticationPlugin,\n  AuthenticationProviderInitializer,\n} from \"../authentication.js\";\nimport { CallbackHandler } from \"../components/CallbackHandler.js\";\nimport { OAuthErrorPage } from \"../components/OAuthErrorPage.js\";\nimport { AuthorizationError } from \"../errors.js\";\nimport { useAuthState } from \"../state.js\";\n\nconst AZUREB2C_CALLBACK_PATH = \"/oauth/callback\";\n\nexport class AzureB2CAuthPlugin\n  extends CoreAuthenticationPlugin\n  implements AuthenticationPlugin\n{\n  private msalInstance: PublicClientApplication;\n  private readonly scopes: string[];\n  private readonly redirectToAfterSignUp?: string;\n  private readonly redirectToAfterSignIn?: string;\n  private readonly redirectToAfterSignOut: string;\n\n  constructor({\n    clientId,\n    tenantName,\n    policyName,\n    scopes,\n    redirectToAfterSignUp,\n    redirectToAfterSignIn,\n    redirectToAfterSignOut = \"/\",\n    basePath = \"\",\n  }: AzureB2CAuthenticationConfig) {\n    super();\n    this.scopes = scopes ?? [\"openid\", \"profile\", \"email\"];\n    this.redirectToAfterSignUp = redirectToAfterSignUp;\n    this.redirectToAfterSignIn = redirectToAfterSignIn;\n    this.redirectToAfterSignOut = redirectToAfterSignOut;\n\n    const authority = `https://${tenantName}.b2clogin.com/${tenantName}.onmicrosoft.com/${policyName}`;\n    const redirectUri = joinUrl(basePath, AZUREB2C_CALLBACK_PATH);\n\n    this.msalInstance = new PublicClientApplication({\n      auth: {\n        clientId,\n        authority,\n        redirectUri,\n        knownAuthorities: [`${tenantName}.b2clogin.com`],\n      },\n      cache: {\n        cacheLocation: \"sessionStorage\",\n        storeAuthStateInCookie: false,\n      },\n    });\n\n    void this.msalInstance.initialize().then(async () => {\n      void this.msalInstance\n        .handleRedirectPromise()\n        .then((response: AuthenticationResult | null) => {\n          if (response) {\n            this.handleAuthResponse(response);\n          }\n        });\n\n      // Add event callback\n      void this.msalInstance.addEventCallback((event: EventMessage) => {\n        if (event.eventType === EventType.LOGIN_SUCCESS) {\n          this.handleAuthResponse(event.payload as AuthenticationResult);\n        }\n      });\n    });\n  }\n\n  private handleAuthResponse(response: AuthenticationResult) {\n    const { accessToken, idToken, scopes, account } = response;\n\n    if (!account) {\n      throw new AuthorizationError(\"No account information in response\");\n    }\n\n    // Get the user's name from Azure B2C claims\n    const name =\n      [account.idTokenClaims?.given_name, account.idTokenClaims?.family_name]\n        .filter(Boolean)\n        .join(\" \") || account.username;\n\n    useAuthState.getState().setLoggedIn({\n      providerData: {\n        accessToken,\n        idToken,\n        scopes,\n        account,\n      },\n      profile: {\n        sub: account.localAccountId,\n        email: account.username,\n        name,\n        emailVerified: true, // Azure B2C emails are verified\n        pictureUrl: undefined, // Azure B2C doesn't provide profile pictures by default\n      },\n    });\n  }\n\n  async signUp({ redirectTo }: { redirectTo?: string } = {}) {\n    const redirectUri = this.redirectToAfterSignUp ?? redirectTo ?? \"/\";\n    sessionStorage.setItem(\"redirect-to\", redirectUri);\n\n    await this.msalInstance.loginRedirect({\n      scopes: this.scopes,\n      prompt: \"select_account\",\n    });\n  }\n\n  async signIn({ redirectTo }: { redirectTo?: string } = {}) {\n    const redirectUri = this.redirectToAfterSignIn ?? redirectTo ?? \"/\";\n    sessionStorage.setItem(\"redirect-to\", redirectUri);\n\n    await this.msalInstance.loginRedirect({\n      scopes: this.scopes,\n    });\n  }\n\n  async getAccessToken(): Promise<string> {\n    const account = this.msalInstance.getAllAccounts()[0];\n    if (!account) {\n      throw new AuthorizationError(\"No active account\");\n    }\n\n    try {\n      const response = await this.msalInstance.acquireTokenSilent({\n        scopes: this.scopes,\n        account,\n      });\n      return response.accessToken;\n    } catch {\n      // If silent token acquisition fails, try interactive\n      await this.msalInstance.acquireTokenRedirect({\n        scopes: this.scopes,\n        account,\n      });\n\n      throw new AuthorizationError(\n        \"Token acquisition failed after interactive attempt\",\n      );\n    }\n  }\n\n  signRequest = async (request: Request): Promise<Request> => {\n    const accessToken = await this.getAccessToken();\n    request.headers.set(\"Authorization\", `Bearer ${accessToken}`);\n    return request;\n  };\n\n  signOut = async () => {\n    const account = this.msalInstance.getAllAccounts()[0];\n    if (account) {\n      await this.msalInstance.logoutRedirect({\n        account,\n        postLogoutRedirectUri:\n          window.location.origin + this.redirectToAfterSignOut,\n      });\n    }\n\n    useAuthState.getState().setLoggedOut();\n  };\n\n  handleCallback = async () => {\n    const redirectTo = sessionStorage.getItem(\"redirect-to\") ?? \"/\";\n    sessionStorage.removeItem(\"redirect-to\");\n    return redirectTo;\n  };\n\n  getRoutes() {\n    return [\n      ...super.getRoutes(),\n      {\n        path: AZUREB2C_CALLBACK_PATH,\n        element: (\n          <ClientOnly>\n            <ErrorBoundary\n              fallbackRender={({ error }) => <OAuthErrorPage error={error} />}\n            >\n              <CallbackHandler handleCallback={this.handleCallback} />\n            </ErrorBoundary>\n          </ClientOnly>\n        ),\n      },\n    ];\n  }\n}\n\nconst azureB2CAuth: AuthenticationProviderInitializer<\n  AzureB2CAuthenticationConfig\n> = (options) => new AzureB2CAuthPlugin(options);\n\nexport default azureB2CAuth;\n"],"names":["AZUREB2C_CALLBACK_PATH","AzureB2CAuthPlugin","CoreAuthenticationPlugin","clientId","tenantName","policyName","scopes","redirectToAfterSignUp","redirectToAfterSignIn","redirectToAfterSignOut","basePath","authority","redirectUri","joinUrl","PublicClientApplication","response","event","EventType","accessToken","idToken","account","AuthorizationError","name","useAuthState","redirectTo","request","ClientOnly","jsx","ErrorBoundary","error","OAuthErrorPage","CallbackHandler","azureB2CAuth","options"],"mappings":"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"}