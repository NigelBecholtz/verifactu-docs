import type { LucideIcon } from "lucide-react";
import type { ConfigWithMeta } from "../loader.js";
import type { InputNavigationCategory, InputNavigationCategoryLinkDoc, InputNavigationCustomPage, InputNavigationDoc, InputNavigationLink } from "./InputNavigationSchema.js";
type ReplaceFields<Base, Overrides> = Omit<Base, keyof Overrides> & Overrides;
type ResolvedIcon = {
    icon?: LucideIcon | string;
};
type FinalNavigationDoc = Extract<InputNavigationDoc, {
    type: "doc";
}>;
type FinalNavigationCategoryLinkDoc = Extract<InputNavigationCategoryLinkDoc, {
    type: "doc";
}>;
export type NavigationDoc = ReplaceFields<FinalNavigationDoc, {
    label: string;
    categoryLabel?: string;
    path: string;
} & ResolvedIcon>;
export type NavigationLink = ReplaceFields<InputNavigationLink, ResolvedIcon>;
export type NavigationCategoryLinkDoc = ReplaceFields<FinalNavigationCategoryLinkDoc, {
    label: string;
    path: string;
} & ResolvedIcon>;
export type NavigationCategory = ReplaceFields<InputNavigationCategory, {
    items: NavigationItem[];
    link?: NavigationCategoryLinkDoc;
} & ResolvedIcon>;
export type NavigationCustomPage = ReplaceFields<InputNavigationCustomPage, ResolvedIcon>;
export type NavigationItem = NavigationDoc | NavigationLink | NavigationCategory | NavigationCustomPage;
export type Navigation = NavigationItem[];
export declare class NavigationResolver {
    private rootDir;
    private globPatterns;
    private globFiles;
    private items;
    constructor(config: ConfigWithMeta);
    resolve(): Promise<NavigationItem[]>;
    private resolveDoc;
    private resolveLink;
    private resolveItemCategoryLinkDoc;
    private resolveNavigationItemDoc;
    private resolveItem;
}
export {};
