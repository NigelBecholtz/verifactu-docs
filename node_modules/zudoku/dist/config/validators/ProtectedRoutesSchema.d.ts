import { z } from "zod";
import type { UseAuthReturn } from "../../lib/authentication/hook.js";
import type { ZudokuContext } from "../../lib/core/ZudokuContext.js";
export type CallbackContext = {
    auth: UseAuthReturn;
    context: ZudokuContext;
};
type ProtectedRouteCallback = (c: CallbackContext) => boolean;
export type ProtectedRoutesInput = z.input<typeof ProtectedRoutesInputSchema>;
export type ProtectedRoutes = z.output<typeof ProtectedRoutesInputSchema>;
export declare const ProtectedRoutesInputSchema: z.ZodOptional<z.ZodUnion<readonly [z.ZodArray<z.ZodString>, z.ZodRecord<z.ZodString, z.ZodCustom<ProtectedRouteCallback, ProtectedRouteCallback>>]>>;
export declare const ProtectedRoutesSchema: z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodArray<z.ZodString>, z.ZodRecord<z.ZodString, z.ZodCustom<ProtectedRouteCallback, ProtectedRouteCallback>>]>>, z.ZodTransform<Record<string, (c: CallbackContext) => boolean> | undefined, string[] | Record<string, ProtectedRouteCallback> | undefined>>;
export {};
