import type { Options } from "@mdx-js/rollup";
import type { ComponentType, ReactNode } from "react";
import type { BundledLanguage, BundledTheme } from "shiki";
import { z } from "zod";
import type { UseAuthReturn } from "../../lib/authentication/hook.js";
import type { AuthState } from "../../lib/authentication/state.js";
import type { SlotType } from "../../lib/components/context/SlotProvider.js";
import type { ZudokuPlugin } from "../../lib/core/plugins.js";
import type { ZudokuContext } from "../../lib/core/ZudokuContext.js";
import type { FilterCatalogItemsFn } from "../../lib/plugins/api-catalog/index.js";
import type { ApiKey } from "../../lib/plugins/api-keys/index.js";
import type { TransformExamplesFn } from "../../lib/plugins/openapi/interfaces.js";
import type { PagefindSearchFragment } from "../../lib/plugins/search-pagefind/types.js";
import type { MdxComponentsType } from "../../lib/util/MdxComponents.js";
import type { ExposedComponentProps } from "../../lib/util/useExposedProps.js";
import { InputNavigationSchema } from "./InputNavigationSchema.js";
declare const ApiSchema: z.ZodDiscriminatedUnion<[z.ZodObject<{
    server: z.ZodOptional<z.ZodString>;
    path: z.ZodOptional<z.ZodString>;
    categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        tags: z.ZodArray<z.ZodString>;
    }, z.core.$strip>>>;
    options: z.ZodOptional<z.ZodObject<{
        examplesLanguage: z.ZodOptional<z.ZodString>;
        disablePlayground: z.ZodOptional<z.ZodBoolean>;
        disableSidecar: z.ZodOptional<z.ZodBoolean>;
        showVersionSelect: z.ZodOptional<z.ZodEnum<{
            hide: "hide";
            always: "always";
            "if-available": "if-available";
        }>>;
        expandAllTags: z.ZodOptional<z.ZodBoolean>;
        expandApiInformation: z.ZodOptional<z.ZodBoolean>;
        transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
    }, z.core.$strip>>;
    type: z.ZodLiteral<"url">;
    input: z.ZodString;
}, z.core.$strip>, z.ZodObject<{
    server: z.ZodOptional<z.ZodString>;
    path: z.ZodOptional<z.ZodString>;
    categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        tags: z.ZodArray<z.ZodString>;
    }, z.core.$strip>>>;
    options: z.ZodOptional<z.ZodObject<{
        examplesLanguage: z.ZodOptional<z.ZodString>;
        disablePlayground: z.ZodOptional<z.ZodBoolean>;
        disableSidecar: z.ZodOptional<z.ZodBoolean>;
        showVersionSelect: z.ZodOptional<z.ZodEnum<{
            hide: "hide";
            always: "always";
            "if-available": "if-available";
        }>>;
        expandAllTags: z.ZodOptional<z.ZodBoolean>;
        expandApiInformation: z.ZodOptional<z.ZodBoolean>;
        transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
    }, z.core.$strip>>;
    type: z.ZodLiteral<"file">;
    input: z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>;
}, z.core.$strip>, z.ZodObject<{
    server: z.ZodOptional<z.ZodString>;
    path: z.ZodOptional<z.ZodString>;
    categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        tags: z.ZodArray<z.ZodString>;
    }, z.core.$strip>>>;
    options: z.ZodOptional<z.ZodObject<{
        examplesLanguage: z.ZodOptional<z.ZodString>;
        disablePlayground: z.ZodOptional<z.ZodBoolean>;
        disableSidecar: z.ZodOptional<z.ZodBoolean>;
        showVersionSelect: z.ZodOptional<z.ZodEnum<{
            hide: "hide";
            always: "always";
            "if-available": "if-available";
        }>>;
        expandAllTags: z.ZodOptional<z.ZodBoolean>;
        expandApiInformation: z.ZodOptional<z.ZodBoolean>;
        transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
    }, z.core.$strip>>;
    type: z.ZodLiteral<"raw">;
    input: z.ZodString;
}, z.core.$strip>]>;
export declare const FooterSocialIcons: readonly ["reddit", "discord", "github", "x", "linkedin", "facebook", "instagram", "youtube", "tiktok", "twitch", "pinterest", "snapchat", "whatsapp", "telegram"];
export declare const FooterSocialSchema: z.ZodObject<{
    label: z.ZodOptional<z.ZodString>;
    href: z.ZodString;
    icon: z.ZodOptional<z.ZodUnion<readonly [z.ZodEnum<{
        x: "x";
        facebook: "facebook";
        github: "github";
        instagram: "instagram";
        linkedin: "linkedin";
        twitch: "twitch";
        youtube: "youtube";
        reddit: "reddit";
        discord: "discord";
        tiktok: "tiktok";
        pinterest: "pinterest";
        snapchat: "snapchat";
        whatsapp: "whatsapp";
        telegram: "telegram";
    }>, z.ZodCustom<ReactNode, ReactNode>]>>;
}, z.core.$strip>;
export declare const FooterSchema: z.ZodOptional<z.ZodObject<{
    columns: z.ZodOptional<z.ZodArray<z.ZodObject<{
        position: z.ZodOptional<z.ZodEnum<{
            end: "end";
            center: "center";
            start: "start";
        }>>;
        title: z.ZodString;
        links: z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            href: z.ZodString;
        }, z.core.$strip>>;
    }, z.core.$strip>>>;
    social: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodOptional<z.ZodString>;
        href: z.ZodString;
        icon: z.ZodOptional<z.ZodUnion<readonly [z.ZodEnum<{
            x: "x";
            facebook: "facebook";
            github: "github";
            instagram: "instagram";
            linkedin: "linkedin";
            twitch: "twitch";
            youtube: "youtube";
            reddit: "reddit";
            discord: "discord";
            tiktok: "tiktok";
            pinterest: "pinterest";
            snapchat: "snapchat";
            whatsapp: "whatsapp";
            telegram: "telegram";
        }>, z.ZodCustom<ReactNode, ReactNode>]>>;
    }, z.core.$strip>>>;
    copyright: z.ZodOptional<z.ZodString>;
    logo: z.ZodOptional<z.ZodObject<{
        src: z.ZodObject<{
            light: z.ZodString;
            dark: z.ZodString;
        }, z.core.$strip>;
        alt: z.ZodOptional<z.ZodString>;
        width: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        href: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>;
    position: z.ZodOptional<z.ZodEnum<{
        end: "end";
        center: "center";
        start: "start";
    }>>;
}, z.core.$strip>>;
declare const SiteMapSchema: z.ZodOptional<z.ZodObject<{
    siteUrl: z.ZodString;
    changefreq: z.ZodOptional<z.ZodEnum<{
        never: "never";
        always: "always";
        hourly: "hourly";
        daily: "daily";
        weekly: "weekly";
        monthly: "monthly";
        yearly: "yearly";
    }>>;
    priority: z.ZodOptional<z.ZodNumber>;
    outDir: z.ZodOptional<z.ZodString>;
    autoLastmod: z.ZodOptional<z.ZodBoolean>;
    exclude: z.ZodOptional<z.ZodUnion<readonly [z.ZodCustom<() => Promise<string[]>, () => Promise<string[]>>, z.ZodArray<z.ZodString>]>>;
}, z.core.$strip>>;
export declare const DocsConfigSchema: z.ZodObject<{
    files: z.ZodDefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodTransform<string[], string | string[]>>>;
    defaultOptions: z.ZodOptional<z.ZodObject<{
        toc: z.ZodOptional<z.ZodBoolean>;
        disablePager: z.ZodOptional<z.ZodBoolean>;
        showLastModified: z.ZodOptional<z.ZodBoolean>;
        suggestEdit: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            text: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>>;
    }, z.core.$strip>>;
}, z.core.$strip>;
declare const Redirect: z.ZodObject<{
    from: z.ZodString;
    to: z.ZodString;
}, z.core.$strip>;
declare const FontConfigSchema: z.ZodUnion<readonly [z.ZodEnum<{
    Inter: "Inter";
    Roboto: "Roboto";
    "Open Sans": "Open Sans";
    Poppins: "Poppins";
    Montserrat: "Montserrat";
    Outfit: "Outfit";
    "Plus Jakarta Sans": "Plus Jakarta Sans";
    "DM Sans": "DM Sans";
    "IBM Plex Sans": "IBM Plex Sans";
    Geist: "Geist";
    Oxanium: "Oxanium";
    "Architects Daughter": "Architects Daughter";
    Merriweather: "Merriweather";
    "Playfair Display": "Playfair Display";
    Lora: "Lora";
    "Source Serif Pro": "Source Serif Pro";
    "Libre Baskerville": "Libre Baskerville";
    "Space Grotesk": "Space Grotesk";
    "JetBrains Mono": "JetBrains Mono";
    "Fira Code": "Fira Code";
    "Source Code Pro": "Source Code Pro";
    "IBM Plex Mono": "IBM Plex Mono";
    "Roboto Mono": "Roboto Mono";
    "Space Mono": "Space Mono";
    "Geist Mono": "Geist Mono";
}>, z.ZodObject<{
    url: z.ZodString;
    fontFamily: z.ZodOptional<z.ZodString>;
}, z.core.$strip>]>;
export type FontConfig = z.infer<typeof FontConfigSchema>;
export declare const CdnUrlSchema: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
    base: z.ZodOptional<z.ZodString>;
    media: z.ZodOptional<z.ZodString>;
}, z.core.$strip>]>, z.ZodTransform<{
    base: string | undefined;
    media: string | undefined;
}, string | {
    base?: string | undefined;
    media?: string | undefined;
}>>>;
export declare const ZudokuConfig: z.ZodObject<{
    slots: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodCustom<SlotType, SlotType>>>;
    UNSAFE_slotlets: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodCustom<SlotType, SlotType>>>;
    mdx: z.ZodOptional<z.ZodObject<{
        components: z.ZodOptional<z.ZodCustom<MdxComponentsType, MdxComponentsType>>;
    }, z.core.$strip>>;
    customPages: z.ZodOptional<z.ZodArray<z.ZodObject<{
        path: z.ZodString;
        element: z.ZodOptional<z.ZodCustom<NonNullable<ReactNode>, NonNullable<ReactNode>>>;
        render: z.ZodOptional<z.ZodCustom<ComponentType<ExposedComponentProps>, ComponentType<ExposedComponentProps>>>;
        prose: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strip>>>;
    plugins: z.ZodOptional<z.ZodArray<z.ZodCustom<ZudokuPlugin, ZudokuPlugin>>>;
    build: z.ZodOptional<z.ZodCustom<{
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    }, {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    }>>;
    protectedRoutes: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodArray<z.ZodString>, z.ZodRecord<z.ZodString, z.ZodCustom<(c: import("./ProtectedRoutesSchema.js").CallbackContext) => boolean, (c: import("./ProtectedRoutesSchema.js").CallbackContext) => boolean>>]>>, z.ZodTransform<Record<string, (c: import("./ProtectedRoutesSchema.js").CallbackContext) => boolean> | undefined, string[] | Record<string, (c: import("./ProtectedRoutesSchema.js").CallbackContext) => boolean> | undefined>>>;
    basePath: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    canonicalUrlOrigin: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    cdnUrl: z.ZodOptional<z.ZodOptional<z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        base: z.ZodOptional<z.ZodString>;
        media: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>]>, z.ZodTransform<{
        base: string | undefined;
        media: string | undefined;
    }, string | {
        base?: string | undefined;
        media?: string | undefined;
    }>>>>>;
    port: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    https: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        key: z.ZodString;
        cert: z.ZodString;
        ca: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>>;
    site: z.ZodOptional<z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        logoUrl: z.ZodOptional<z.ZodString>;
        dir: z.ZodOptional<z.ZodOptional<z.ZodEnum<{
            ltr: "ltr";
            rtl: "rtl";
        }>>>;
        logo: z.ZodOptional<z.ZodObject<{
            src: z.ZodObject<{
                light: z.ZodString;
                dark: z.ZodString;
            }, z.core.$strip>;
            alt: z.ZodOptional<z.ZodString>;
            width: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
            href: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        showPoweredBy: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        banner: z.ZodOptional<z.ZodObject<{
            message: z.ZodCustom<NonNullable<ReactNode>, NonNullable<ReactNode>>;
            color: z.ZodOptional<z.ZodCustom<"info" | (string & {}) | "note" | "tip" | "caution" | "danger", "info" | (string & {}) | "note" | "tip" | "caution" | "danger">>;
            dismissible: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        footer: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            columns: z.ZodOptional<z.ZodArray<z.ZodObject<{
                position: z.ZodOptional<z.ZodEnum<{
                    end: "end";
                    center: "center";
                    start: "start";
                }>>;
                title: z.ZodString;
                links: z.ZodArray<z.ZodObject<{
                    label: z.ZodString;
                    href: z.ZodString;
                }, z.core.$strip>>;
            }, z.core.$strip>>>;
            social: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodOptional<z.ZodString>;
                href: z.ZodString;
                icon: z.ZodOptional<z.ZodUnion<readonly [z.ZodEnum<{
                    x: "x";
                    facebook: "facebook";
                    github: "github";
                    instagram: "instagram";
                    linkedin: "linkedin";
                    twitch: "twitch";
                    youtube: "youtube";
                    reddit: "reddit";
                    discord: "discord";
                    tiktok: "tiktok";
                    pinterest: "pinterest";
                    snapchat: "snapchat";
                    whatsapp: "whatsapp";
                    telegram: "telegram";
                }>, z.ZodCustom<ReactNode, ReactNode>]>>;
            }, z.core.$strip>>>;
            copyright: z.ZodOptional<z.ZodString>;
            logo: z.ZodOptional<z.ZodObject<{
                src: z.ZodObject<{
                    light: z.ZodString;
                    dark: z.ZodString;
                }, z.core.$strip>;
                alt: z.ZodOptional<z.ZodString>;
                width: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
                href: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>>;
            position: z.ZodOptional<z.ZodEnum<{
                end: "end";
                center: "center";
                start: "start";
            }>>;
        }, z.core.$strip>>>;
    }, z.core.$strip>>;
    navigation: z.ZodOptional<z.ZodArray<z.ZodType<import("./InputNavigationSchema.js").InputNavigationItem, unknown, z.core.$ZodTypeInternals<import("./InputNavigationSchema.js").InputNavigationItem, unknown>>>>;
    theme: z.ZodOptional<z.ZodObject<{
        registryUrl: z.ZodOptional<z.ZodString>;
        customCss: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodUnion<readonly [z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>]>>>]>>;
        light: z.ZodOptional<z.ZodObject<{
            background: z.ZodOptional<z.ZodString>;
            foreground: z.ZodOptional<z.ZodString>;
            card: z.ZodOptional<z.ZodString>;
            cardForeground: z.ZodOptional<z.ZodString>;
            popover: z.ZodOptional<z.ZodString>;
            popoverForeground: z.ZodOptional<z.ZodString>;
            primary: z.ZodOptional<z.ZodString>;
            primaryForeground: z.ZodOptional<z.ZodString>;
            secondary: z.ZodOptional<z.ZodString>;
            secondaryForeground: z.ZodOptional<z.ZodString>;
            muted: z.ZodOptional<z.ZodString>;
            mutedForeground: z.ZodOptional<z.ZodString>;
            accent: z.ZodOptional<z.ZodString>;
            accentForeground: z.ZodOptional<z.ZodString>;
            destructive: z.ZodOptional<z.ZodString>;
            destructiveForeground: z.ZodOptional<z.ZodString>;
            border: z.ZodOptional<z.ZodString>;
            input: z.ZodOptional<z.ZodString>;
            ring: z.ZodOptional<z.ZodString>;
            radius: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        dark: z.ZodOptional<z.ZodObject<{
            background: z.ZodOptional<z.ZodString>;
            foreground: z.ZodOptional<z.ZodString>;
            card: z.ZodOptional<z.ZodString>;
            cardForeground: z.ZodOptional<z.ZodString>;
            popover: z.ZodOptional<z.ZodString>;
            popoverForeground: z.ZodOptional<z.ZodString>;
            primary: z.ZodOptional<z.ZodString>;
            primaryForeground: z.ZodOptional<z.ZodString>;
            secondary: z.ZodOptional<z.ZodString>;
            secondaryForeground: z.ZodOptional<z.ZodString>;
            muted: z.ZodOptional<z.ZodString>;
            mutedForeground: z.ZodOptional<z.ZodString>;
            accent: z.ZodOptional<z.ZodString>;
            accentForeground: z.ZodOptional<z.ZodString>;
            destructive: z.ZodOptional<z.ZodString>;
            destructiveForeground: z.ZodOptional<z.ZodString>;
            border: z.ZodOptional<z.ZodString>;
            input: z.ZodOptional<z.ZodString>;
            ring: z.ZodOptional<z.ZodString>;
            radius: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        fonts: z.ZodOptional<z.ZodObject<{
            sans: z.ZodOptional<z.ZodUnion<readonly [z.ZodEnum<{
                Inter: "Inter";
                Roboto: "Roboto";
                "Open Sans": "Open Sans";
                Poppins: "Poppins";
                Montserrat: "Montserrat";
                Outfit: "Outfit";
                "Plus Jakarta Sans": "Plus Jakarta Sans";
                "DM Sans": "DM Sans";
                "IBM Plex Sans": "IBM Plex Sans";
                Geist: "Geist";
                Oxanium: "Oxanium";
                "Architects Daughter": "Architects Daughter";
                Merriweather: "Merriweather";
                "Playfair Display": "Playfair Display";
                Lora: "Lora";
                "Source Serif Pro": "Source Serif Pro";
                "Libre Baskerville": "Libre Baskerville";
                "Space Grotesk": "Space Grotesk";
                "JetBrains Mono": "JetBrains Mono";
                "Fira Code": "Fira Code";
                "Source Code Pro": "Source Code Pro";
                "IBM Plex Mono": "IBM Plex Mono";
                "Roboto Mono": "Roboto Mono";
                "Space Mono": "Space Mono";
                "Geist Mono": "Geist Mono";
            }>, z.ZodObject<{
                url: z.ZodString;
                fontFamily: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>]>>;
            serif: z.ZodOptional<z.ZodUnion<readonly [z.ZodEnum<{
                Inter: "Inter";
                Roboto: "Roboto";
                "Open Sans": "Open Sans";
                Poppins: "Poppins";
                Montserrat: "Montserrat";
                Outfit: "Outfit";
                "Plus Jakarta Sans": "Plus Jakarta Sans";
                "DM Sans": "DM Sans";
                "IBM Plex Sans": "IBM Plex Sans";
                Geist: "Geist";
                Oxanium: "Oxanium";
                "Architects Daughter": "Architects Daughter";
                Merriweather: "Merriweather";
                "Playfair Display": "Playfair Display";
                Lora: "Lora";
                "Source Serif Pro": "Source Serif Pro";
                "Libre Baskerville": "Libre Baskerville";
                "Space Grotesk": "Space Grotesk";
                "JetBrains Mono": "JetBrains Mono";
                "Fira Code": "Fira Code";
                "Source Code Pro": "Source Code Pro";
                "IBM Plex Mono": "IBM Plex Mono";
                "Roboto Mono": "Roboto Mono";
                "Space Mono": "Space Mono";
                "Geist Mono": "Geist Mono";
            }>, z.ZodObject<{
                url: z.ZodString;
                fontFamily: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>]>>;
            mono: z.ZodOptional<z.ZodUnion<readonly [z.ZodEnum<{
                Inter: "Inter";
                Roboto: "Roboto";
                "Open Sans": "Open Sans";
                Poppins: "Poppins";
                Montserrat: "Montserrat";
                Outfit: "Outfit";
                "Plus Jakarta Sans": "Plus Jakarta Sans";
                "DM Sans": "DM Sans";
                "IBM Plex Sans": "IBM Plex Sans";
                Geist: "Geist";
                Oxanium: "Oxanium";
                "Architects Daughter": "Architects Daughter";
                Merriweather: "Merriweather";
                "Playfair Display": "Playfair Display";
                Lora: "Lora";
                "Source Serif Pro": "Source Serif Pro";
                "Libre Baskerville": "Libre Baskerville";
                "Space Grotesk": "Space Grotesk";
                "JetBrains Mono": "JetBrains Mono";
                "Fira Code": "Fira Code";
                "Source Code Pro": "Source Code Pro";
                "IBM Plex Mono": "IBM Plex Mono";
                "Roboto Mono": "Roboto Mono";
                "Space Mono": "Space Mono";
                "Geist Mono": "Geist Mono";
            }>, z.ZodObject<{
                url: z.ZodString;
                fontFamily: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>]>>;
        }, z.core.$strip>>;
        noDefaultTheme: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strip>>;
    syntaxHighlighting: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        languages: z.ZodOptional<z.ZodArray<z.ZodCustom<BundledLanguage, BundledLanguage>>>;
        themes: z.ZodOptional<z.ZodObject<{
            light: z.ZodCustom<BundledTheme, BundledTheme>;
            dark: z.ZodCustom<BundledTheme, BundledTheme>;
        }, z.core.$strip>>;
    }, z.core.$strip>>>;
    metadata: z.ZodOptional<z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        defaultTitle: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        description: z.ZodOptional<z.ZodString>;
        logo: z.ZodOptional<z.ZodString>;
        favicon: z.ZodOptional<z.ZodString>;
        generator: z.ZodOptional<z.ZodString>;
        applicationName: z.ZodOptional<z.ZodString>;
        referrer: z.ZodOptional<z.ZodString>;
        keywords: z.ZodOptional<z.ZodArray<z.ZodString>>;
        authors: z.ZodOptional<z.ZodArray<z.ZodString>>;
        creator: z.ZodOptional<z.ZodString>;
        publisher: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>;
    authentication: z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
        type: z.ZodLiteral<"clerk">;
        clerkPubKey: z.ZodCustom<`pk_test_${string}` | `pk_live_${string}`, `pk_test_${string}` | `pk_live_${string}`>;
        jwtTemplateName: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodLiteral<"openid">;
        clientId: z.ZodString;
        issuer: z.ZodString;
        audience: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString>>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodLiteral<"azureb2c">;
        clientId: z.ZodString;
        tenantName: z.ZodString;
        policyName: z.ZodString;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString>>;
        issuer: z.ZodString;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodLiteral<"auth0">;
        clientId: z.ZodString;
        domain: z.ZodString;
        audience: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString>>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodLiteral<"supabase">;
        supabaseUrl: z.ZodString;
        supabaseKey: z.ZodString;
        provider: z.ZodEnum<{
            facebook: "facebook";
            github: "github";
            gitlab: "gitlab";
            twitter: "twitter";
            google: "google";
            bitbucket: "bitbucket";
        }>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>]>>;
    search: z.ZodOptional<z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
        type: z.ZodLiteral<"inkeep">;
        apiKey: z.ZodString;
        integrationId: z.ZodString;
        organizationId: z.ZodString;
        primaryBrandColor: z.ZodString;
        organizationDisplayName: z.ZodString;
    }, z.core.$loose>, z.ZodObject<{
        type: z.ZodLiteral<"pagefind">;
        ranking: z.ZodOptional<z.ZodObject<{
            termFrequency: z.ZodNumber;
            pageLength: z.ZodNumber;
            termSimilarity: z.ZodNumber;
            termSaturation: z.ZodNumber;
        }, z.core.$strip>>;
        maxResults: z.ZodOptional<z.ZodNumber>;
        maxSubResults: z.ZodOptional<z.ZodNumber>;
        transformResults: z.ZodOptional<z.ZodCustom<(data: {
            result: PagefindSearchFragment;
            auth: AuthState;
            context: ZudokuContext;
        }) => PagefindSearchFragment | boolean | undefined | void, (data: {
            result: PagefindSearchFragment;
            auth: AuthState;
            context: ZudokuContext;
        }) => PagefindSearchFragment | boolean | undefined | void>>;
    }, z.core.$strip>]>>>;
    docs: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        files: z.ZodDefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodTransform<string[], string | string[]>>>;
        defaultOptions: z.ZodOptional<z.ZodObject<{
            toc: z.ZodOptional<z.ZodBoolean>;
            disablePager: z.ZodOptional<z.ZodBoolean>;
            showLastModified: z.ZodOptional<z.ZodBoolean>;
            suggestEdit: z.ZodOptional<z.ZodOptional<z.ZodObject<{
                url: z.ZodString;
                text: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>>>;
        }, z.core.$strip>>;
    }, z.core.$strip>>>;
    apis: z.ZodOptional<z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
        server: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>>;
        type: z.ZodLiteral<"url">;
        input: z.ZodString;
    }, z.core.$strip>, z.ZodObject<{
        server: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>>;
        type: z.ZodLiteral<"file">;
        input: z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>;
    }, z.core.$strip>, z.ZodObject<{
        server: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>>;
        type: z.ZodLiteral<"raw">;
        input: z.ZodString;
    }, z.core.$strip>]>, z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
        server: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>>;
        type: z.ZodLiteral<"url">;
        input: z.ZodString;
    }, z.core.$strip>, z.ZodObject<{
        server: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>>;
        type: z.ZodLiteral<"file">;
        input: z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>;
    }, z.core.$strip>, z.ZodObject<{
        server: z.ZodOptional<z.ZodString>;
        path: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>>;
        type: z.ZodLiteral<"raw">;
        input: z.ZodString;
    }, z.core.$strip>]>>]>>;
    catalogs: z.ZodOptional<z.ZodUnion<readonly [z.ZodObject<{
        path: z.ZodString;
        label: z.ZodString;
        items: z.ZodOptional<z.ZodArray<z.ZodString>>;
        filterItems: z.ZodOptional<z.ZodCustom<FilterCatalogItemsFn, FilterCatalogItemsFn>>;
    }, z.core.$strip>, z.ZodArray<z.ZodObject<{
        path: z.ZodString;
        label: z.ZodString;
        items: z.ZodOptional<z.ZodArray<z.ZodString>>;
        filterItems: z.ZodOptional<z.ZodCustom<FilterCatalogItemsFn, FilterCatalogItemsFn>>;
    }, z.core.$strip>>]>>;
    apiKeys: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodBoolean;
        getKeys: z.ZodOptional<z.ZodCustom<(context: ZudokuContext) => Promise<ApiKey[]>, (context: ZudokuContext) => Promise<ApiKey[]>>>;
        rollKey: z.ZodOptional<z.ZodCustom<(id: string, context: ZudokuContext) => Promise<void>, (id: string, context: ZudokuContext) => Promise<void>>>;
        deleteKey: z.ZodOptional<z.ZodCustom<(id: string, context: ZudokuContext) => Promise<void>, (id: string, context: ZudokuContext) => Promise<void>>>;
        updateKeyDescription: z.ZodOptional<z.ZodCustom<(apiKey: {
            id: string;
            description: string;
        }, context: ZudokuContext) => Promise<void>, (apiKey: {
            id: string;
            description: string;
        }, context: ZudokuContext) => Promise<void>>>;
        createKey: z.ZodOptional<z.ZodCustom<({ apiKey, context, auth, }: {
            apiKey: {
                description: string;
                expiresOn?: string;
            };
            context: ZudokuContext;
            auth: UseAuthReturn;
        }) => Promise<void>, ({ apiKey, context, auth, }: {
            apiKey: {
                description: string;
                expiresOn?: string;
            };
            context: ZudokuContext;
            auth: UseAuthReturn;
        }) => Promise<void>>>;
    }, z.core.$strip>>;
    redirects: z.ZodOptional<z.ZodArray<z.ZodObject<{
        from: z.ZodString;
        to: z.ZodString;
    }, z.core.$strip>>>;
    sitemap: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        siteUrl: z.ZodString;
        changefreq: z.ZodOptional<z.ZodEnum<{
            never: "never";
            always: "always";
            hourly: "hourly";
            daily: "daily";
            weekly: "weekly";
            monthly: "monthly";
            yearly: "yearly";
        }>>;
        priority: z.ZodOptional<z.ZodNumber>;
        outDir: z.ZodOptional<z.ZodString>;
        autoLastmod: z.ZodOptional<z.ZodBoolean>;
        exclude: z.ZodOptional<z.ZodUnion<readonly [z.ZodCustom<() => Promise<string[]>, () => Promise<string[]>>, z.ZodArray<z.ZodString>]>>;
    }, z.core.$strip>>>;
    enableStatusPages: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    defaults: z.ZodOptional<z.ZodObject<{
        apis: z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            disableSidecar: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<{
                hide: "hide";
                always: "always";
                "if-available": "if-available";
            }>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            expandApiInformation: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodCustom<TransformExamplesFn, TransformExamplesFn>>;
        }, z.core.$strip>;
        examplesLanguage: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>;
}, z.core.$strip>;
export type ZudokuApiConfig = z.infer<typeof ApiSchema>;
export type ZudokuSiteMapConfig = z.infer<typeof SiteMapSchema>;
export type ZudokuDocsConfig = z.infer<typeof DocsConfigSchema>;
export type ZudokuRedirect = z.infer<typeof Redirect>;
type BaseZudokuConfig = z.input<typeof ZudokuConfig>;
export type ZudokuConfig = Omit<BaseZudokuConfig, "navigation"> & {
    navigation?: z.infer<typeof InputNavigationSchema>;
};
export declare function validateConfig(config: unknown, configPath?: string): void;
export {};
