import * as oauth from "oauth4webapi";
import type { OpenIDAuthenticationConfig } from "../../../config/config.js";
import { CoreAuthenticationPlugin } from "../AuthenticationPlugin.js";
import type { AuthenticationPlugin, AuthenticationProviderInitializer } from "../authentication.js";
export interface OpenIdProviderData {
    accessToken: string;
    idToken?: string;
    refreshToken?: string;
    expiresOn: Date;
    tokenType: string;
}
export declare const OPENID_CALLBACK_PATH = "/oauth/callback";
export declare class OpenIDAuthenticationProvider extends CoreAuthenticationPlugin implements AuthenticationPlugin {
    protected client: oauth.Client;
    protected issuer: string;
    protected authorizationServer: oauth.AuthorizationServer | undefined;
    protected callbackUrlPath: string;
    protected onAuthorizationUrl?: (authorizationUrl: URL, options: {
        isSignIn: boolean;
        isSignUp: boolean;
    }) => void;
    protected readonly redirectToAfterSignUp: string | undefined;
    protected readonly redirectToAfterSignIn: string | undefined;
    protected readonly redirectToAfterSignOut: string;
    private readonly audience?;
    private readonly scopes;
    constructor({ issuer, audience, clientId, redirectToAfterSignUp, redirectToAfterSignIn, redirectToAfterSignOut, basePath, scopes, }: OpenIDAuthenticationConfig);
    protected getAuthServer(): Promise<oauth.AuthorizationServer>;
    /**
     * Sets the tokens from various OAuth responses
     * @param response
     */
    protected setTokensFromResponse(response: oauth.TokenEndpointResponse | oauth.OAuth2Error): void;
    signUp({ redirectTo, replace, }?: {
        redirectTo?: string;
        replace?: boolean;
    }): Promise<void>;
    signIn({ redirectTo, replace, }?: {
        redirectTo?: string;
        replace?: boolean;
    }): Promise<void>;
    private authorize;
    getAccessToken(): Promise<string>;
    signRequest: (request: Request) => Promise<Request>;
    signOut: () => Promise<void>;
    onPageLoad: () => Promise<void>;
    handleCallback: () => Promise<string>;
    getRoutes(): {
        path: string;
        element: import("react/jsx-runtime").JSX.Element;
    }[];
}
declare const openIDAuth: AuthenticationProviderInitializer<OpenIDAuthenticationConfig>;
export default openIDAuth;
