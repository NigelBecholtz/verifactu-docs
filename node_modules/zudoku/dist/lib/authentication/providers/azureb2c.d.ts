import type { AzureB2CAuthenticationConfig } from "../../../config/config.js";
import { CoreAuthenticationPlugin } from "../AuthenticationPlugin.js";
import type { AuthenticationPlugin, AuthenticationProviderInitializer } from "../authentication.js";
export declare class AzureB2CAuthPlugin extends CoreAuthenticationPlugin implements AuthenticationPlugin {
    private msalInstance;
    private readonly scopes;
    private readonly redirectToAfterSignUp?;
    private readonly redirectToAfterSignIn?;
    private readonly redirectToAfterSignOut;
    constructor({ clientId, tenantName, policyName, scopes, redirectToAfterSignUp, redirectToAfterSignIn, redirectToAfterSignOut, basePath, }: AzureB2CAuthenticationConfig);
    private handleAuthResponse;
    signUp({ redirectTo }?: {
        redirectTo?: string;
    }): Promise<void>;
    signIn({ redirectTo }?: {
        redirectTo?: string;
    }): Promise<void>;
    getAccessToken(): Promise<string>;
    signRequest: (request: Request) => Promise<Request>;
    signOut: () => Promise<void>;
    handleCallback: () => Promise<string>;
    getRoutes(): {
        path: string;
        element: import("react/jsx-runtime").JSX.Element;
    }[];
}
declare const azureB2CAuth: AuthenticationProviderInitializer<AzureB2CAuthenticationConfig>;
export default azureB2CAuth;
