import { jsx as _jsx } from "react/jsx-runtime";
import { useSuspenseQuery } from "@tanstack/react-query";
import { Navigate } from "react-router";
import { useZudoku } from "zudoku/components";
import { joinUrl } from "../../util/joinUrl.js";
import { normalizeRedirectUrl } from "../../util/url.js";
import { OAuthAuthorizationError } from "../errors.js";
export function CallbackHandler({ handleCallback, }) {
    const { options } = useZudoku();
    const executeCallback = useSuspenseQuery({
        retry: false,
        queryKey: ["oauth-callback"],
        queryFn: async () => {
            const url = new URL(window.location.href);
            const errorParam = url.searchParams.get("error");
            const errorDescription = url.searchParams.get("error_description") ?? undefined;
            const errorUri = url.searchParams.get("error_uri") ?? undefined;
            if (errorParam) {
                throw new OAuthAuthorizationError(`OAuth error '${errorParam}': ${errorDescription}`, {
                    error: errorParam,
                    error_description: errorDescription,
                    error_uri: errorUri,
                });
            }
            return joinUrl(normalizeRedirectUrl(await handleCallback(), window.location.origin, options.basePath));
        },
    });
    return _jsx(Navigate, { to: executeCallback.data, replace: true });
}
//# sourceMappingURL=CallbackHandler.js.map