import { jsx as _jsx } from "react/jsx-runtime";
import { memo } from "react";
import { useZudoku } from "../components/context/ZudokuContext.js";
import { highlight } from "../shiki.js";
import invariant from "../util/invariant.js";
import { CodeBlock } from "./CodeBlock.js";
import { EmbeddedCodeBlock } from "./EmbeddedCodeBlock.js";
export const SyntaxHighlight = memo(({ code, children, embedded, ...props }) => {
    const { syntaxHighlighting } = useZudoku().options;
    invariant(syntaxHighlighting?.highlighter, "Highlighter not found");
    const highlightedCode = highlight(syntaxHighlighting.highlighter, code ?? children, props.language, syntaxHighlighting.themes);
    return embedded ? (_jsx(EmbeddedCodeBlock, { ...props, children: highlightedCode })) : (_jsx(CodeBlock, { ...props, children: highlightedCode }));
});
SyntaxHighlight.displayName = "SyntaxHighlight";
//# sourceMappingURL=SyntaxHighlight.js.map