import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckIcon, CopyIcon, EyeIcon, EyeOffIcon } from "lucide-react";
import { useState } from "react";
import { cn } from "../util/cn.js";
import { useCopyToClipboard } from "../util/useCopyToClipboard.js";
import { Button } from "./Button.js";
export const SecretText = ({ secret, revealed = false, previewChars = 5, className, }) => {
    return (_jsxs("span", { className: cn("w-full truncate", className), children: [_jsx("div", { className: cn("w-40 inline-block md:w-fit", revealed ? "" : "opacity-50"), children: revealed
                    ? secret.slice(0, previewChars === 0 ? secret.length : -previewChars)
                    : "•••• ".repeat(secret.slice(0, previewChars === 0 ? secret.length : -previewChars).length / 5) +
                        "•".repeat(secret.slice(0, previewChars === 0 ? secret.length : -previewChars).length % 5) }), previewChars > 0 && _jsx("span", { children: secret.slice(-previewChars) })] }));
};
export const Secret = ({ secret, preview = 5, className, status, onCopy, revealed: controlledRevealed, onReveal, noReveal: disabledReveal, }) => {
    const previewChars = Math.abs(preview);
    const [isRevealed, setRevealed] = useState(false);
    const [isCopied, copyToClipboard] = useCopyToClipboard();
    const revealed = controlledRevealed ?? isRevealed;
    return (_jsxs("div", { className: cn("flex gap-2 items-center text-sm border rounded-md px-1", className), children: [_jsxs("div", { className: "font-mono w-full h-9 items-center flex px-2 text-xs gap-2", children: [status && (_jsx("div", { className: cn("rounded-full shrink-0 w-2 h-2 mr-2", status === "active" && "bg-emerald-400", status === "expired" && "bg-neutral-200", status === "expiring" && "bg-yellow-400", status === "revoked" && "bg-red-400", status === "none" && "opacity-0") })), _jsx(SecretText, { secret: secret, revealed: revealed, previewChars: previewChars })] }), disabledReveal !== true && (_jsx(Button, { variant: "ghost", onClick: () => {
                    setRevealed((prev) => !prev);
                    onReveal?.(!revealed);
                }, size: "icon", children: revealed ? _jsx(EyeOffIcon, { size: 16 }) : _jsx(EyeIcon, { size: 16 }) })), _jsx(Button, { variant: "ghost", onClick: () => {
                    copyToClipboard(secret);
                    onCopy?.(secret);
                }, size: "icon", children: isCopied ? _jsx(CheckIcon, { size: 16 }) : _jsx(CopyIcon, { size: 16 }) })] }));
};
//# sourceMappingURL=Secret.js.map