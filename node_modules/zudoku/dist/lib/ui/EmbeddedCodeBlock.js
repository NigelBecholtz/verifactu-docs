import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckIcon, CopyIcon } from "lucide-react";
import { useRef, useState } from "react";
import { cn } from "../util/cn.js";
export const EmbeddedCodeBlock = ({ children, language, showCopy = "hover", showCopyText, showLanguageIndicator = true, showLineNumbers, ...props }) => {
    const [isCopied, setIsCopied] = useState(false);
    const ref = useRef(null);
    if (!children)
        return null;
    return (_jsxs("div", { className: cn("code-block-wrapper relative group bg-muted/50", showLineNumbers && "line-numbers"), children: [_jsx("div", { className: cn("code-block text-sm not-prose scrollbar overflow-x-auto [&>pre]:p-2", props.className), ref: ref, children: children }), showLanguageIndicator && (_jsx("span", { className: cn("absolute top-1.5 end-3 !text-[11px] font-mono text-muted-foreground transition group-hover:opacity-0", showCopy === "always" && "hidden"), children: language })), showCopy !== "never" && (_jsxs("button", { type: "button", "aria-label": "Copy code", title: "Copy code", className: cn("absolute top-2 end-2 p-2 transition hover:shadow-xs active:shadow-none active:inset-shadow-xs hover:outline outline-border rounded-md text-sm text-muted-foreground", showCopy === "hover" && "opacity-0 group-hover:opacity-100", showCopyText && "flex gap-2 items-center font-medium"), disabled: isCopied, onClick: () => {
                    if (!ref.current?.textContent)
                        return;
                    setIsCopied(true);
                    void navigator.clipboard.writeText(ref.current.textContent);
                    setTimeout(() => setIsCopied(false), 2000);
                }, children: [isCopied ? (_jsx(CheckIcon, { className: "text-emerald-600", size: 16, strokeWidth: 2.5, absoluteStrokeWidth: true })) : (_jsx(CopyIcon, { size: 16 })), showCopyText && "Copy"] }))] }));
};
//# sourceMappingURL=EmbeddedCodeBlock.js.map