import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckIcon, CopyIcon, ExternalLinkIcon } from "lucide-react";
import { useState } from "react";
import { InlineCode } from "../../components/InlineCode.js";
import { Typography } from "../../components/Typography.js";
import { Button } from "../../ui/Button.js";
import { Callout } from "../../ui/Callout.js";
import { Card } from "../../ui/Card.js";
import { SyntaxHighlight } from "../../ui/SyntaxHighlight.js";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../ui/Tabs.js";
import { cn } from "../../util/cn.js";
export const MCPEndpoint = ({ serverUrl, summary, data, }) => {
    const [isCopied, setIsCopied] = useState(false);
    const mcpUrl = `${(serverUrl ?? "").replace(/\/+$/, "")}/mcp`;
    const name = typeof data === "boolean"
        ? (summary ?? "mcp-server")
        : (data?.name ?? summary ?? "mcp-server");
    const claudeConfig = `{
  "mcpServers": {
    "${name}": {
      "command": "npx",
      "args": [
        "mcp-remote",
        "${mcpUrl}"
      ]
    }
  }
}`;
    const cursorConfig = `{
  "mcpServers": {
    "${name}": {
      "url": "${mcpUrl}"
    }
  }
}`;
    const chatgptConfig = mcpUrl;
    const vscodeConfig = `{
  "servers": {
    "${name}": {
      "command": "npx",
      "args": [
        "mcp-remote",
        "${mcpUrl}"
      ]
    }
  }
}`;
    const handleCopy = () => {
        void navigator.clipboard.writeText(mcpUrl).then(() => {
            setIsCopied(true);
            setTimeout(() => setIsCopied(false), 2000);
        });
    };
    return (_jsx(Card, { className: "p-6 mb-6 max-w-screen-md", children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "MCP Endpoint" }), _jsxs("p", { className: "text-sm text-muted-foreground mb-3", children: ["Copy the url to connect any", " ", _jsx("a", { href: "https://modelcontextprotocol.io/", target: "_blank", rel: "noopener", className: "text-primary hover:underline", children: "MCP" }), "-compatible AI tool"] }), _jsxs("div", { className: cn("relative flex items-center gap-2 p-3 rounded-md border border-primary/50"), children: [_jsx(InlineCode, { className: "bg-primary/20 px-4 py-2 flex-1 border-none", children: mcpUrl }), _jsx(Button, { onClick: handleCopy, variant: "ghost", size: "icon", className: "h-8 w-8", children: isCopied ? (_jsx(CheckIcon, { className: "h-4 w-4 text-green-600" })) : (_jsx(CopyIcon, { className: "h-4 w-4" })) })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "AI Tool Configuration" }), _jsx("p", { className: "text-sm text-muted-foreground mb-3", children: "Choose your AI tool and copy the configuration to get started." }), _jsx("hr", { className: "my-4" }), _jsxs(Tabs, { defaultValue: "claude", className: "w-full", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4", children: [_jsx(TabsTrigger, { value: "claude", children: "Claude" }), _jsx(TabsTrigger, { value: "chatgpt", children: "ChatGPT" }), _jsx(TabsTrigger, { value: "cursor", children: "Cursor" }), _jsx(TabsTrigger, { value: "vscode", children: "VS Code" })] }), _jsxs(Typography, { className: "text-sm max-w-full", children: [_jsxs(TabsContent, { value: "claude", className: "space-y-3", children: [_jsxs("ol", { children: [_jsxs("li", { children: ["Open Claude Desktop and click ", _jsx("strong", { children: "Settings" }), " in the lower corner"] }), _jsxs("li", { children: ["Navigate to ", _jsx("strong", { children: "Developer" }), " tab \u2192", " ", _jsx("strong", { children: "Edit Config" })] }), _jsxs("li", { children: [_jsx("span", { children: "Add this configuration to " }), _jsx(InlineCode, { children: "claude_desktop_config.json" }), ":", _jsx(SyntaxHighlight, { showLanguageIndicator: true, title: "claude_desktop_config.json", language: "json", code: claudeConfig, className: "mt-2" })] }), _jsx("li", { children: "Save the file and restart Claude Desktop. Look for the \uD83D\uDD28 icon in the bottom-right corner." })] }), _jsxs("p", { className: "text-xs text-muted-foreground mt-2", children: ["macOS: ~/Library/Application Support/Claude/claude_desktop_config.json", _jsx("br", {}), "Windows: %APPDATA%\\Claude\\claude_desktop_config.json"] }), _jsxs("a", { href: "https://docs.mcp.run/mcp-clients/claude-desktop/", target: "_blank", rel: "noopener noreferrer", className: "inline-flex items-center gap-1 text-sm text-primary hover:underline", children: ["View official docs", _jsx(ExternalLinkIcon, { className: "h-3 w-3" })] })] }), _jsxs(TabsContent, { value: "chatgpt", className: "space-y-3", children: [_jsx(Callout, { type: "note", title: "Requirements", children: "ChatGPT Pro, Team, Enterprise, or Edu subscription. Note: MCP support is limited to read-only operations through Deep Research." }), _jsxs("ol", { children: [_jsxs("li", { children: ["Go to ", _jsx("strong", { children: "Settings" }), " \u2192", " ", _jsx("strong", { children: "Connectors" }), " \u2192 ", _jsx("strong", { children: "Connect" })] }), _jsxs("li", { children: ["Click ", _jsx("strong", { children: "Custom" }), " and add your MCP URL:", _jsx(InlineCode, { className: "ml-2", children: chatgptConfig })] }), _jsx("li", { children: "Provide a name and description for your connector" }), _jsx("li", { children: "Save and enable the connector. Users must authenticate with the connector before first use." }), _jsx("li", { children: "Access through Deep Research in your chat interface" })] }), _jsxs("a", { href: "https://help.openai.com/en/articles/11487775-connectors-in-chatgpt", target: "_blank", rel: "noopener noreferrer", className: "inline-flex items-center gap-1 text-sm text-primary hover:underline", children: ["View official docs", _jsx(ExternalLinkIcon, { className: "h-3 w-3" })] })] }), _jsxs(TabsContent, { value: "cursor", className: "space-y-3", children: [_jsxs("ol", { children: [_jsxs("li", { children: [_jsx("span", { children: "Create or edit: " }), _jsx(InlineCode, { children: "~/.cursor/mcp.json" }), _jsx("span", { children: " (global) or " }), _jsx(InlineCode, { children: ".cursor/mcp.json" }), _jsx("span", { children: " (project)" }), _jsx(SyntaxHighlight, { showLanguageIndicator: true, title: "mcp.json", language: "json", code: cursorConfig, className: "mt-2" })] }), _jsx("li", { children: "Restart Cursor to apply the configuration" })] }), _jsxs("a", { href: "https://docs.cursor.com/en/context/mcp", target: "_blank", rel: "noopener noreferrer", className: "inline-flex items-center gap-1 text-sm text-primary hover:underline", children: ["View official docs", _jsx(ExternalLinkIcon, { className: "h-3 w-3" })] })] }), _jsxs(TabsContent, { value: "vscode", className: "space-y-3", children: [_jsx(Callout, { type: "note", title: "Requirements", children: "VS Code with GitHub Copilot extension" }), _jsxs("ol", { children: [_jsxs("li", { children: [_jsx("span", { children: "Create " }), _jsx(InlineCode, { children: ".vscode/mcp.json" }), _jsx("span", { children: " in your workspace (or user-level mcp.json):" }), _jsx(SyntaxHighlight, { showLanguageIndicator: true, title: "mcp.json", language: "json", code: vscodeConfig, className: "mt-2" })] }), _jsx("li", { children: "Restart VS Code to apply the configuration" }), _jsx("li", { children: "Use MCP tools in GitHub Copilot Chat by selecting Agent mode" })] }), _jsxs("a", { href: "https://code.visualstudio.com/docs/copilot/chat/mcp-servers", target: "_blank", rel: "noopener noreferrer", className: "inline-flex items-center gap-1 text-sm text-primary hover:underline", children: ["View official docs", _jsx(ExternalLinkIcon, { className: "h-3 w-3" })] })] })] })] })] })] }) }));
};
//# sourceMappingURL=MCPEndpoint.js.map