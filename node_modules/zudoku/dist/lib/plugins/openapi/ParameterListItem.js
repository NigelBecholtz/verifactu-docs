import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Collapsible from "@radix-ui/react-collapsible";
import { MinusIcon, PlusIcon } from "lucide-react";
import { useState } from "react";
import { Markdown } from "../../components/Markdown.js";
import { Button } from "../../ui/Button.js";
import { ColorizedParam } from "./ColorizedParam.js";
import { EnumValues } from "./components/EnumValues.js";
import { SelectOnClick } from "./components/SelectOnClick.js";
import { ParamInfos } from "./ParamInfos.js";
import { SchemaExampleAndDefault } from "./schema/SchemaExampleAndDefault.js";
import { SchemaView } from "./schema/SchemaView.js";
import { isArrayType } from "./schema/utils.js";
const getParameterSchema = (parameter) => {
    if (parameter.schema != null && typeof parameter.schema === "object") {
        return parameter.schema;
    }
    return {
        type: "string",
    };
};
export const ParameterListItem = ({ parameter, group, id, }) => {
    const paramSchema = getParameterSchema(parameter);
    const [isOpen, setIsOpen] = useState(false);
    return (_jsxs("li", { className: "p-4 bg-border/20 text-sm flex flex-col gap-1.5", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(SelectOnClick, { asChild: true, children: _jsx("code", { children: group === "path" ? (_jsx(ColorizedParam, { name: parameter.name, backgroundOpacity: "15%", className: "px-2", slug: `${id}-${parameter.name}` })) : (parameter.name) }) }), _jsx(ParamInfos, { schema: paramSchema, extraItems: [
                            parameter.required && (_jsx("span", { className: "text-primary", children: "required" })),
                            parameter.style && `style: ${parameter.style}`,
                            parameter.explode && `explode: ${parameter.explode}`,
                        ] })] }), parameter.description && (_jsx(Markdown, { content: parameter.description, className: "text-sm prose prose-p:my-1 prose-code:whitespace-pre-line" })), paramSchema.description && (_jsx(Markdown, { content: paramSchema.description, className: "text-sm prose-p:my-1 prose-code:whitespace-pre-line" })), paramSchema.type === "array" && paramSchema.items.enum ? (_jsx(EnumValues, { values: paramSchema.items.enum })) : (paramSchema.enum && _jsx(EnumValues, { values: paramSchema.enum })), _jsx(SchemaExampleAndDefault, { schema: paramSchema }), (paramSchema.type === "object" || isArrayType(paramSchema)) && (_jsxs(Collapsible.Root, { defaultOpen: false, onOpenChange: setIsOpen, open: isOpen, children: [_jsx(Collapsible.Trigger, { asChild: true, children: _jsxs(Button, { variant: "expand", size: "sm", children: [isOpen ? _jsx(MinusIcon, { size: 12 }) : _jsx(PlusIcon, { size: 12 }), isOpen ? "Hide properties" : "Show properties"] }) }), _jsx(Collapsible.Content, { children: _jsx("div", { className: "mt-2", children: _jsx(SchemaView, { schema: "items" in paramSchema ? paramSchema.items : paramSchema }) }) })] }))] }));
};
//# sourceMappingURL=ParameterListItem.js.map