import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { VisuallyHidden } from "@radix-ui/react-visually-hidden";
import { useState } from "react";
import { Badge } from "zudoku/ui/Badge.js";
import { Heading } from "../../components/Heading.js";
import { Markdown } from "../../components/Markdown.js";
import { cn } from "../../util/cn.js";
import { groupBy } from "../../util/groupBy.js";
import { renderIf } from "../../util/renderIf.js";
import { ResponseContent } from "./components/ResponseContent.js";
import { SelectOnClick } from "./components/SelectOnClick.js";
import { useOasConfig } from "./context.js";
import { useFragment } from "./graphql/index.js";
import { MCPEndpoint } from "./MCPEndpoint.js";
import { OperationsFragment } from "./OperationList.js";
import { ParameterList } from "./ParameterList.js";
import { Sidecar } from "./Sidecar.js";
import { SchemaView } from "./schema/SchemaView.js";
import { methodForColor } from "./util/methodToColor.js";
const PARAM_GROUPS = ["path", "query", "header", "cookie"];
export const OperationListItem = ({ operationFragment, serverUrl, }) => {
    const operation = useFragment(OperationsFragment, operationFragment);
    const groupedParameters = groupBy(operation.parameters ?? [], (param) => param.in);
    const { options } = useOasConfig();
    const first = operation.responses.at(0);
    const [selectedResponse, setSelectedResponse] = useState(first?.statusCode);
    const isMCPEndpoint = operation.extensions?.["x-mcp-server"] !== undefined;
    return (_jsxs("div", { children: [operation.deprecated && (_jsx(Badge, { variant: "muted", className: "text-xs mb-4", children: "deprecated" })), _jsxs("div", { className: cn("grid grid-cols-1 lg:grid-cols-[minmax(0,4fr)_minmax(0,3fr)] gap-x-8 gap-y-4 items-start", operation.deprecated && "opacity-50 transition hover:opacity-100"), children: [_jsx(Heading, { level: 2, id: operation.slug, registerNavigationAnchor: true, className: "break-all col-span-full", children: operation.summary }), !isMCPEndpoint && (_jsxs("div", { className: "text-sm flex gap-2 font-mono col-span-full", children: [_jsx("span", { className: methodForColor(operation.method), children: operation.method.toUpperCase() }), _jsxs(SelectOnClick, { className: "max-w-full truncate flex cursor-pointer", children: [serverUrl && (_jsx("div", { className: "text-neutral-400 dark:text-neutral-500 truncate", children: serverUrl.replace(/\/$/, "") })), _jsx("div", { className: "text-neutral-900 dark:text-neutral-200", children: operation.path })] })] })), isMCPEndpoint ? (_jsx("div", { className: "col-span-full", children: _jsx(MCPEndpoint, { serverUrl: serverUrl, summary: operation.summary ?? undefined, data: operation.extensions?.["x-mcp-server"] }) })) : (_jsxs("div", { className: cn("flex flex-col gap-4", options?.disableSidecar && "col-span-full"), children: [operation.description && (_jsx(Markdown, { className: "max-w-full prose-img:max-w-prose", content: operation.description })), operation.parameters &&
                                operation.parameters.length > 0 &&
                                PARAM_GROUPS.flatMap((group) => groupedParameters[group]?.length ? (_jsx(ParameterList, { summary: operation.summary ?? undefined, id: operation.slug, parameters: groupedParameters[group], group: group }, group)) : ([])), renderIf(operation.requestBody?.content?.at(0)?.schema, (schema) => (_jsxs("div", { className: "mt-4 flex flex-col gap-4", children: [_jsxs(Heading, { level: 3, className: "capitalize flex items-center gap-2", id: `${operation.slug}/request-body`, children: [operation.summary && (_jsxs(VisuallyHidden, { children: [operation.summary, " \u203A", " "] })), "Request Body", " ", operation.requestBody?.required === false ? (_jsx(Badge, { variant: "muted", children: "optional" })) : ("")] }), _jsx(SchemaView, { schema: schema })] }))), operation.responses.length > 0 && (_jsxs(_Fragment, { children: [_jsxs(Heading, { level: 3, className: "capitalize mt-8 pt-8 border-t", id: `${operation.slug}/responses`, children: [operation.summary && (_jsxs(VisuallyHidden, { children: [operation.summary, " \u203A", " "] })), "Responses"] }), _jsx(ResponseContent, { responses: operation.responses, selectedResponse: selectedResponse, onSelectResponse: setSelectedResponse })] }))] })), renderIf(!options?.disableSidecar && !isMCPEndpoint, () => (_jsx(Sidecar, { selectedResponse: selectedResponse, onSelectResponse: setSelectedResponse, operation: operation })))] }, operation.operationId)] }));
};
//# sourceMappingURL=OperationListItem.js.map