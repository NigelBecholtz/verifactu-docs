import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from "react";
import { Badge } from "../../../ui/Badge.js";
import { Card } from "../../../ui/Card.js";
import { cn } from "../../../util/cn.js";
import { SchemaView } from "./SchemaView.js";
import { decideExclusivity, labelForVariant, quickGuards, unionVariants, } from "./union-helpers.js";
const DecisionTable = ({ variants, schema, selectedVariant, onSelectVariant, }) => {
    const rows = variants.map((v, i) => ({
        label: labelForVariant(i, v),
        guards: quickGuards(v, schema),
    }));
    return (_jsxs("div", { className: "flex flex-col gap-2 text-sm", children: [_jsx("h4", { className: "font-medium", children: "Decision Table" }), _jsx("div", { className: "border rounded-md overflow-hidden", children: _jsxs("table", { className: "w-full", children: [_jsx("thead", { children: _jsxs("tr", { className: "border-b bg-muted/50", children: [_jsx("th", { className: "text-left p-2 font-medium", children: "Variant" }), _jsx("th", { className: "text-left p-2 font-medium", children: "Matching Criteria" })] }) }), _jsx("tbody", { className: "divide-y", children: rows.map((row) => (_jsxs("tr", { className: "hover:bg-muted/30", children: [_jsx("td", { className: "p-2 font-medium", children: _jsx("button", { type: "button", className: cn("hover:underline", selectedVariant === row.label && "text-primary"), onClick: () => onSelectVariant(row.label), children: row.label }) }), _jsx("td", { className: "p-2 text-muted-foreground text-xs", children: row.guards.length > 0
                                            ? row.guards.join(" Â· ")
                                            : "No specific criteria" })] }, row.label))) })] }) })] }));
};
const VariantPanel = ({ variant }) => {
    return (_jsxs("div", { className: "space-y-2", children: [variant.description && (_jsx("p", { className: "text-sm text-muted-foreground", children: variant.description })), _jsx(SchemaView, { schema: variant })] }));
};
export const UnionView = ({ schema, cardHeader, }) => {
    const mode = Array.isArray(schema.oneOf)
        ? "oneOf"
        : Array.isArray(schema.anyOf)
            ? "anyOf"
            : undefined;
    const variants = mode ? unionVariants(schema) : [];
    const [selectedVariant, setSelectedVariant] = useState(() => variants[0] ? labelForVariant(0, variants[0]) : "");
    if (!mode)
        return null;
    const exclusivity = decideExclusivity(schema);
    const semanticsMessage = exclusivity === "exactly-one" ? (_jsxs(_Fragment, { children: ["Exactly one variant ", _jsx("b", { children: "must match" }), "."] })) : (_jsxs(_Fragment, { children: ["At least one variant ", _jsx("b", { children: "must match" }), ". Multiple variants", " ", _jsx("i", { children: "may match" }), " simultaneously."] }));
    const currentVariantIndex = variants.findIndex((v, i) => labelForVariant(i, v) === selectedVariant);
    const currentVariant = currentVariantIndex >= 0 ? variants[currentVariantIndex] : null;
    return (_jsxs(Card, { className: "overflow-hidden text-sm", children: [cardHeader, _jsxs("div", { className: "flex flex-col gap-4 p-4", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Badge, { variant: "outline", children: mode }), _jsx("div", { className: "flex-1 p-2", children: _jsx("span", { className: "text-sm", children: semanticsMessage }) })] }), _jsx(DecisionTable, { variants: variants, schema: schema, selectedVariant: selectedVariant, onSelectVariant: setSelectedVariant }), _jsxs("strong", { children: ["Properties for ", selectedVariant, ":"] }), currentVariant && _jsx(VariantPanel, { variant: currentVariant })] })] }));
};
//# sourceMappingURL=UnionView.js.map