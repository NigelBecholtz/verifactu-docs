import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { InfoIcon } from "lucide-react";
import { Markdown } from "../../../components/Markdown.js";
import { Card } from "../../../ui/Card.js";
import { groupBy } from "../../../util/groupBy.js";
import { ConstValue } from "../components/ConstValue.js";
import { EnumValues } from "../components/EnumValues.js";
import { ParamInfos } from "../ParamInfos.js";
import { AllOfGroupView } from "./AllOfGroup/AllOfGroupView.js";
import { SchemaExampleAndDefault } from "./SchemaExampleAndDefault.js";
import { SchemaPropertyItem } from "./SchemaPropertyItem.js";
import { UnionView } from "./UnionView.js";
import { isBasicType } from "./utils.js";
const renderMarkdown = (content) => content && (_jsx(Markdown, { className: "text-sm leading-normal line-clamp-4", content: content }));
const renderBasicSchema = (schema, cardHeader) => (_jsxs(Card, { className: "overflow-hidden", children: [cardHeader, _jsxs("div", { className: "p-4 space-y-2", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: _jsx(ParamInfos, { schema: schema }) }), schema.enum && _jsx(EnumValues, { values: schema.enum }), renderMarkdown(schema.description), _jsx(SchemaExampleAndDefault, { schema: schema })] })] }));
export const SchemaView = ({ schema, defaultOpen = false, cardHeader, embedded, }) => {
    if (!schema || Object.keys(schema).length === 0) {
        return (_jsxs(Card, { className: "overflow-hidden", children: [cardHeader, _jsx("div", { className: "text-sm text-muted-foreground italic p-4", children: "No data returned" })] }));
    }
    if (schema.const) {
        return _jsx(ConstValue, { schema: schema });
    }
    if (Array.isArray(schema.oneOf) || Array.isArray(schema.anyOf)) {
        return _jsx(UnionView, { schema: schema, cardHeader: cardHeader });
    }
    if (Array.isArray(schema.allOf)) {
        return _jsx(AllOfGroupView, { schema: schema, cardHeader: cardHeader });
    }
    if (isBasicType(schema.type)) {
        return renderBasicSchema(schema, cardHeader);
    }
    if (schema.type === "array" && typeof schema.items === "object") {
        return _jsx(SchemaView, { schema: schema.items, cardHeader: cardHeader });
    }
    if (schema.type === "object") {
        const groupedProperties = groupBy(Object.entries(schema.properties ?? {}), ([propertyName, property]) => {
            return property.deprecated
                ? "deprecated"
                : schema.required?.includes(propertyName)
                    ? "required"
                    : "optional";
        });
        const groupNames = ["required", "optional", "deprecated"];
        const additionalProperties = typeof schema.additionalProperties === "object" ? (_jsx(SchemaView, { schema: schema.additionalProperties, embedded: true })) : schema.additionalProperties === true ? (_jsxs("div", { className: "text-sm p-4 bg-border/20 hover:bg-border/30 flex items-center gap-1", children: [_jsx("span", { children: "Additional properties are allowed" }), _jsx("a", { className: "p-0.5 -m-0.5", href: "https://swagger.io/docs/specification/v3_0/data-models/dictionaries/", rel: "noopener noreferrer", target: "_blank", children: _jsx(InfoIcon, { size: 14 }) })] })) : null;
        const Component = embedded ? "div" : Card;
        return (_jsxs(Component, { className: "divide-y overflow-hidden", children: [cardHeader, groupNames.map((group) => groupedProperties[group] && (_jsx("ul", { className: "divide-y", children: groupedProperties[group].map(([name, schema]) => (_jsx(SchemaPropertyItem, { name: name, schema: schema, group: group, defaultOpen: defaultOpen }, name))) }, group))), additionalProperties] }));
    }
    return null;
};
//# sourceMappingURL=SchemaView.js.map