import { CIRCULAR_REF } from "../../../oas/graphql/circular.js";
export const isBasicType = (type) => (typeof type === "string" &&
    ["string", "number", "boolean", "integer", "null"].includes(type)) ||
    (Array.isArray(type) && type.every(isBasicType));
export const isArrayType = (value) => value.type === "array" ||
    // schema.type might be an array of types, so we need to check if "array" is one of them
    (Array.isArray(value.type) && value.type.includes("array"));
export const isComplexType = (value) => value &&
    ((value.type === "object" &&
        Object.keys(value.properties ?? {}).length > 0) ||
        (value.type === "array" &&
            typeof value.items === "object" &&
            (!value.items.type || value.items.type === "object")));
export const isCircularRef = (schema) => typeof schema === "string" && schema.startsWith(CIRCULAR_REF);
export const isArrayCircularRef = (schema) => isArrayType(schema) && "items" in schema && isCircularRef(schema.items);
export const extractCircularRefInfo = (ref) => typeof ref === "string" ? ref.split(":")[1] : undefined;
//# sourceMappingURL=utils.js.map