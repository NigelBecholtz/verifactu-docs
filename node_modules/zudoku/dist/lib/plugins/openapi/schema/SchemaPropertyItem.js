import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Collapsible from "@radix-ui/react-collapsible";
import { MinusIcon, PlusIcon, RefreshCcwDotIcon } from "lucide-react";
import { useState } from "react";
import { InlineCode } from "../../../components/InlineCode.js";
import { Markdown } from "../../../components/Markdown.js";
import { Button } from "../../../ui/Button.js";
import { ConstValue } from "../components/ConstValue.js";
import { EnumValues } from "../components/EnumValues.js";
import { SelectOnClick } from "../components/SelectOnClick.js";
import { ParamInfos } from "../ParamInfos.js";
import { AllOfGroupView } from "./AllOfGroup/AllOfGroupView.js";
import { SchemaExampleAndDefault } from "./SchemaExampleAndDefault.js";
import { SchemaView } from "./SchemaView.js";
import { extractCircularRefInfo, isArrayCircularRef, isArrayType, isCircularRef, isComplexType, } from "./utils.js";
const RecursiveIndicator = ({ circularProp }) => (_jsxs(InlineCode, { className: "inline-flex items-center gap-1.5 italic text-xs translate-y-0.5", selectOnClick: false, children: [_jsx(RefreshCcwDotIcon, { size: 13 }), _jsx("span", { children: circularProp ? `${circularProp} (circular)` : "circular" })] }));
export const SchemaPropertyItem = ({ name, schema, group, defaultOpen = false, showCollapseButton = true, }) => {
    const [isOpen, setIsOpen] = useState(defaultOpen);
    if (isCircularRef(schema)) {
        return (_jsx("li", { className: "p-4 bg-border/20 hover:bg-border/30", children: _jsxs("div", { className: "flex flex-col gap-2.5 justify-between text-sm", children: [_jsxs("div", { className: "space-x-2 rtl:space-x-reverse", children: [_jsx("code", { children: name }), _jsx(ParamInfos, { schema: schema, extraItems: [_jsx(RecursiveIndicator, {}, "circular-ref")] })] }), _jsx(SchemaExampleAndDefault, { schema: schema })] }) }));
    }
    const isCollapsible = Boolean((schema.allOf ||
        schema.anyOf ||
        schema.oneOf ||
        isComplexType(schema) ||
        (isArrayType(schema) &&
            "items" in schema &&
            isComplexType(schema.items)) ||
        schema.additionalProperties) &&
        !isArrayCircularRef(schema));
    return (_jsx("li", { className: "p-4 bg-border/20 hover:bg-border/30", children: _jsxs("div", { className: "flex flex-col gap-2.5 justify-between text-sm", children: [_jsxs("div", { className: "space-x-2 rtl:space-x-reverse", children: [_jsx(SelectOnClick, { asChild: true, children: _jsx("code", { children: name }) }), _jsx(ParamInfos, { schema: schema, extraItems: [
                                group !== "optional" && (_jsx("span", { className: "text-primary", children: "required" })),
                                isArrayCircularRef(schema) && (_jsx(RecursiveIndicator, { circularProp: extractCircularRefInfo(schema.items) })),
                            ] })] }), schema.description && (_jsx(Markdown, { className: "text-sm leading-normal", content: schema.description })), schema.type === "array" && "items" in schema && schema.items.enum && (_jsx(EnumValues, { values: schema.items.enum })), schema.const && _jsx(ConstValue, { schema: schema, hideDescription: true }), schema.enum && _jsx(EnumValues, { values: schema.enum }), _jsx(SchemaExampleAndDefault, { schema: schema }), isCollapsible && (_jsxs(Collapsible.Root, { defaultOpen: defaultOpen, open: isOpen, onOpenChange: () => setIsOpen(!isOpen), children: [showCollapseButton && (_jsx(Collapsible.Trigger, { asChild: true, children: _jsxs(Button, { variant: "expand", size: "sm", children: [isOpen ? _jsx(MinusIcon, { size: 12 }) : _jsx(PlusIcon, { size: 12 }), !isOpen ? "Show properties" : "Hide properties"] }) })), _jsx(Collapsible.Content, { children: _jsx("div", { className: "mt-2", children: schema.allOf ? (_jsx(AllOfGroupView, { schema: schema })) : schema.anyOf || schema.oneOf || schema.type === "object" ? (_jsx(SchemaView, { schema: schema })) : isArrayType(schema) && "items" in schema ? (_jsx(SchemaView, { schema: schema.items })) : null }) })] }))] }) }));
};
//# sourceMappingURL=SchemaPropertyItem.js.map