import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Tabs from "@radix-ui/react-tabs";
import { useState } from "react";
import { Markdown } from "zudoku/components";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { cn } from "zudoku/ui/util.js";
import { SchemaView } from "../schema/SchemaView.js";
export const ResponseContent = ({ responses, selectedResponse, onSelectResponse, }) => {
    const [selectedMediaType, setSelectedMediaType] = useState(responses[0]?.content?.[0]?.mediaType ?? "");
    const currentResponse = responses.find((r) => r.statusCode === selectedResponse) ?? responses[0];
    const cardHeader = (_jsxs("div", { className: "flex flex-col bg-muted text-muted-foreground", children: [_jsxs("div", { className: "flex flex-row items-center gap-2 justify-between px-4 py-2", children: [_jsx(Tabs.List, { className: "flex flex-row font-medium text-sm gap-4", children: responses.map((response) => (_jsx(Tabs.Trigger, { value: response.statusCode, className: cn("py-1 -mx-2 px-2 rounded-md", "data-[state=active]:dark:ring-1 data-[state=active]:dark:ring-border data-[state=active]:bg-background data-[state=active]:drop-shadow", "data-[state=active]:font-semibold data-[state=active]:text-foreground"), children: response.statusCode }, response.statusCode))) }), currentResponse?.content && currentResponse.content.length > 1 && (_jsxs(Select, { value: selectedMediaType, onValueChange: setSelectedMediaType, children: [_jsx(SelectTrigger, { className: "h-8 mt-0 max-w-48 text-xs truncate", children: _jsx(SelectValue, { placeholder: "Select a type" }) }), _jsx(SelectContent, { children: currentResponse.content.map((c) => (_jsx(SelectItem, { value: c.mediaType, children: c.mediaType }, c.mediaType))) })] }))] }), currentResponse?.description && (_jsx(Markdown, { className: "text-sm border-t px-4 py-2 text-muted-foreground", content: currentResponse.description }))] }));
    return (_jsx("div", { className: "flex flex-col gap-2", children: _jsx(Tabs.Root, { value: selectedResponse, onValueChange: (value) => {
                onSelectResponse?.(value);
                const newResponse = responses.find((r) => r.statusCode === value);
                setSelectedMediaType(newResponse?.content?.[0]?.mediaType ?? "");
            }, children: responses.map((response) => {
                const content = response.content?.find((c) => c.mediaType === selectedMediaType);
                return (_jsx(Tabs.Content, { value: response.statusCode, children: _jsx(SchemaView, { schema: content?.schema, cardHeader: cardHeader }) }, response.statusCode));
            }) }) }));
};
//# sourceMappingURL=ResponseContent.js.map