type RememberSkipLoginState = {
    skipLogin: boolean;
    setSkipLogin: (skipLogin: boolean) => void;
};
export declare const useRememberSkipLoginDialog: import("zustand").UseBoundStore<Omit<import("zustand").StoreApi<RememberSkipLoginState>, "setState" | "persist"> & {
    setState(partial: RememberSkipLoginState | Partial<RememberSkipLoginState> | ((state: RememberSkipLoginState) => RememberSkipLoginState | Partial<RememberSkipLoginState>), replace?: false | undefined): unknown;
    setState(state: RememberSkipLoginState | ((state: RememberSkipLoginState) => RememberSkipLoginState), replace: true): unknown;
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<RememberSkipLoginState, unknown, unknown>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: RememberSkipLoginState) => void) => () => void;
        onFinishHydration: (fn: (state: RememberSkipLoginState) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<RememberSkipLoginState, unknown, unknown>>;
    };
}>;
export {};
