import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PlusCircleIcon, Unlink2Icon, XIcon } from "lucide-react";
import { useEffect } from "react";
import { Controller, useFieldArray, useFormContext, } from "react-hook-form";
import { Button } from "zudoku/ui/Button.js";
import { Checkbox } from "zudoku/ui/Checkbox.js";
import { Collapsible, CollapsibleContent } from "zudoku/ui/Collapsible.js";
import { Autocomplete } from "../../../components/Autocomplete.js";
import { Input } from "../../../ui/Input.js";
import { CollapsibleHeader, CollapsibleHeaderTrigger, } from "./CollapsibleHeader.js";
import { InlineInput } from "./InlineInput.js";
import ParamsGrid, { ParamsGridItem } from "./ParamsGrid.js";
export const QueryParams = ({ control, schemaQueryParams, }) => {
    const { fields, remove, append } = useFieldArray({
        control,
        name: "queryParams",
    });
    const { setValue, getValues, watch } = useFormContext();
    const watchedQueryParams = watch("queryParams");
    useEffect(() => {
        if (watchedQueryParams.length === 0) {
            append({ name: "", value: "", active: false }, { shouldFocus: true });
        }
    }, [watchedQueryParams, append]);
    const requiredFields = schemaQueryParams.map((param) => Boolean(param.isRequired));
    return (_jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleHeaderTrigger, { children: [_jsx(Unlink2Icon, { size: 16 }), _jsx(CollapsibleHeader, { children: "Query Parameters" }), _jsxs(Button, { onClick: () => {
                            setValue("queryParams", [
                                ...getValues("queryParams"),
                                { name: "", value: "", active: false },
                            ]);
                        }, type: "button", size: "sm", variant: "ghost", className: "hover:bg-accent hover:brightness-95 flex gap-2", children: ["Add parameter ", _jsx(PlusCircleIcon, { size: 16 })] })] }), _jsx(CollapsibleContent, { className: "CollapsibleContent", children: _jsx("div", { className: "overflow-hidden w-full", children: _jsx(ParamsGrid, { children: fields.map((field, i) => {
                            const currentParam = schemaQueryParams.find((param) => param.name === watchedQueryParams.at(i)?.name);
                            return (_jsxs(ParamsGridItem, { children: [_jsx(Controller, { control: control, name: `queryParams.${i}.active`, render: ({ field }) => (_jsx(Checkbox, { id: `queryParams.${i}.active`, checked: field.value, onCheckedChange: field.onChange })) }), _jsx(Controller, { control: control, render: ({ field }) => !requiredFields[i] ? (_jsx(Autocomplete, { placeholder: "Name", value: field.value, options: schemaQueryParams.map((param) => param.name), onChange: (e) => {
                                                field.onChange(e);
                                            }, className: "border-0 p-0 m-0 shadow-none focus-visible:ring-0 bg-transparent hover:bg-transparent text-xs font-mono" })) : (_jsx(InlineInput, { asChild: true, children: _jsxs("label", { className: "flex items-center cursor-pointer gap-1", htmlFor: `queryParams.${i}.active`, title: requiredFields[i] ? "Required field" : undefined, children: [field.value, requiredFields[i] && _jsx("sup", { children: "\u00A0*" })] }) })), name: `queryParams.${i}.name` }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx(Controller, { control: control, render: ({ field }) => {
                                                    const hasEnum = currentParam?.enum && currentParam.enum.length > 0;
                                                    if (!hasEnum) {
                                                        return (_jsx(Input, { ...field, onChange: (e) => {
                                                                field.onChange(e.target.value);
                                                                if (e.target.value.length > 0) {
                                                                    setValue(`queryParams.${i}.active`, true);
                                                                }
                                                            }, placeholder: "Value", "aria-label": "Query parameter value", className: "w-full border-0 p-0 m-0 shadow-none focus-visible:ring-0 text-xs font-mono" }));
                                                    }
                                                    return (_jsx(Autocomplete, { value: field.value, options: currentParam.enum ?? [], onChange: (e) => {
                                                            field.onChange(e);
                                                            setValue(`queryParams.${i}.active`, true);
                                                        }, className: "border-0 shadow-none focus-visible:ring-0 bg-transparent hover:bg-transparent text-xs font-mono" }));
                                                }, name: `queryParams.${i}.value` }), _jsx(Button, { size: "icon-xs", variant: "ghost", className: "text-muted-foreground opacity-0 group-hover:brightness-95 group-hover:opacity-100", onClick: () => remove(i), type: "button", children: _jsx(XIcon, { size: 16 }) })] })] }, field.id));
                        }) }) }) })] }));
};
//# sourceMappingURL=QueryParams.js.map