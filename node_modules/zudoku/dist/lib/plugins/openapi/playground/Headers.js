import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { CircleAlertIcon, LockIcon, PlusCircleIcon, TableOfContentsIcon, XIcon, } from "lucide-react";
import { useCallback, useEffect, useRef } from "react";
import { Controller, useFieldArray, useFormContext, } from "react-hook-form";
import { Checkbox } from "zudoku/ui/Checkbox.js";
import { Collapsible, CollapsibleContent } from "zudoku/ui/Collapsible.js";
import { Tooltip, TooltipContent, TooltipTrigger } from "zudoku/ui/Tooltip.js";
import { Autocomplete } from "../../../components/Autocomplete.js";
import { Button } from "../../../ui/Button.js";
import { Input } from "../../../ui/Input.js";
import { cn } from "../../../util/cn.js";
import { CollapsibleHeader, CollapsibleHeaderTrigger, } from "./CollapsibleHeader.js";
import ParamsGrid, { ParamsGridItem } from "./ParamsGrid.js";
const headerOptions = Object.freeze([
    "Accept",
    "Accept-Encoding",
    "Accept-Language",
    "Authorization",
    "Cache-Control",
    "Connection",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-Length",
    "Content-Range",
    "Content-Security-Policy",
    "Content-Type",
    "Cookie",
    "Date",
    "ETag",
    "Expires",
    "Host",
    "If-Modified-Since",
    "Location",
    "Origin",
    "Pragma",
    "Referer",
    "Set-Cookie",
    "User-Agent",
    "X-Requested-With",
]);
export const Headers = ({ control, schemaHeaders, lockedHeaders, }) => {
    const { fields, append, remove } = useFieldArray({
        control,
        name: "headers",
    });
    const { setValue, watch, formState } = useFormContext();
    const valueRefs = useRef([]);
    const nameRefs = useRef([]);
    const watchedHeaders = watch("headers");
    const addNewHeader = useCallback((e) => {
        e?.stopPropagation();
        append({ name: "", value: "", active: false }, { shouldFocus: true });
    }, [append]);
    useEffect(() => {
        if (watchedHeaders.length === 0) {
            addNewHeader();
        }
    }, [watchedHeaders, addNewHeader]);
    const handleHeaderEnter = (index) => {
        valueRefs.current[index]?.focus();
    };
    const handleValueEnter = (index) => {
        addNewHeader();
        requestAnimationFrame(() => nameRefs.current[index + 1]?.focus());
    };
    const missingHeaders = schemaHeaders
        .filter((h) => !watchedHeaders.some((f) => f.name === h.name))
        .map(({ name }) => name);
    const hiddenHeadersIndex = fields.flatMap((f, index) => {
        const keep = !lockedHeaders
            ?.map((h) => h.toLowerCase())
            .includes(f.name.toLowerCase());
        return keep ? [] : [index];
    });
    const lockedHeaderFields = lockedHeaders?.map((h) => ({
        name: h,
        id: `locked-${h}`,
        value: "••••••••••",
        active: true,
        locked: true,
    })) ?? [];
    return (_jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleHeaderTrigger, { children: [_jsx(TableOfContentsIcon, { size: 16 }), _jsx(CollapsibleHeader, { children: "Headers" }), _jsxs(Button, { onClick: addNewHeader, type: "button", size: "sm", variant: "ghost", className: "hover:bg-accent hover:brightness-95 flex gap-2", children: ["Add header ", _jsx(PlusCircleIcon, { size: 16 })] })] }), _jsx(CollapsibleContent, { className: "CollapsibleContent", children: _jsx("div", { className: "flex flex-col gap-2", children: _jsx("div", { className: "overflow-hidden", children: _jsxs(ParamsGrid, { children: [lockedHeaderFields.map((field) => {
                                    return (_jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(ParamsGridItem, { className: "opacity-50 cursor-not-allowed font-mono text-xs min-h-10", children: [_jsx(LockIcon, { size: 16 }), _jsx(Input, { value: field.name, disabled: true, className: "w-full border-0 p-0 m-0 shadow-none text-xs focus-visible:ring-0 font-mono" }), _jsx("div", { children: field.value })] }, field.id) }), _jsx(TooltipContent, { alignOffset: 10, side: "bottom", align: "start", children: _jsx("p", { children: "This header is set by the selected authentication." }) })] }, field.id));
                                }), fields.map((field, i) => {
                                    const currentSchemaHeader = schemaHeaders.find((h) => h.name === watchedHeaders.at(i)?.name);
                                    return (_jsxs(ParamsGridItem, { className: cn(hiddenHeadersIndex.includes(i) && "text-amber-600", hiddenHeadersIndex.includes(i) &&
                                            !formState.dirtyFields.headers?.[i]?.value &&
                                            "hidden"), children: [_jsx(Controller, { control: control, name: `headers.${i}.active`, render: ({ field }) => (_jsxs(_Fragment, { children: [_jsx(Checkbox, { id: `headers.${i}.active`, className: cn(hiddenHeadersIndex.includes(i) && "hidden"), checked: field.value, onCheckedChange: (checked) => {
                                                                field.onChange(checked);
                                                            } }), _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsx(CircleAlertIcon, { className: cn("text-amber-600", !hiddenHeadersIndex.includes(i) && "hidden"), size: 16 }) }), _jsx(TooltipContent, { alignOffset: 10, side: "bottom", align: "start", children: _jsx("p", { children: "This header will be overwritten by the selected authentication." }) })] })] })) }), _jsx(Controller, { control: control, name: `headers.${i}.name`, render: ({ field }) => (_jsx(Autocomplete, { ...field, placeholder: "Name", className: "border-0 p-0 m-0 shadow-none focus-visible:ring-0 bg-transparent hover:bg-transparent text-xs font-mono", options: [...missingHeaders, ...headerOptions], onEnterPress: () => handleHeaderEnter(i), onChange: (e) => {
                                                        field.onChange(e);
                                                        setValue(`headers.${i}.active`, true);
                                                    }, ref: (el) => {
                                                        nameRefs.current[i] = el;
                                                    } })) }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Controller, { control: control, name: `headers.${i}.value`, render: ({ field }) => {
                                                            const hasEnum = currentSchemaHeader?.enum &&
                                                                currentSchemaHeader.enum.length > 0;
                                                            if (!hasEnum) {
                                                                return (_jsx(Input, { placeholder: "Value", className: "w-full truncate border-0 p-0 m-0 shadow-none text-xs focus-visible:ring-0 font-mono", autoComplete: "off", ...field, ref: (el) => {
                                                                        valueRefs.current[i] = el;
                                                                    }, onKeyDown: (e) => {
                                                                        if (e.key === "Enter" &&
                                                                            e.currentTarget.value.trim()) {
                                                                            handleValueEnter(i);
                                                                        }
                                                                    } }));
                                                            }
                                                            return (_jsx(Autocomplete, { shouldFilter: false, value: field.value, options: currentSchemaHeader.enum ?? [], onChange: (e) => {
                                                                    field.onChange(e);
                                                                    setValue(`headers.${i}.active`, true);
                                                                }, className: "border-0 p-0 m-0 shadow-none focus-visible:ring-0 bg-transparent hover:bg-transparent text-xs font-mono" }));
                                                        } }), _jsx(Button, { size: "icon-xs", variant: "ghost", className: "text-muted-foreground opacity-0 group-hover:brightness-95 group-hover:opacity-100", onClick: () => remove(i), type: "button", children: _jsx(XIcon, { size: 16 }) })] })] }, field.id));
                                })] }) }) }) })] }));
};
//# sourceMappingURL=Headers.js.map