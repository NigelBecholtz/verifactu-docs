import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { CornerDownLeftIcon, CornerDownRightIcon, DownloadIcon, EyeIcon, EyeOffIcon, PlusCircleIcon, } from "lucide-react";
import { useState } from "react";
import { Button } from "zudoku/ui/Button.js";
import { Collapsible, CollapsibleContent, CollapsibleTrigger, } from "zudoku/ui/Collapsible.js";
import { SecretText } from "zudoku/ui/Secret.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { cn } from "../../../../util/cn.js";
import createVariantComponent from "../../../../util/createVariantComponent.js";
import { humanFileSize } from "../../../../util/humanFileSize.js";
import { CollapsibleHeader, CollapsibleHeaderTrigger, } from "../CollapsibleHeader.js";
import { convertToTypes } from "./convertToTypes.js";
import { Highlight } from "./Highlight.js";
const mimeTypeToLanguage = (mimeType) => {
    const mimeTypeMapping = {
        "application/json": "json",
        "text/json": "json",
        "text/html": "html",
        "text/css": "css",
        "text/javascript": "javascript",
        "application/xml": "xml",
        "application/xhtml+xml": "xhtml",
    };
    return Object.entries(mimeTypeMapping).find(([mime]) => mimeType.includes(mime))?.[1];
};
const detectLanguage = (headers) => {
    const contentType = headers.find(([key]) => key.toLowerCase() === "content-type")?.[1] || "";
    return mimeTypeToLanguage(contentType);
};
const tryParseJson = (body) => {
    try {
        return JSON.stringify(JSON.parse(body), null, 2);
    }
    catch {
        return null;
    }
};
const sortHeadersByRelevance = (headers) => {
    const priorityOrder = [
        "Content-Type",
        "Content-Length",
        "Authorization",
        "X-RateLimit-Remaining",
        "X-RateLimit-Limit",
        "Cache-Control",
        "ETag",
    ].map((key) => key.toLowerCase());
    return [...headers].sort(([keyA], [keyB]) => {
        const indexA = priorityOrder.indexOf(keyA.toLowerCase());
        const indexB = priorityOrder.indexOf(keyB.toLowerCase());
        if (indexA === indexB)
            return 0;
        if (indexA === -1)
            return 1;
        if (indexB === -1)
            return -1;
        return indexA - indexB;
    });
};
const MAX_HEADERS_TO_SHOW = 3;
const Row = createVariantComponent("div", "grid-cols-subgrid grid border-b col-span-full px-4 py-1.5 font-mono text-xs");
const RowContent = createVariantComponent("div", "py-1 break-all");
const RowValue = ({ value, header }) => {
    const secretHeaders = ["authorization", "key", "secret", "token"];
    const isSecret = secretHeaders.includes(header.toLowerCase());
    const [revealed, setRevealed] = useState(!isSecret);
    return (_jsxs(RowContent, { className: cn(isSecret && "cursor-pointer flex group"), onClick: () => {
            if (isSecret) {
                setRevealed((prev) => !prev);
            }
        }, children: [_jsx(SecretText, { secret: value, previewChars: 0, revealed: revealed }), isSecret ? (revealed ? (_jsx(EyeOffIcon, { size: 14, className: cn("hidden group-hover:block") })) : (_jsx(EyeIcon, { size: 14, className: cn("hidden group-hover:block") }))) : null] }));
};
export const ResponseTab = ({ body = "", headers, request, size, isBinary = false, fileName, blob, }) => {
    const detectedLanguage = detectLanguage(headers);
    const jsonContent = tryParseJson(body);
    const beautifiedBody = jsonContent || body;
    const [view, setView] = useState(jsonContent ? "formatted" : "raw");
    const types = useQuery({
        queryKey: ["types", beautifiedBody],
        queryFn: async () => {
            return convertToTypes(JSON.parse(beautifiedBody));
        },
        enabled: view === "types" && !isBinary,
    });
    const handleDownload = () => {
        if (blob && fileName) {
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }
    };
    const sortedHeaders = sortHeadersByRelevance([...headers]);
    return (_jsxs(_Fragment, { children: [_jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleHeaderTrigger, { children: [_jsx(CornerDownRightIcon, { size: 16 }), _jsx(CollapsibleHeader, { className: "col-span-2", children: "Header Request" })] }), _jsx(CollapsibleContent, { children: _jsx("div", { className: "grid grid-cols-2 gap-x-6 text-sm", children: request.headers
                                .slice(0, MAX_HEADERS_TO_SHOW)
                                .map(([key, value]) => (_jsxs(Row, { children: [_jsx(RowContent, { children: key }), _jsx(RowValue, { value: value, header: key })] }, key))) }) })] }), _jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleHeaderTrigger, { children: [_jsx(CornerDownLeftIcon, { size: 16 }), _jsx(CollapsibleHeader, { className: "col-span-2", children: "Header Response" })] }), _jsx(CollapsibleContent, { children: _jsxs("div", { className: "grid grid-cols-2 gap-x-6 text-sm", children: [sortedHeaders.slice(0, MAX_HEADERS_TO_SHOW).map(([key, value]) => (_jsxs(Row, { children: [_jsx(RowContent, { children: key }), _jsx(RowValue, { value: value, header: key })] }, key))), sortedHeaders.length > MAX_HEADERS_TO_SHOW && (_jsxs(Collapsible, { className: "col-span-full grid-cols-subgrid grid group", children: [_jsxs(CollapsibleTrigger, { className: "data-[state=open]:hidden justify-center col-span-2 text-xs text-muted-foreground hover:text-primary border-b h-8 flex items-center gap-2", children: [_jsxs("span", { children: ["Show ", sortedHeaders.length - MAX_HEADERS_TO_SHOW, " more headers"] }), _jsx(PlusCircleIcon, { size: 12, className: "text-muted-foreground" })] }), _jsx(CollapsibleContent, { className: "col-span-full grid grid-cols-subgrid", children: sortedHeaders
                                                .slice(MAX_HEADERS_TO_SHOW)
                                                .map(([key, value]) => (_jsxs(Row, { children: [_jsx(RowContent, { children: key }), _jsx(RowValue, { value: value, header: key })] }, key))) })] }))] }) })] }), _jsx("div", { className: "flex gap-2 justify-between items-center border-b h-10", children: jsonContent && !isBinary && (_jsx("div", { className: "px-2", children: _jsxs(Select, { value: view, onValueChange: (value) => setView(value), children: [_jsx(SelectTrigger, { className: "min-w-32 border-none h-8", children: _jsx(SelectValue, { placeholder: "View" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "formatted", children: "Formatted" }), _jsx(SelectItem, { value: "raw", children: "Raw" }), _jsx(SelectItem, { value: "types", children: "Types" })] })] }) })) }), _jsx("div", { children: isBinary ? (_jsx("div", { className: "p-4 text-center", children: _jsxs("div", { className: "flex flex-col items-center gap-4", children: [_jsx("div", { className: "text-lg font-semibold", children: "Binary Content" }), _jsx("div", { className: "text-sm text-muted-foreground", children: "This response contains binary data that cannot be displayed as text." }), _jsxs(Button, { onClick: handleDownload, className: "flex items-center gap-2", disabled: !blob, children: [_jsx(DownloadIcon, { className: "h-4 w-4" }), "Download ", fileName || "file", " (", humanFileSize(size), ")"] })] }) })) : (_jsx("div", { className: "overflow-auto max-w-full p-4 text-xs max-h-[calc(83.333vh-180px)]", children: _jsx(Highlight, { language: view === "types"
                            ? "typescript"
                            : view === "raw"
                                ? jsonContent
                                    ? "plain"
                                    : detectedLanguage
                                : "json", code: (view === "raw"
                            ? body
                            : view === "types"
                                ? types.data?.lines.join("\n")
                                : beautifiedBody) ?? "" }) })) })] }));
};
//# sourceMappingURL=ResponseTab.js.map