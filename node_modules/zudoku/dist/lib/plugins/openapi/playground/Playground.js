import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useNProgress } from "@tanem/react-nprogress";
import { useMutation } from "@tanstack/react-query";
import { CheckIcon, CopyIcon, IdCardLanyardIcon, ShapesIcon, } from "lucide-react";
import { useEffect, useMemo, useRef, useState, useTransition } from "react";
import { FormProvider, useForm } from "react-hook-form";
import { Button } from "zudoku/ui/Button.js";
import { Collapsible, CollapsibleContent } from "zudoku/ui/Collapsible.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { TooltipProvider } from "zudoku/ui/Tooltip.js";
import { useApiIdentities } from "../../../components/context/ZudokuContext.js";
import { useHotkey } from "../../../hooks/useHotkey.js";
import { cn } from "../../../util/cn.js";
import { useCopyToClipboard } from "../../../util/useCopyToClipboard.js";
import { useLatest } from "../../../util/useLatest.js";
import { useSelectedServer } from "../state.js";
import BodyPanel from "./BodyPanel.js";
import { CollapsibleHeader, CollapsibleHeaderTrigger, } from "./CollapsibleHeader.js";
import { createUrl } from "./createUrl.js";
import { extractFileName, isBinaryContentType } from "./fileUtils.js";
import { Headers } from "./Headers.js";
import { IdentityDialog } from "./IdentityDialog.js";
import IdentitySelector from "./IdentitySelector.js";
import { PathParams } from "./PathParams.js";
import { QueryParams } from "./QueryParams.js";
import RequestLoginDialog from "./RequestLoginDialog.js";
import { useIdentityStore } from "./rememberedIdentity.js";
import { UrlPath } from "./request-panel/UrlPath.js";
import { UrlQueryParams } from "./request-panel/UrlQueryParams.js";
import { ResultPanel } from "./result-panel/ResultPanel.js";
import { useRememberSkipLoginDialog } from "./useRememberSkipLoginDialog.js";
export const NO_IDENTITY = "__none";
export const Playground = ({ server, servers = [], url, method, headers = [], queryParams = [], pathParams = [], defaultBody = "", examples, requiresLogin = false, onLogin, onSignUp, }) => {
    const { selectedServer, setSelectedServer } = useSelectedServer(servers.map((url) => ({ url })));
    const [showSelectIdentity, setShowSelectIdentity] = useState(false);
    const identities = useApiIdentities();
    const { setRememberedIdentity, getRememberedIdentity } = useIdentityStore();
    const [, startTransition] = useTransition();
    const { skipLogin, setSkipLogin } = useRememberSkipLoginDialog();
    const [showLongRunningWarning, setShowLongRunningWarning] = useState(false);
    const abortControllerRef = useRef(undefined);
    const latestSetRememberedIdentity = useLatest(setRememberedIdentity);
    const formRef = useRef(null);
    const { label: hotkeyLabel } = useHotkey("meta+enter", () => {
        formRef.current?.requestSubmit();
    });
    const pathParamOrder = url.match(/\{([^}]+)\}/g)?.map((match) => match.slice(1, -1)) ?? [];
    const sortedPathParams = [...pathParams].sort((a, b) => pathParamOrder.indexOf(a.name) - pathParamOrder.indexOf(b.name));
    const { register, control, handleSubmit, watch, setValue, ...form } = useForm({
        defaultValues: {
            body: defaultBody,
            queryParams: queryParams.length > 0
                ? queryParams.map((param) => ({
                    name: param.name,
                    value: param.defaultValue ?? "",
                    active: param.defaultActive ?? false,
                    enum: param.enum ?? [],
                }))
                : [
                    {
                        name: "",
                        value: "",
                        active: false,
                        enum: [],
                    },
                ],
            pathParams: sortedPathParams.map((param) => ({
                name: param.name,
                value: param.defaultValue ?? "",
            })),
            headers: headers.length > 0
                ? headers.map((header) => ({
                    name: header.name,
                    value: header.defaultValue ?? "",
                    active: header.defaultActive ?? false,
                }))
                : [
                    {
                        name: "",
                        value: "",
                        active: false,
                    },
                ],
            identity: getRememberedIdentity([
                NO_IDENTITY,
                ...(identities.data?.map((i) => i.id) ?? []),
            ]),
        },
    });
    const identity = watch("identity");
    const authorizationFields = useMemo(() => identities.data?.find((i) => i.id === identity)?.authorizationFields, [identities.data, identity]);
    useEffect(() => {
        if (identity) {
            latestSetRememberedIdentity.current(identity);
        }
    }, [latestSetRememberedIdentity, identity]);
    const queryMutation = useMutation({
        gcTime: 0,
        mutationFn: async (data) => {
            const start = performance.now();
            const headers = Object.fromEntries([
                ...data.headers
                    .filter((h) => h.name && h.active)
                    .map((header) => [header.name, header.value]),
            ]);
            const request = new Request(createUrl(server ?? selectedServer, url, data), {
                method: method.toUpperCase(),
                headers,
                body: data.body ? data.body : undefined,
            });
            if (data.identity !== NO_IDENTITY) {
                await identities.data
                    ?.find((i) => i.id === data.identity)
                    ?.authorizeRequest(request);
            }
            const warningTimeout = setTimeout(() => setShowLongRunningWarning(true), 3210);
            abortControllerRef.current = new AbortController();
            abortControllerRef.current.signal.addEventListener("abort", () => {
                clearTimeout(warningTimeout);
            });
            try {
                const response = await fetch(request, {
                    cache: "no-store",
                    signal: abortControllerRef.current.signal,
                });
                clearTimeout(warningTimeout);
                setShowLongRunningWarning(false);
                const time = performance.now() - start;
                const url = new URL(request.url);
                const responseHeaders = Array.from(response.headers.entries());
                const contentType = response.headers.get("content-type") || "";
                const isBinary = isBinaryContentType(contentType);
                let body = "";
                let blob;
                let fileName;
                if (isBinary) {
                    blob = await response.blob();
                    fileName = extractFileName(responseHeaders, request.url);
                    body = `Binary content (${contentType})`;
                }
                else {
                    body = await response.text();
                }
                const responseSize = response.headers.get("content-length");
                return {
                    status: response.status,
                    headers: responseHeaders,
                    size: responseSize ? parseInt(responseSize) : body.length,
                    body,
                    time,
                    isBinary,
                    fileName,
                    blob,
                    request: {
                        method: request.method.toUpperCase(),
                        url: request.url,
                        headers: [
                            ["Host", url.host],
                            ["User-Agent", "Zudoku Playground"],
                            ...Array.from(request.headers.entries()),
                        ],
                        body: data.body ? data.body : undefined,
                    },
                };
            }
            catch (error) {
                clearTimeout(warningTimeout);
                setShowLongRunningWarning(false);
                if (error instanceof TypeError) {
                    throw new Error("The request failed, possibly due to network issues or CORS policy.");
                }
                else {
                    throw error;
                }
            }
        },
    });
    const isRequestAnimating = queryMutation.isPending;
    const [isAnimating, setIsAnimating] = useState(false);
    useEffect(() => {
        const timer = setTimeout(() => setIsAnimating(isRequestAnimating), 100);
        return () => clearTimeout(timer);
    }, [isRequestAnimating]);
    const { isFinished, progress } = useNProgress({ isAnimating });
    useEffect(() => {
        return () => {
            abortControllerRef.current?.abort();
        };
    }, []);
    const serverSelect = (_jsx("div", { className: "inline-block opacity-50 hover:opacity-100 transition", children: server ? (_jsx("span", { children: server.replace(/^https?:\/\//, "").replace(/\/$/, "") })) : (servers.length > 1 && (_jsxs(Select, { onValueChange: (value) => {
                startTransition(() => setSelectedServer(value));
            }, value: selectedServer, defaultValue: selectedServer, children: [_jsx(SelectTrigger, { className: "p-0 border-none flex-row-reverse bg-transparent text-xs gap-0.5 h-auto translate-y-[4px]", children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { children: servers.map((s) => (_jsx(SelectItem, { value: s, children: s.replace(/^https?:\/\//, "").replace(/\/$/, "") }, s))) })] }))) }));
    const showLogin = requiresLogin && !skipLogin;
    const isBodySupported = ["POST", "PUT", "PATCH", "DELETE"].includes(method.toUpperCase());
    const [isCopied, copyToClipboard] = useCopyToClipboard();
    return (_jsx(FormProvider, { register, control, handleSubmit, watch, setValue, ...form, children: _jsx(TooltipProvider, { delayDuration: 150, children: _jsxs("form", { ref: formRef, onSubmit: handleSubmit((data) => {
                    if (identities.data?.length === 0 || data.identity) {
                        queryMutation.mutate(data);
                    }
                    else {
                        setShowSelectIdentity(true);
                    }
                }), className: "relative", children: [_jsx(IdentityDialog, { identities: identities.data ?? [], open: showSelectIdentity, onOpenChange: setShowSelectIdentity, onSubmit: ({ rememberedIdentity, identity }) => {
                            if (rememberedIdentity) {
                                setValue("identity", identity ?? NO_IDENTITY);
                            }
                            setShowSelectIdentity(false);
                            queryMutation.mutate({ ...form.getValues(), identity });
                        } }), _jsx(RequestLoginDialog, { open: showLogin, setOpen: (open) => setSkipLogin(!open), onSignUp: onSignUp, onLogin: onLogin }), _jsxs("div", { className: "grid grid-cols-[1fr_1px_1fr] text-sm", children: [_jsxs("div", { className: "col-span-3 p-4 border-b flex gap-2 items-stretch", children: [_jsxs("div", { className: "flex flex-1 items-center w-full border rounded-md relative overflow-hidden", children: [_jsx("div", { className: "border-r p-2 bg-muted rounded-l-md self-stretch font-semibold font-mono flex items-center", children: method.toUpperCase() }), _jsx("div", { className: "items-center px-2 font-mono text-xs break-all leading-6 relative h-full w-full", children: _jsxs("div", { className: "h-full py-1.5", children: [serverSelect, _jsx(UrlPath, { url: url }), _jsx(UrlQueryParams, {})] }) }), _jsx("div", { className: "px-1", children: _jsx(Button, { type: "button", onClick: () => {
                                                        copyToClipboard(createUrl(server ?? selectedServer, url, form.getValues()).toString());
                                                    }, variant: "ghost", size: "icon-xs", className: cn("hover:opacity-100 transition", isCopied ? "text-emerald-600 opacity-100" : "opacity-50"), children: isCopied ? (_jsx(CheckIcon, { className: "text-green-500", size: 14 })) : (_jsx(CopyIcon, { size: 14 })) }) })] }), _jsx(Button, { type: "submit", variant: queryMutation.isPending ? "destructive" : "default", onClick: (e) => {
                                            if (queryMutation.isPending) {
                                                abortControllerRef.current?.abort("Request cancelled by user");
                                                e.preventDefault();
                                            }
                                        }, className: "w-18", children: queryMutation.isPending ? "Cancel" : "Send" })] }), _jsxs("div", { className: "relative overflow-y-auto h-[80vh]", children: [identities.data?.length !== 0 && (_jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleHeaderTrigger, { children: [_jsx(IdCardLanyardIcon, { size: 16 }), _jsx(CollapsibleHeader, { className: "col-span-2", children: "Authentication" })] }), _jsx(CollapsibleContent, { className: "CollapsibleContent", children: _jsx(IdentitySelector, { value: identity, identities: identities.data ?? [], setValue: (value) => setValue("identity", value) }) })] })), sortedPathParams.length > 0 && (_jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleHeaderTrigger, { children: [_jsx(ShapesIcon, { size: 16 }), _jsx(CollapsibleHeader, { className: "col-span-2", children: "Path Parameters" })] }), _jsx(CollapsibleContent, { className: "CollapsibleContent", children: _jsx(PathParams, { url: url, control: control }) })] })), _jsx(QueryParams, { control: control, schemaQueryParams: queryParams }), _jsx(Headers, { control: control, schemaHeaders: headers, lockedHeaders: authorizationFields?.headers }), isBodySupported && _jsx(BodyPanel, { content: examples })] }), _jsx("div", { className: "w-full bg-muted-foreground/20" }), _jsx(ResultPanel, { queryMutation: queryMutation, showLongRunningWarning: showLongRunningWarning, isFinished: isFinished, progress: progress, tip: _jsx("div", { className: "text-xs w-full", children: _jsxs("span", { className: "text-muted-foreground", children: ["Press", " ", _jsx("kbd", { className: "text-foreground border rounded m-0.5 px-1 py-0.5 capitalize", children: hotkeyLabel.join(" + ") }), " ", "to send a request"] }) }), onCancel: () => {
                                    abortControllerRef.current?.abort("Request cancelled by the user");
                                    setShowLongRunningWarning(false);
                                } })] })] }) }) }));
};
export default Playground;
//# sourceMappingURL=Playground.js.map