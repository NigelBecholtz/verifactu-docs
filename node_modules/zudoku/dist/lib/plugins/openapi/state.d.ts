interface SelectedServerState {
    selectedServer?: string;
    setSelectedServer: (newServer: string) => void;
}
export declare const useSelectedServerStore: import("zustand").UseBoundStore<Omit<import("zustand").StoreApi<SelectedServerState>, "setState" | "persist"> & {
    setState(partial: SelectedServerState | Partial<SelectedServerState> | ((state: SelectedServerState) => SelectedServerState | Partial<SelectedServerState>), replace?: false | undefined): unknown;
    setState(state: SelectedServerState | ((state: SelectedServerState) => SelectedServerState), replace: true): unknown;
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<SelectedServerState, SelectedServerState, unknown>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: SelectedServerState) => void) => () => void;
        onFinishHydration: (fn: (state: SelectedServerState) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<SelectedServerState, SelectedServerState, unknown>>;
    };
}>;
/**
 * Simple wrapper for `useSelectedServerStore` to fall back to first of the provided servers
 */
export declare const useSelectedServer: (servers: Array<{
    url: string;
}>) => {
    selectedServer: string;
    setSelectedServer: (newServer: string) => void;
};
export {};
