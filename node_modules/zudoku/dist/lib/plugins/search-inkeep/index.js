import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useMemo, useState } from "react";
import { ClientOnly } from "../../components/ClientOnly.js";
import { aiChatSettings, baseSettings, modalSettings, searchSettings, } from "./inkeep.js";
const InkeepSearch = ({ isOpen, onClose, settings, }) => {
    const config = useMemo(() => ({
        baseSettings: {
            ...baseSettings,
            ...settings,
            colorMode: {
                sync: {
                    target: "html",
                    attributes: ["class"],
                    isDarkMode: (attrs) => attrs.class?.includes("dark") ?? false,
                },
            },
        },
        modalSettings: {
            ...modalSettings,
            onOpenChange: (newOpen) => {
                if (!newOpen)
                    onClose();
            },
        },
        searchSettings,
        aiChatSettings,
    }), [onClose, settings]);
    const [searchInstance, setSearchInstance] = useState(typeof window !== "undefined" && window.Inkeep?.ModalSearchAndChat
        ? window.Inkeep.ModalSearchAndChat(config)
        : undefined);
    useEffect(() => {
        if (searchInstance)
            return;
        const checkInkeep = setInterval(() => {
            if (typeof window !== "undefined" && window.Inkeep?.ModalSearchAndChat) {
                const inkeep = window.Inkeep.ModalSearchAndChat(config);
                setSearchInstance(inkeep);
                clearInterval(checkInkeep);
            }
        }, 100);
        return () => clearInterval(checkInkeep);
    }, [config, searchInstance]);
    useEffect(() => {
        if (!searchInstance)
            return;
        searchInstance.update({ modalSettings: { isOpen } });
    }, [isOpen, searchInstance]);
    return null;
};
export const inkeepSearchPlugin = (settings) => {
    return {
        getHead: () => {
            return (_jsx("script", { type: "module", src: "https://cdn.jsdelivr.net/npm/@inkeep/cxkit-js@0.5.90/+esm", defer: true }));
        },
        renderSearch: ({ isOpen, onClose, }) => {
            return (_jsx(ClientOnly, { children: _jsx(InkeepSearch, { isOpen: isOpen, onClose: onClose, settings: settings }) }));
        },
    };
};
//# sourceMappingURL=index.js.map