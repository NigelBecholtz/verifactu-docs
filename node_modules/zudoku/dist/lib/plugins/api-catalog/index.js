import { jsx as _jsx } from "react/jsx-runtime";
import slugify from "@sindresorhus/slugify";
import { matchPath } from "react-router";
import { joinUrl } from "../../util/joinUrl.js";
import { Catalog } from "./Catalog.js";
export const getKey = (category, tag) => slugify(`${category}-${tag}`);
export const apiCatalogPlugin = ({ path, items, label, categories = [], filterCatalogItems, }) => {
    const paths = Object.fromEntries(categories.flatMap((category) => [undefined, ...category.tags].map((tag) => [
        joinUrl(path, tag ? getKey(category.label, tag) : undefined),
        tag,
    ])));
    return {
        getNavigation: async (currentPath) => {
            const matches = Object.keys(paths).some((path) => matchPath(path, currentPath));
            if (!matches) {
                return [];
            }
            const navigation = categories.map((category) => ({
                type: "category",
                label: category.label,
                collapsible: false,
                items: category.tags.map((tag) => ({
                    type: "link",
                    to: joinUrl(path, getKey(category.label, tag)),
                    label: tag,
                    badge: {
                        label: String(items.filter((api) => api.categories.find((c) => c.tags.includes(tag))).length),
                        color: "outline",
                    },
                })),
            }));
            navigation.unshift({
                type: "link",
                to: joinUrl(path),
                label: "Overview",
                badge: { label: String(items.length), color: "outline" },
            });
            return navigation;
        },
        getRoutes: () => Object.entries(paths).map(([path, tag]) => ({
            path,
            element: (_jsx(Catalog, { label: label, categoryLabel: tag, items: items, filterCatalogItems: filterCatalogItems, categories: categories })),
        })),
    };
};
//# sourceMappingURL=index.js.map