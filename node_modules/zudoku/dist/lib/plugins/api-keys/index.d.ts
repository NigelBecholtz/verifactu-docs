import type { UseAuthReturn } from "../../authentication/hook.js";
import type { ApiIdentityPlugin, ProfileMenuPlugin, ZudokuPlugin } from "../../core/plugins.js";
import type { ZudokuContext } from "../../core/ZudokuContext.js";
export type ApiKeyService = {
    getConsumers: (context: ZudokuContext) => Promise<ApiConsumer[]>;
    rollKey?: (consumerId: string, context: ZudokuContext) => Promise<void>;
    deleteKey?: (consumerId: string, keyId: string, context: ZudokuContext) => Promise<void>;
    updateConsumer?: (consumer: {
        id: string;
        label?: string;
    }, context: ZudokuContext) => Promise<void>;
    getUsage?: (apiKeys: string[], context: ZudokuContext) => Promise<void>;
    createKey?: ({ apiKey, context, auth, }: {
        apiKey: {
            description: string;
            expiresOn?: string;
        };
        context: ZudokuContext;
        auth: UseAuthReturn;
    }) => Promise<void>;
};
export type ApiKeyPluginOptions = ApiKeyService | ({
    deploymentName: string;
} & Partial<ApiKeyService>);
export interface ApiKey {
    id: string;
    description?: string;
    createdOn?: string;
    updatedOn?: string;
    expiresOn?: string;
    key: string;
}
export interface ApiConsumer {
    id: string;
    label: string;
    apiKeys: ApiKey[];
    description?: string;
    createdOn?: string;
    updatedOn?: string;
    expiresOn?: string;
    key?: ApiKey;
}
export declare const createApiKeyService: <T extends ApiKeyService>(service: T) => T;
export declare const apiKeyPlugin: (options: ApiKeyPluginOptions) => ZudokuPlugin & ApiIdentityPlugin & ProfileMenuPlugin;
