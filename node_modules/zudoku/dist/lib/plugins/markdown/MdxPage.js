import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMDXComponents } from "@mdx-js/react";
import slugify from "@sindresorhus/slugify";
import { Helmet } from "@zudoku/react-helmet-async";
import { EditIcon } from "lucide-react";
import { useEffect } from "react";
import { Button } from "zudoku/ui/Button.js";
import { CategoryHeading } from "../../components/CategoryHeading.js";
import { Heading } from "../../components/Heading.js";
import { Toc } from "../../components/navigation/Toc.js";
import { useCurrentItem, usePrevNext, } from "../../components/navigation/utils.js";
import { Pagination } from "../../components/Pagination.js";
import { Typography } from "../../components/Typography.js";
const MarkdownHeadings = {
    h2: ({ children, id }) => (_jsx(Heading, { level: 2, id: id, registerNavigationAnchor: true, children: children })),
    h3: ({ children, id }) => (_jsx(Heading, { level: 3, id: id, registerNavigationAnchor: true, children: children })),
};
export const MdxPage = ({ mdxComponent: MdxComponent, frontmatter = {}, defaultOptions, __filepath, tableOfContents, excerpt, }) => {
    const categoryTitle = useCurrentItem()?.categoryLabel;
    const title = frontmatter.title;
    const description = frontmatter.description ?? excerpt;
    const category = frontmatter.category ?? categoryTitle;
    const hideToc = frontmatter.toc === false || defaultOptions?.toc === false;
    const pageTitle = title ?? tableOfContents.find((item) => item.depth === 1)?.value;
    const hidePager = frontmatter.disable_pager ??
        frontmatter.disablePager ??
        defaultOptions?.disablePager ??
        false;
    const showLastModified = frontmatter.showLastModified ?? defaultOptions?.showLastModified ?? true;
    const lastModifiedDate = frontmatter.lastModifiedTime
        ? new Date(frontmatter.lastModifiedTime)
        : null;
    const editConfig = frontmatter.suggestEdit !== false &&
        (frontmatter.suggestEdit ?? defaultOptions?.suggestEdit);
    const editUrl = editConfig
        ? editConfig.url.replaceAll("{filePath}", __filepath)
        : null;
    const editText = editConfig ? editConfig.text || "Edit this page" : null;
    const tocEntries = tableOfContents.find((item) => item.depth === 1)?.children ??
        // if `title` is provided by frontmatter it does not appear in the table of contents
        tableOfContents.filter((item) => item.depth === 2);
    const showToc = !hideToc && tocEntries.length > 0;
    const { prev, next } = usePrevNext();
    useEffect(() => {
        if (process.env.NODE_ENV === "development") {
            window.__getReactRefreshIgnoredExports = ({ id }) => {
                if (!id.endsWith(__filepath))
                    return;
                return ["frontmatter", "tableOfContents"];
            };
            return () => {
                window.__getReactRefreshIgnoredExports = undefined;
            };
        }
    }, [__filepath]);
    return (_jsxs("div", { className: "grid grid-cols-1 xl:grid-cols-(--sidecar-grid-cols) gap-8 justify-between", "data-pagefind-filter": "section:markdown", "data-pagefind-meta": "section:markdown", children: [_jsxs(Helmet, { children: [_jsx("title", { children: pageTitle }), description && _jsx("meta", { name: "description", content: description })] }), _jsxs(Typography, { className: "max-w-full xl:w-full xl:max-w-3xl flex-1 shrink pt-(--padding-content-top)", children: [(category || title) && (_jsxs("header", { children: [category && _jsx(CategoryHeading, { children: category }), title && (_jsx(Heading, { level: 1, id: slugify(title), children: title }))] })), _jsx(MdxComponent, { components: { ...useMDXComponents(), ...MarkdownHeadings } }), _jsx("div", { className: "h-16" }), (showLastModified && lastModifiedDate) || editUrl ? (_jsxs("div", { className: "flex justify-between text-xs text-muted-foreground ", children: [_jsx("div", {}), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("div", { children: editUrl && (_jsx(Button, { asChild: true, variant: "ghost", size: "sm", children: _jsxs("a", { href: editUrl, target: "_blank", rel: "noopener noreferrer", className: "flex items-center gap-1", children: [_jsx(EditIcon, { size: 12 }), editText] }) })) }), _jsx("div", { children: showLastModified && lastModifiedDate && (_jsxs("div", { title: lastModifiedDate.toLocaleString(undefined, {
                                                dateStyle: "full",
                                                timeStyle: "medium",
                                            }), children: ["Last modified on", " ", _jsx("time", { dateTime: lastModifiedDate.toISOString(), children: lastModifiedDate.toLocaleDateString("en-US", {
                                                        dateStyle: "long",
                                                    }) })] })) })] })] })) : null, !hidePager && (_jsxs(_Fragment, { children: [_jsx("div", { className: "h-px bg-border mt-2 mb-6" }), _jsx(Pagination, { prev: prev ? { to: prev.id, label: prev.label ?? "" } : undefined, next: next ? { to: next.id, label: next.label ?? "" } : undefined, className: "mb-10" })] }))] }), _jsx("div", { className: "hidden xl:block", "data-pagefind-ignore": "all", children: showToc && _jsx(Toc, { entries: tocEntries }) })] }));
};
//# sourceMappingURL=MdxPage.js.map