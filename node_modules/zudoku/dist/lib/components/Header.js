import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { memo } from "react";
import { Link } from "react-router";
import { Button } from "zudoku/ui/Button.js";
import { Skeleton } from "zudoku/ui/Skeleton.js";
import { useAuth } from "../authentication/hook.js";
import { isProfileMenuPlugin, } from "../core/plugins.js";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuPortal, DropdownMenuSeparator, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuTrigger, } from "../ui/DropdownMenu.js";
import { cn } from "../util/cn.js";
import { joinUrl } from "../util/joinUrl.js";
import { Banner } from "./Banner.js";
import { ClientOnly } from "./ClientOnly.js";
import { useZudoku } from "./context/ZudokuContext.js";
import { MobileTopNavigation } from "./MobileTopNavigation.js";
import { PageProgress } from "./PageProgress.js";
import { Search } from "./Search.js";
import { Slot } from "./Slot.js";
import { ThemeSwitch } from "./ThemeSwitch.js";
import { TopNavigation } from "./TopNavigation.js";
const RecursiveMenu = ({ item }) => {
    return item.children ? (_jsxs(DropdownMenuSub, { children: [_jsx(DropdownMenuSubTrigger, { children: item.label }), _jsx(DropdownMenuPortal, { children: _jsx(DropdownMenuSubContent, { children: item.children.map((child) => (_jsx(RecursiveMenu, { item: child }, child.label))) }) })] }, item.label)) : (_jsx(Link, { to: item.path ?? "", children: _jsxs(DropdownMenuItem, { className: "flex gap-2", children: [item.icon && (_jsx(item.icon, { size: 16, strokeWidth: 1, absoluteStrokeWidth: true })), item.label] }, item.label) }));
};
export const Header = memo(function HeaderInner() {
    const auth = useAuth();
    const { isAuthenticated, profile, isAuthEnabled } = useAuth();
    const context = useZudoku();
    const { site, plugins, options } = context;
    const accountItems = plugins
        .filter((p) => isProfileMenuPlugin(p))
        .flatMap((p) => p.getProfileMenuItems(context))
        .sort((i) => i.weight ?? 0);
    const logoLightSrc = site?.logo
        ? /https?:\/\//.test(site.logo.src.light)
            ? site.logo.src.light
            : joinUrl(options.basePath, site.logo.src.light)
        : undefined;
    const logoDarkSrc = site?.logo
        ? /https?:\/\//.test(site.logo.src.dark)
            ? site.logo.src.dark
            : joinUrl(options.basePath, site.logo.src.dark)
        : undefined;
    const borderBottom = "inset-shadow-[0_-1px_0_0_var(--border)]";
    return (_jsxs("header", { className: "sticky lg:top-0 z-10 bg-background/80 backdrop-blur w-full", "data-pagefind-ignore": "all", children: [_jsx(Banner, {}), _jsxs("div", { className: cn(borderBottom, "relative"), children: [_jsx(PageProgress, {}), _jsxs("div", { className: "max-w-screen-2xl mx-auto flex items-center justify-between h-(--top-header-height) px-4 lg:px-8 border-transparent", children: [_jsx("div", { className: "flex", children: _jsx(Link, { to: site?.logo?.href ?? "/", children: _jsx("div", { className: "flex items-center gap-3.5", children: site?.logo ? (_jsxs(_Fragment, { children: [_jsx("img", { src: logoLightSrc, alt: site.logo.alt ?? site.title, style: { width: site.logo.width }, className: "max-h-(--top-header-height) dark:hidden", loading: "lazy" }), _jsx("img", { src: logoDarkSrc, alt: site.logo.alt ?? site.title, style: { width: site.logo.width }, className: "max-h-(--top-header-height) hidden dark:block", loading: "lazy" })] })) : (_jsx("span", { className: "font-semibold text-2xl", children: site?.title })) }) }) }), _jsx("div", { className: "absolute inset-x-0 justify-center items-center hidden lg:flex w-full pointer-events-none", children: _jsx(Search, { className: "pointer-events-auto" }) }), _jsxs("div", { className: "flex items-center gap-8", children: [_jsx(MobileTopNavigation, {}), _jsxs("div", { className: "hidden lg:flex items-center justify-self-end text-sm gap-2", children: [_jsx(Slot.Target, { name: "head-navigation-start" }), isAuthEnabled && (_jsx(ClientOnly, { fallback: _jsx(Skeleton, { className: "rounded-sm h-5 w-24 mr-4" }), children: !isAuthenticated ? (_jsx(Button, { variant: "ghost", onClick: () => auth.login(), children: "Login" })) : (Object.values(accountItems).length > 0 && (_jsxs(DropdownMenu, { modal: false, children: [_jsx(DropdownMenuTrigger, { asChild: true, children: _jsx(Button, { variant: "ghost", children: profile?.name ?? "My Account" }) }), _jsxs(DropdownMenuContent, { className: "w-56", children: [_jsxs(DropdownMenuLabel, { children: [profile?.name ? `${profile.name}` : "My Account", profile?.email && (_jsx("div", { className: "font-normal text-muted-foreground", children: profile.email }))] }), accountItems.filter((i) => i.category === "top")
                                                                    .length > 0 && _jsx(DropdownMenuSeparator, {}), accountItems
                                                                    .filter((i) => i.category === "top")
                                                                    .map((i) => (_jsx(RecursiveMenu, { item: i }, i.label))), accountItems.filter((i) => !i.category || i.category === "middle").length > 0 && _jsx(DropdownMenuSeparator, {}), accountItems
                                                                    .filter((i) => !i.category || i.category === "middle")
                                                                    .map((i) => (_jsx(RecursiveMenu, { item: i }, i.label))), accountItems.filter((i) => i.category === "bottom")
                                                                    .length > 0 && _jsx(DropdownMenuSeparator, {}), accountItems
                                                                    .filter((i) => i.category === "bottom")
                                                                    .map((i) => (_jsx(RecursiveMenu, { item: i }, i.label)))] })] }))) })), _jsx(Slot.Target, { name: "head-navigation-end" }), _jsx(ThemeSwitch, {})] })] })] })] }), _jsx("div", { className: cn("hidden lg:block", borderBottom), children: _jsxs("div", { className: "max-w-screen-2xl mx-auto border-transparent relative", children: [_jsx(Slot.Target, { name: "top-navigation-before" }), _jsx(TopNavigation, {}), _jsx(Slot.Target, { name: "top-navigation-after" })] }) })] }));
});
//# sourceMappingURL=Header.js.map