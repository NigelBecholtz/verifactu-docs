import { type ReactNode } from "react";
import { type SlotType } from "./context/SlotProvider.js";
export type CustomSlotNames = never;
type PredefinedSlotNames = "api-keys-list-page" | "api-keys-list-page-before-keys" | "footer-after" | "footer-before" | "head-navigation-end" | "head-navigation-start" | "layout-after-head" | "layout-before-head" | "top-navigation-after" | "top-navigation-before" | "top-navigation-side" | "content-before" | "content-after" | "navigation-after" | "navigation-before";
export type SlotName = PredefinedSlotNames | CustomSlotNames;
export declare const Slot: {
    Source: ({ name, children, type, }: {
        name: SlotName;
        type?: "prepend" | "replace" | "append";
        children: SlotType;
    }) => null;
    Target: ({ name, fallback }: {
        name: string;
        fallback?: ReactNode;
    }) => string | number | bigint | boolean | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<ReactNode> | Promise<string | number | bigint | boolean | import("react").ReactPortal | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<ReactNode> | null | undefined> | import("react/jsx-runtime").JSX.Element[] | null | undefined;
};
export {};
