import { useMDXComponents as useMDXComponentsImport } from "@mdx-js/react";
import { Helmet } from "@zudoku/react-helmet-async";
import { CACHE_KEYS as CACHE_KEYS_IMPORT } from "./cache.js";
export declare const Head: typeof Helmet;
export declare const Callout: ({ type, children, title, className, icon, }: {
    type: "info" | "note" | "tip" | "caution" | "danger";
    title?: string;
    children: import("react").ReactNode;
    className?: string;
    icon?: boolean;
}) => import("react/jsx-runtime").JSX.Element;
export declare const Markdown: import("react").MemoExoticComponent<({ content, className, components, }: {
    content: string;
    className?: string;
    components?: import("react-markdown").Components;
}) => import("react/jsx-runtime").JSX.Element>;
export declare const Spinner: ({ size }: {
    size?: number;
}) => import("react/jsx-runtime").JSX.Element;
export declare const ClientOnly: (props: {
    children: import("react").ReactNode;
    fallback?: import("react").ReactNode;
}) => import("react").ReactNode;
export declare const Button: import("react").ForwardRefExoticComponent<import("../ui/Button.js").ButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
export declare const Link: import("react").ForwardRefExoticComponent<import("react-router").LinkProps & import("react").RefAttributes<HTMLAnchorElement>>;
export declare const Zudoku: {
    (props: import("../core/ZudokuContext.js").ZudokuContextOptions): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const Typography: ({ children, className, }: {
    children: React.ReactNode;
    className?: string;
}) => import("react/jsx-runtime").JSX.Element;
export declare const Slot: {
    Source: ({ name, children, type, }: {
        name: import("./Slot.js").SlotName;
        type?: "prepend" | "replace" | "append";
        children: import("./context/SlotProvider.js").SlotType;
    }) => null;
    Target: ({ name, fallback }: {
        name: string;
        fallback?: import("react").ReactNode;
    }) => string | number | bigint | boolean | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | Promise<string | number | bigint | boolean | import("react").ReactPortal | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | null | undefined> | import("react/jsx-runtime").JSX.Element[] | null | undefined;
};
/** @deprecated Import from `zudoku/hooks` instead */
export declare const useMDXComponents: typeof useMDXComponentsImport;
/** @deprecated Import from `zudoku/hooks` instead */
export declare const useZudoku: () => import("../core/ZudokuContext.js").ZudokuContext;
/** @deprecated Import from `zudoku/hooks` instead */
export declare const useAuth: () => {
    login: () => Promise<void>;
    logout: () => Promise<void>;
    signup: () => Promise<void>;
    isAuthenticated: boolean;
    isPending: boolean;
    profile: import("../authentication/state.js").UserProfile | null;
    providerData: unknown;
    setAuthenticationPending: () => void;
    setLoggedOut: () => void;
    setLoggedIn: ({ profile, providerData, }: {
        profile: import("../authentication/state.js").UserProfile;
        providerData: unknown;
    }) => void;
    isAuthEnabled: boolean;
};
/** @deprecated Import from `zudoku/hooks` instead */
export declare const useCache: () => {
    invalidateCache: (key: keyof typeof CACHE_KEYS_IMPORT) => Promise<void>;
};
/** @deprecated Import from `zudoku/hooks` instead */
export declare const CACHE_KEYS: Readonly<{
    API_IDENTITIES: string[];
}>;
/** @deprecated Import from `zudoku/hooks` instead */
export declare const useTheme: () => import("next-themes").UseThemeProps;
