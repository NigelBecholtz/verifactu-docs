import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { cx } from "class-variance-authority";
import { deepEqual } from "fast-equals";
import { Suspense } from "react";
import { NavLink } from "react-router";
import { useAuth } from "../authentication/hook.js";
import { joinUrl } from "../util/joinUrl.js";
import { useCurrentNavigation, useZudoku } from "./context/ZudokuContext.js";
import { shouldShowItem, traverseNavigationItem } from "./navigation/utils.js";
import { Slot } from "./Slot.js";
export const TopNavigation = () => {
    const context = useZudoku();
    const { navigation } = context;
    const auth = useAuth();
    const filteredItems = navigation.filter(shouldShowItem(auth, context));
    if (filteredItems.length === 0 || import.meta.env.MODE === "standalone") {
        return _jsx("style", { children: `:root { --top-nav-height: 0px; }` });
    }
    return (_jsx(Suspense, { children: _jsxs("div", { className: "items-center justify-between px-8 h-(--top-nav-height) hidden lg:flex text-sm relative", children: [_jsx("nav", { className: "text-sm", children: _jsx("ul", { className: "flex flex-row items-center gap-8", children: filteredItems.map((item) => (_jsx("li", { children: _jsx(TopNavItem, { ...item }) }, item.label + item.type))) }) }), _jsx(Slot.Target, { name: "top-navigation-side" })] }) }));
};
const getPathForItem = (item) => {
    switch (item.type) {
        case "doc":
            return joinUrl(item.path);
        case "link":
            return item.to;
        case "category": {
            if (item.link?.path) {
                return joinUrl(item.link.path);
            }
            return (traverseNavigationItem(item, (child) => {
                if (child.type !== "category") {
                    return getPathForItem(child);
                }
            }) ?? "");
        }
        case "custom-page":
            return item.path;
    }
};
export const TopNavLink = ({ isActive, children, ...props }) => {
    return (_jsx(NavLink, { viewTransition: true, className: ({ isActive: isActiveNavLink, isPending }) => {
            const isActiveReal = isActiveNavLink || isActive;
            return cx("flex items-center gap-2 lg:py-3.5 font-medium -mb-px transition duration-150 delay-75 relative", isActiveReal || isPending
                ? [
                    "text-foreground",
                    // underline with view transition animation
                    "after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0",
                    "after:h-0.5 after:bg-primary",
                    isActiveReal &&
                        "after:[view-transition-name:top-nav-underline]",
                    isPending && "after:bg-primary/25",
                ]
                : "text-foreground/75 hover:text-foreground");
        }, ...props, children: children }));
};
export const TopNavItem = (item) => {
    const currentNav = useCurrentNavigation();
    const isActiveTopNavItem = deepEqual(currentNav.topNavItem, item);
    const path = getPathForItem(item);
    return (
    // We don't use isActive here because it has to be inside the navigation,
    // the top nav id doesn't necessarily start with the navigation id
    _jsxs(TopNavLink, { to: path, isActive: isActiveTopNavItem, children: [item.icon && _jsx(item.icon, { size: 16, className: "align-[-0.125em]" }), item.label] }));
};
//# sourceMappingURL=TopNavigation.js.map