import { cva } from "class-variance-authority";
import { useLocation } from "react-router";
import { joinUrl } from "../../util/joinUrl.js";
import { useCurrentNavigation } from "../context/ZudokuContext.js";
export const traverseNavigation = (navigation, callback) => {
    for (const item of navigation) {
        const result = traverseNavigationItem(item, callback);
        if (result !== undefined)
            return result;
    }
};
export const traverseNavigationItem = (item, callback, parentCategories = []) => {
    const result = callback(item, parentCategories);
    if (result !== undefined)
        return result;
    if (item.type === "category") {
        for (const child of item.items) {
            const childResult = traverseNavigationItem(child, callback, [
                ...parentCategories,
                item,
            ]);
            if (childResult !== undefined)
                return childResult;
        }
    }
};
export const useCurrentItem = () => {
    const location = useLocation();
    const { navigation } = useCurrentNavigation();
    return traverseNavigation(navigation, (item) => {
        if (item.type === "doc" && joinUrl(item.path) === location.pathname) {
            return item;
        }
    });
};
export const useIsCategoryOpen = (category) => {
    const location = useLocation();
    return traverseNavigationItem(category, (item) => {
        switch (item.type) {
            case "category":
                if (!item.link) {
                    return undefined;
                }
                return joinUrl(item.link.path) === location.pathname ? true : undefined;
            case "custom-page":
            case "doc":
                return joinUrl(item.path) === location.pathname ? true : undefined;
            default:
                return undefined;
        }
    });
};
export const usePrevNext = () => {
    const currentId = useLocation().pathname;
    const { navigation } = useCurrentNavigation();
    let prev;
    let next;
    let foundCurrent = false;
    traverseNavigation(navigation, (item) => {
        const itemId = item.type === "doc"
            ? joinUrl(item.path)
            : item.type === "category" && item.link
                ? joinUrl(item.link.path)
                : undefined;
        if (!itemId)
            return;
        if (foundCurrent) {
            next = { label: item.label, id: itemId };
            return true;
        }
        if (currentId === itemId) {
            foundCurrent = true;
        }
        else {
            prev = { label: item.label, id: itemId };
        }
    });
    return { prev, next };
};
export const navigationListItem = cva("relative flex items-center gap-2 px-(--padding-nav-item) my-0.5 py-1.5 rounded-lg hover:bg-accent tabular-nums", {
    variants: {
        isActive: {
            true: "bg-accent font-medium",
            false: "text-foreground/80",
        },
        isMuted: {
            true: "text-foreground/30",
            false: "",
        },
        isPending: {
            true: "bg-accent animate-pulse",
            false: "",
        },
    },
    defaultVariants: {
        isActive: false,
    },
});
export const shouldShowItem = (auth, context) => (item) => {
    if (typeof item.display === "function") {
        return item.display({ context, auth });
    }
    if (item.display === "hide")
        return false;
    if (!item.label)
        return false;
    return ((item.display === "auth" && auth.isAuthenticated) ||
        (item.display === "anon" && !auth.isAuthenticated) ||
        !item.display ||
        item.display === "always");
};
//# sourceMappingURL=utils.js.map