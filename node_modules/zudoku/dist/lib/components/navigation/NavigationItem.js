import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ExternalLinkIcon } from "lucide-react";
import { useEffect, useRef, useState } from "react";
import { NavLink, useLocation } from "react-router";
import { Tooltip, TooltipArrow, TooltipContent, TooltipProvider, TooltipTrigger, } from "zudoku/ui/Tooltip.js";
import { useAuth } from "../../authentication/hook.js";
import { cn } from "../../util/cn.js";
import { joinUrl } from "../../util/joinUrl.js";
import { AnchorLink } from "../AnchorLink.js";
import { useViewportAnchor } from "../context/ViewportAnchorContext.js";
import { useZudoku } from "../context/ZudokuContext.js";
import { NavigationBadge } from "./NavigationBadge.js";
import { NavigationCategory } from "./NavigationCategory.js";
import { navigationListItem, shouldShowItem } from "./utils.js";
const TruncatedLabel = ({ label, className, }) => {
    const ref = useRef(null);
    const [isTruncated, setIsTruncated] = useState(false);
    useEffect(() => {
        if (!ref.current)
            return;
        if (ref.current.offsetWidth < ref.current.scrollWidth) {
            setIsTruncated(true);
        }
    }, []);
    return (_jsxs(_Fragment, { children: [_jsx("span", { className: cn("truncate flex-1", className), title: label, ref: ref, children: label }), isTruncated && (_jsx(TooltipProvider, { delayDuration: 500, children: _jsxs(Tooltip, { disableHoverableContent: true, children: [_jsx(TooltipTrigger, { className: "absolute inset-0 z-10" }), _jsxs(TooltipContent, { className: "max-w-64 rounded-lg", side: "bottom", align: "center", children: [_jsx(TooltipArrow, {}), label] })] }) }))] }));
};
export const DATA_ANCHOR_ATTR = "data-anchor";
export const NavigationItem = ({ item, onRequestClose, }) => {
    const location = useLocation();
    const { activeAnchor } = useViewportAnchor();
    const auth = useAuth();
    const context = useZudoku();
    if (!shouldShowItem(auth, context)(item)) {
        return null;
    }
    switch (item.type) {
        case "category":
            return (_jsx(NavigationCategory, { category: item, onRequestClose: onRequestClose }));
        case "doc":
            return (_jsxs(NavLink, { viewTransition: true, className: ({ isActive, isPending }) => navigationListItem({ isActive, isPending }), to: joinUrl(item.path), onClick: onRequestClose, end: true, children: [item.icon && _jsx(item.icon, { size: 16, className: "align-[-0.125em]" }), item.badge ? (_jsxs(_Fragment, { children: [item.label && (_jsx(TruncatedLabel, { label: item.label, className: "flex-1" })), _jsx(NavigationBadge, { ...item.badge })] })) : (item.label)] }));
        case "link":
        case "custom-page": {
            const href = item.type === "link" ? item.to : joinUrl(item.path);
            return !href.startsWith("http") ? (_jsxs(AnchorLink, { to: {
                    pathname: href.split("#")[0],
                    hash: href.split("#")[1],
                    search: location.search,
                }, [DATA_ANCHOR_ATTR]: href.split("#")[1], className: navigationListItem({
                    isActive: href ===
                        [location.pathname, activeAnchor].filter(Boolean).join("#"),
                }), onClick: onRequestClose, children: [item.icon && _jsx(item.icon, { size: 16, className: "align-[-0.125em]" }), item.badge ? (_jsxs(_Fragment, { children: [item.label && _jsx(TruncatedLabel, { label: item.label }), _jsx(NavigationBadge, { ...item.badge })] })) : (_jsx("span", { className: "break-all", children: item.label }))] })) : (_jsxs("a", { className: navigationListItem(), href: href, target: "target" in item ? item.target : "_blank", rel: "noopener noreferrer", onClick: onRequestClose, children: [item.icon && _jsx(item.icon, { size: 16, className: "align-[-0.125em]" }), _jsx("span", { className: "whitespace-normal", children: item.label }), _jsx("span", { className: "whitespace-nowrap", children: _jsx(ExternalLinkIcon, { className: "inline -translate-y-0.5", size: 12 }) })] }));
        }
    }
};
//# sourceMappingURL=NavigationItem.js.map