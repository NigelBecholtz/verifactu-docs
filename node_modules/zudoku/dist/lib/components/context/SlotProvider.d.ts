import { type ComponentType, type PropsWithChildren, type ReactNode } from "react";
import { type ExposedComponentProps } from "../../util/useExposedProps.js";
export type SlotType = ReactNode | ComponentType<ExposedComponentProps>;
type SlotItem = {
    id: string;
    content: SlotType;
    type: "prepend" | "replace" | "append";
    sequence: number;
};
type SlotStoreState = {
    items: Map<string, SlotItem[]>;
    sequences: Map<string, number>;
    getItems: (name: string) => SlotItem[];
    setSlot: (id: string, name: string, content: SlotType, type: "prepend" | "replace" | "append") => void;
    clearSlot: (id: string, name: string) => void;
};
export type SlotStore = ReturnType<typeof createSlotStore>;
declare const createSlotStore: ({ slots, }?: {
    slots?: Record<string, SlotType>;
}) => import("zustand").StoreApi<SlotStoreState>;
export declare const SlotProvider: ({ children, slots, }: PropsWithChildren<{
    slots?: Record<string, SlotType>;
}>) => import("react/jsx-runtime").JSX.Element;
export declare function useSlotContext<T>(selector: (state: SlotStoreState) => T): T;
export declare const useRenderSlot: (name: string) => import("react/jsx-runtime").JSX.Element[];
export {};
