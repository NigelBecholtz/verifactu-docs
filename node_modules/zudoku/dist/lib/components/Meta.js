import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Helmet } from "@zudoku/react-helmet-async";
import { useLocation } from "react-router";
import { joinUrl } from "../util/joinUrl.js";
import { useZudoku } from "./context/ZudokuContext.js";
export const Meta = ({ children }) => {
    const { meta, options } = useZudoku();
    const location = useLocation();
    return (_jsxs(_Fragment, { children: [_jsxs(Helmet, { titleTemplate: meta?.title, defaultTitle: meta?.defaultTitle, children: [options.canonicalUrlOrigin && (_jsx("link", { rel: "canonical", href: joinUrl(options.canonicalUrlOrigin, options.basePath, location.pathname) })), meta?.description && (_jsx("meta", { name: "description", content: meta.description })), meta?.favicon && _jsx("link", { rel: "icon", href: meta.favicon }), meta?.generator && _jsx("meta", { name: "generator", content: meta.generator }), meta?.applicationName && (_jsx("meta", { name: "application-name", content: meta.applicationName })), meta?.referrer && _jsx("meta", { name: "referrer", content: meta.referrer }), meta?.keywords && meta.keywords.length > 0 && (_jsx("meta", { name: "keywords", content: meta.keywords.join(", ") })), meta?.authors?.map((author) => (_jsx("meta", { name: "author", content: author }, author))), meta?.creator && _jsx("meta", { name: "creator", content: meta.creator }), meta?.publisher && _jsx("meta", { name: "publisher", content: meta.publisher })] }), children] }));
};
//# sourceMappingURL=Meta.js.map