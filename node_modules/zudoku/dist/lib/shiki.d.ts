import rehypeShikiFromHighlighter from "@shikijs/rehype/core";
import type { Root } from "hast";
import { type JSX } from "react";
import type { BundledLanguage, BundledTheme, CodeOptionsMultipleThemes, HighlighterCore } from "shiki";
export declare const highlighter: HighlighterCore;
type ThemesRecord = CodeOptionsMultipleThemes<BundledTheme>["themes"];
export declare const defaultHighlightOptions: {
    themes: {
        light: "github-light";
        dark: "github-dark";
    };
    defaultColor: false;
    defaultLanguage: string;
    fallbackLanguage: string;
    inline: "tailing-curly-colon";
    addLanguageClass: true;
    transformers: import("shiki").ShikiTransformer[];
    parseMetaString: (str: string) => any;
};
export declare const defaultLanguages: BundledLanguage[];
export declare const createConfiguredShikiRehypePlugins: (themes?: ThemesRecord, highlighterInstance?: HighlighterCore) => ((() => (tree: Root) => void) | [typeof rehypeShikiFromHighlighter, HighlighterCore, {
    themes: Partial<Record<string, import("shiki").ThemeRegistrationAny | import("shiki").StringLiteralUnion<BundledTheme, string>>>;
    defaultColor: false;
    defaultLanguage: string;
    fallbackLanguage: string;
    inline: "tailing-curly-colon";
    addLanguageClass: true;
    transformers: import("shiki").ShikiTransformer[];
    parseMetaString: (str: string) => any;
}])[];
export declare const highlight: (highlighter: HighlighterCore, code: string, lang?: string, themes?: ThemesRecord) => JSX.Element;
export {};
