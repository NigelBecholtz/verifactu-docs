import type { MDXComponents } from "mdx/types.js";
export type MdxComponentsType = Readonly<MDXComponents> | null | undefined;
export declare const MdxComponents: {
    img: ({ node, ...props }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    Framed: ({ caption, className, size, align, children, }: import("react").PropsWithChildren<{
        caption?: string;
        className?: string;
        size?: "sm" | "md" | "lg" | "xl" | "2xl" | "full";
        align?: "center" | "start" | "end";
    }>) => import("react/jsx-runtime").JSX.Element;
    h1: ({ children, id }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    h2: ({ children, id }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    h3: ({ children, id }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    h4: ({ children, id }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    h5: ({ children, id }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    h6: ({ children, id }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    a: ({ href, node, ...props }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    Button: import("react").ForwardRefExoticComponent<import("../ui/Button.js").ButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
    Callout: ({ type, children, title, className, icon, }: {
        type: "info" | "note" | "tip" | "caution" | "danger";
        title?: string;
        children: import("react").ReactNode;
        className?: string;
        icon?: boolean;
    }) => import("react/jsx-runtime").JSX.Element;
    Stepper: ({ children }: import("react").PropsWithChildren) => import("react/jsx-runtime").JSX.Element;
    SyntaxHighlight: import("react").MemoExoticComponent<({ code, children, embedded, ...props }: import("zudoku/ui/CodeBlock.js").CodeBlockProps & ({
        code: string;
        embedded?: boolean;
        children?: never;
    } | {
        code?: never;
        children: string;
        embedded?: boolean;
    })) => import("react/jsx-runtime").JSX.Element>;
    tip: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    info: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    note: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    caution: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    warning: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    danger: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    pre: (props: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
    code: ({ className, node: _node, children, title, inline, showLineNumbers, ...props }: JSX.IntrinsicElements) => import("react/jsx-runtime").JSX.Element;
};
