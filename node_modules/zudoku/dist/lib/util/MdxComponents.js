import { jsx as _jsx } from "react/jsx-runtime";
import { CodeBlock } from "zudoku/ui/CodeBlock.js";
import { AnchorLink } from "../components/AnchorLink.js";
import { Framed } from "../components/Framed.js";
import { Heading } from "../components/Heading.js";
import { InlineCode } from "../components/InlineCode.js";
import { Button } from "../ui/Button.js";
import { Callout } from "../ui/Callout.js";
import { Stepper } from "../ui/Stepper.js";
import { SyntaxHighlight } from "../ui/SyntaxHighlight.js";
import { cn } from "./cn.js";
export const MdxComponents = {
    img: ({ node, ...props }) => {
        if (/\.(mp4|webm|mov|avi)$/.test(props.src ?? "")) {
            return (
            // biome-ignore lint/a11y/useMediaCaption: No in control of the caption here
            _jsx("video", { src: props.src, controls: true, playsInline: true, autoPlay: true, loop: true, className: cn("rounded-lg", props.className) }));
        }
        return (_jsx("img", { alt: props.alt, ...props, className: cn("rounded-lg", props.className) }));
    },
    Framed,
    h1: ({ children, id }) => (_jsx(Heading, { level: 1, id: id, children: children })),
    h2: ({ children, id }) => (_jsx(Heading, { level: 2, id: id, children: children })),
    h3: ({ children, id }) => (_jsx(Heading, { level: 3, id: id, children: children })),
    h4: ({ children, id }) => (_jsx(Heading, { level: 4, id: id, children: children })),
    h5: ({ children, id }) => (_jsx(Heading, { level: 5, id: id, children: children })),
    h6: ({ children, id }) => (_jsx(Heading, { level: 6, id: id, children: children })),
    a: ({ href, node, ...props }) => href && !href.startsWith("http") ? (_jsx(AnchorLink, { to: href, relative: "path", ...props })) : (_jsx("a", { href: href, target: "_blank", ...props, rel: "noreferrer" })),
    Button,
    Callout,
    Stepper,
    SyntaxHighlight,
    tip: (props) => _jsx(Callout, { type: "tip", ...props }),
    info: (props) => _jsx(Callout, { type: "info", ...props }),
    note: (props) => _jsx(Callout, { type: "note", ...props }),
    caution: (props) => _jsx(Callout, { type: "caution", ...props }),
    warning: (props) => _jsx(Callout, { type: "caution", ...props }),
    danger: (props) => _jsx(Callout, { type: "danger", ...props }),
    pre: (props) => (_jsx("pre", { className: cn("not-prose my-4", props.className), ...props })),
    code: ({ className, node: _node, children, title, inline, showLineNumbers, ...props }) => {
        const match = className?.match(/language?-(\w+)/);
        if (inline === "true" || inline === true) {
            return (_jsx(InlineCode, { className: cn(className, "inline"), children: children }));
        }
        return (_jsx(CodeBlock, { language: match?.[1], showLanguageIndicator: true, showLineNumbers: showLineNumbers, title: title, children: _jsx("code", { className: cn(className, "overflow-x-auto scrollbar not-inline"), ...props, children: children }) }));
    },
};
//# sourceMappingURL=MdxComponents.js.map