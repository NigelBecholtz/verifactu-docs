/**
 * ⚠️
 * These are re-exports consumed from the main entry point in `src/app/main.tsx`
 * This is to ensure that they share the exact same context in React.
 * ⚠️
 **/
import { Helmet } from "@zudoku/react-helmet-async";
import { RouterError as RouterErrorImport } from "../errors/RouterError.js";
import { ServerError as ServerErrorImport } from "../errors/ServerError.js";
export declare const Layout: ({ children }: {
    children?: import("react").ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const RouterError: typeof RouterErrorImport;
export declare const ServerError: typeof ServerErrorImport;
export declare const Bootstrap: ({ router, hydrate, }: {
    hydrate?: boolean;
    router: ReturnType<typeof import("react-router").createBrowserRouter>;
}) => import("react/jsx-runtime").JSX.Element;
export declare const BootstrapStatic: ({ router, context, queryClient, helmetContext, bypassProtection, }: {
    helmetContext: HelmetData;
    context: import("react-router").StaticHandlerContext;
    queryClient: import("@tanstack/react-query").QueryClient;
    router: ReturnType<typeof import("react-router").createStaticRouter>;
    bypassProtection?: boolean;
}) => import("react/jsx-runtime").JSX.Element;
export declare const RouteGuard: () => import("react/jsx-runtime").JSX.Element;
export declare const Head: typeof Helmet;
export declare const StatusPage: ({ statusCode, message }: {
    statusCode: number;
    message?: import("react").ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const BuildCheck: ({ buildId, environmentType, endpoint, }: {
    buildId?: string;
    environmentType?: string;
    endpoint?: string;
}) => import("react/jsx-runtime").JSX.Element | null;
export declare const Meta: ({ children }: import("react").PropsWithChildren) => import("react/jsx-runtime").JSX.Element;
